// @ts-nocheck -- skip type checking
import { _runtimeAsync, buildConfig } from "fumadocs-mdx/runtime/async"
const [err, _sourceConfig] = buildConfig(_source)
if (!_sourceConfig) throw new Error(err)
import { _runtime } from "fumadocs-mdx"
import * as _source from "../source.config"
export const blog = _runtimeAsync.doc<typeof _source.blog>([{"info":{"path":"v15.mdx","absolutePath":"/app/apps/docs/content/blog/v15.mdx"},"data":{"title":"Fumadocs v15","description":"Tailwind CSS v4","author":"Fuma Nama","date":"2025-01-24T00:00:00.000Z"},"content":"\n\n## Overview\n\nThe purpose of v15 is mainly to support Tailwind CSS v4.\nTailwind CSS v4 is a complete redesign of its API and internals, to fully adhere the new CSS-first config style, a breaking change is required.\n\nFumadocs v15 has no other significant changes than migrating the config to Tailwind CSS v4.\n\n## Breaking Changes\n\nBefore making the switch, upgrade your site to Tailwind CSS v4 following their [upgrade guide](https://tailwindcss.com/docs/upgrade-guide).\nYou can remove the unused `tailwind.config.js` file and fully rely on the new CSS-first config.\n\nAdd `@import` to the presets exported by Fumadocs UI, and include `fumadocs-ui` package into source.\n\n```css title=\"Tailwind CSS\"\n@import 'tailwindcss';\n@import 'fumadocs-ui/css/neutral.css';\n@import 'fumadocs-ui/css/preset.css';\n\n/* relative to the CSS file, make sure it's correct for your app */\n@source '../node_modules/fumadocs-ui/dist/**/*.js';\n```\n\nSince v15, you will no longer pass options in JavaScript to customise plugins.\nInstead, you can use the new alternatives in Tailwind CSS v4.\n\n### `addGlobalColors: true`\n\nForward the colors again:\n\n```css\n@theme {\n  --color-primary: var(--color-fd-primary);\n  /* same for other colors */\n}\n```\n\n### CSS Variables\n\nFumadocs no longer use `--fd-<color>` like `--fd-primary: 0 0% 0%` for colors, it directly defines and uses colors in `@theme`.\nInstead of the previous format, it uses `hsl()`:\n\n```css\n@theme {\n  --color-fd-primary: hsl(0, 0%, 100%);\n}\n```\n\n### Steps\n\nPrevious Tailwind CSS utilities like `steps` & `steps` are renamed to `fd-steps` and `fd-step` to avoid conflicts.\n\n### Typography\n\nTypography utilities including `prose`, `prose-*` modifiers will continue to work. Please report problems if they are no longer working or have unexpected change in behaviours.\n\n## Improvements\n\nv15 also included some minor improvements to the UI and OpenAPI integration.\n\n### Code Block Tabs\n\nIn the past, you need to write the `<Tabs />` manually when separating code blocks into tabs.\n\n````mdx\n<Tabs items={[\"Tab 1\", \"Tab 2\"]}>\n\n```ts tab=\"Tab 1\"\nconsole.log('Hello World');\n```\n\n```ts tab=\"Tab 2\"\nconsole.log('Hello World');\n```\n\n</Tabs>\n````\n\nNow you can do:\n\n````mdx\n```ts tab=\"Tab 1\"\nconsole.log('Hello World');\n```\n\n```ts tab=\"Tab 2\"\nconsole.log('Hello World');\n```\n````\n\nNote that the previous usage still works for those who want to customise or pass props to the `<Tabs />` component.\n\n### Reversed Items in `meta.json`\n\nThe rest item `...` in the `pages` property of `meta.json` now supports reversed order:\n\n```json\n{\n  \"pages\": [\"z...a\"]\n}\n```\n\n### OpenAPI Playground\n\nv15 improved the playground UI (inspired by the minimalism of Scalar), and brought Scalar API Client support to Fumadocs OpenAPI.\n\nYou can enable the Scalar API Client using `useScalar` option in `createOpenAPI()`:\n\n```ts\nimport { createOpenAPI } from 'fumadocs-openapi/server';\nimport { APIPlayground } from 'fumadocs-openapi/scalar';\n\nexport const openapi = createOpenAPI({\n  renderer: {\n    APIPlayground,\n  },\n});\n```\n\nAnd install & configure their `@scalar/api-client-react`:\n\n```package-install\n@scalar/api-client-react\n```\n\n```css title=\"global.css\"\n@import '@scalar/api-client-react/style.css' layer(base);\n```\n\n<Callout>\n  Be careful that you must configure Tailwind CSS first, using the pre-built\n  stylesheet of Fumadocs UI will conflict with their `style.css` because both\n  libraries use Tailwind CSS for styling.\n</Callout>\n\n## Future Plans\n\nThis update should be a simple migration for most developers updating to Tailwind CSS v4.\n\nIn the future, we also want to make further improvements to Fumadocs MDX:\n\n- remove `transform` API - you can easily do the same with `.map()` on runtime like:\n\n```ts\nimport { blog } from \"@/.source\"\n\nexport const updatedBlog = blog.map(...)\n```\n\n- remove Manifest API - it was designed to export search indexes, but now it's recommended to implement using route handlers.\n\n- Mention more about our [MDX Remote](/docs/headless/custom-source#mdx-remote) package, it will be the primary solution to handle large docs sites with performance needs that bundler couldn't do, including lazy compilation of MDX files.\n"}, {"info":{"path":"why-docs.mdx","absolutePath":"/app/apps/docs/content/blog/why-docs.mdx"},"data":{"title":"Why do you need a docs?","description":"You've read so many docs, but are they necessary?","author":"Fuma Nama","date":"2024-05-26T00:00:00.000Z"},"content":"\n\nPeople often ask me, do we really need a framework to build docs sites? Well, **You don't**.\n\nDocumentation sites are so important in software development,\nan internal docs for developers in your company to understand the architecture,\na docs for frameworks,\na docs for web standards...\n\nBuilding docs is simple, but difficult.\n\nThere are so many paradigms to build a docs, but writing a beginner-friendly docs could be difficult.\nAs a result, people tends to use powerful docs frameworks, making the docs site interactive and straightforward.\n\n## Over-Engineered\n\nFor the docs of a small library/API service, you probably don't need to setup a Next.js site and spend time writing your site.\nNeither Nextra nor Fumadocs could be better than GitHub wiki and Swagger docs in this case.\n\nThey offer a good, descent UI, basic functionalities, and a proper workflow of authoring docs.\nThe DX is good enough, I can't think of a reason to switch to a full-powered docs framework just to make your docs looks fancy.\n\nI'll just recommend writing your docs in markdown, make it accessible on your GitHub repository.\n\n## Why Framework?\n\nNow you may wonder, why major services and frameworks have their own docs sites built with docs frameworks?\n\nOf course, _Usually_ using things like GitHub Wiki is adequate, but it is not always true.\nLet's take Component Library for example, you cannot showcase your components with Markdown.\nYou will constantly find an ordinary Markdown document lacks of capability and flexibility.\n\nDocumentation frameworks aim to solve this problem, with the ability to integrate with major libraries like **React.js** and **Vue.js**.\nGood examples are Vitepress, Mintlify and Nextra - They made writing a docs more convenient and effective, while offering a better, dedicated experience to readers.\n\nFor anything more than a simple library or API service, **it is worth a try.**\n\n### Reinvent the Wheels\n\nI would never recommend building a \"custom docs site\" on your own, without a proper docs framework.\nDespite the **Don't re-invent the wheels** principle, your hand-made docs site actually takes way more efforts to make it descent.\n\n1. Document Search\n2. A user-friendly navigation experience\n3. Reading experience\n4. UI/UX Design\n\nImplementing them properly already sounds nerve-racking, right?\n\nThe docs itself, is definitely not your first priority. Never should you spend your precious time re-inventing the wheels - **it isn't worth**.\n\nFrom my perspective, I'd rather use GitHub Wiki than re-inventing the wheels.\nWhy don't pick a descent solution? It saves your indispensable time, and help reducing the shitty docs sites on the internet.\n\n## What we focus at Fumadocs?\n\nI personally value reading experience more than a fancy eye-catching UI.\nYou may notice, we do not have animations everywhere, and we avoided many fancy designs.\n\nFanciness of UI should stay only in landing page, a docs site should focus on **content.**\nNavigation elements are helpers to browse your site, never should they take up too much space on the screen.\n\nOne thing I hated the most is the design of _two sidebars_, it is confusing and meaningless.\nYou can just organize all items to a single, clean sidebar, but people instead added two hamburger buttons to the navbar.\n\n<div className='mx-auto max-w-[400px]'>\n\n![Next.js Docs](/blog/img.png)\n\n</div>\n\nMy favourite docs site is still [Linear docs](https://linear.app/docs), looks good and simple.\n\n## Conclusion\n\n1. You don't need a full-powered docs framework for a small library\n2. Don't make a docs site on your own, use a proper docs framework\n3. Fumadocs focuses on reading experience\n4. You should focus on content, too\n"}], "blog", _sourceConfig)
export const docs = _runtimeAsync.docs<typeof _source.docs>([{"info":{"path":"cli/index.mdx","absolutePath":"/app/apps/docs/content/docs/cli/index.mdx"},"data":{"title":"User Guide","description":"The CLI tool that automates setups and installing components.","index":false},"content":"\n\n## Installation\n\nInitialize a config for CLI:\n\n```package-install\nnpx @fumadocs/cli\n```\n\nYou can change the output paths of components in the config.\n\n### Components\n\nSelect and install components.\n\n```package-install\nnpx @fumadocs/cli add\n```\n\nYou can pass component names directly.\n\n```package-install\nnpx @fumadocs/cli add banner files\n```\n\n#### How the magic works?\n\nThe CLI fetches the latest version of component from the GitHub repository of Fumadocs.\nWhen you install the component, it is guaranteed to be up-to-date.\n\nIn addition, it also transforms import paths.\nMake sure to use the latest version of CLI\n\n> This is highly Inspired by Shadcn UI.\n\n### Customise\n\nA simple way to customise Fumadocs layouts.\n\n```package-install\nnpx @fumadocs/cli customise\n```\n\n### Tree\n\nGenerate files tree for Fumadocs UI `Files` component, using the `tree` command from your terminal.\n\n```package-install\nnpx @fumadocs/cli tree ./my-dir ./output.tsx\n```\n\nYou can output MDX file too:\n\n```package-install\nnpx @fumadocs/cli tree ./my-dir ./output.mdx\n```\n\nSee help for further details:\n\n```package-install\nnpx @fumadocs/cli tree -h\n```\n\n#### Example Output\n\n```tsx title=\"output.tsx\"\nimport { File, Folder, Files } from 'fumadocs-ui/components/files';\n\nexport default (\n  <Files>\n    <Folder name=\"app\">\n      <File name=\"layout.tsx\" />\n      <File name=\"page.tsx\" />\n      <File name=\"global.css\" />\n    </Folder>\n    <Folder name=\"components\">\n      <File name=\"button.tsx\" />\n      <File name=\"tabs.tsx\" />\n      <File name=\"dialog.tsx\" />\n    </Folder>\n    <File name=\"package.json\" />\n  </Files>\n);\n```\n"}, {"info":{"path":"headless/custom-source.mdx","absolutePath":"/app/apps/docs/content/docs/headless/custom-source.mdx"},"data":{"title":"Custom Source","description":"Build your own content source","index":false},"content":"\n\n## Introduction\n\n**Fumadocs is very flexible.** You can integrate with any content source, even without an official adapter.\n\n> This guide assumes you are experienced with Next.js App Router.\n\n### Examples\n\nYou can see examples to use Fumadocs with a CMS, which allows a nice experience on publishing content, and real-time update without re-building the app.\n\n- [BaseHub](https://github.com/fuma-nama/fumadocs-basehub)\n- [Sanity](https://github.com/fuma-nama/fumadocs-sanity)\n\nFor a custom content source implementation, you will need:\n\n### Page Tree\n\nYou can either hardcode the page tree, or write some code to generate one.\nSee [Definitions of Page Tree](/docs/headless/page-tree).\n\nPass your Page Tree to `DocsLayout` (usually in a `layout.tsx`).\n\n```tsx title=\"layout.tsx\"\nimport { DocsLayout } from 'fumadocs-ui/layouts/docs';\nimport type { ReactNode } from 'react';\n\nexport default function Layout({ children }: { children: ReactNode }) {\n  return (\n    <DocsLayout\n      nav={{ title: 'Example Docs' }}\n      tree={\n        {\n          /// your own tree\n        }\n      }\n    >\n      {children}\n    </DocsLayout>\n  );\n}\n```\n\nThe page tree is like a smarter \"sidebar items\", they will be referenced everywhere in the UI for navigation elements, such as the page footer.\n\n### Docs Page\n\nSame as a normal Next.js app, the code of your docs page is located in `[[...slug]]/page.tsx`.\n\n#### SSG\n\nDefine the [`generateStaticParams`](https://nextjs.org/docs/app/api-reference/functions/generate-static-params) function.\nIt should return a list of parameters (`params`) to populate the `[[...slug]]` catch-all route.\n\n#### Body\n\nIn the main body of page, find the corresponding page according to the slug and render its content inside the `DocsPage` component.\n\nYou also need table of contents, which can be generated with your own implementation, or using the [`getTableOfContents`](/docs/headless/utils/get-toc) utility (Markdown/MDX only).\n\n```tsx\nimport { DocsPage, DocsBody } from 'fumadocs-ui/page';\nimport { getPage } from './my-content-source';\nimport { notFound } from 'next/navigation';\n\nexport default function Page({ params }: { params: { slug?: string[] } }) {\n  const page = getPage(params.slug);\n  if (!page) notFound();\n\n  return (\n    <DocsPage toc={page.tableOfContents}>\n      <DocsBody>{page.render()}</DocsBody>\n    </DocsPage>\n  );\n}\n```\n\n#### Metadata\n\nNext.js offers a Metadata API for SEO, you can configure it with `generateMetadata` (similar as the code above).\n\n### Document Search\n\nThis can be difficult considering your content may not be necessarily Markdown/MDX.\nFor Markdown and MDX, the built-in [Search API](/docs/headless/search/orama) is adequate for most use cases.\nOtherwise, you will have to bring your own implementation.\n\nWe recommend 3rd party solutions like Algolia Search. They are more flexible than the built-in Search API, and is easier to integrate with remote sources.\nFumadocs offers a simple [Algolia Search Adapter](/docs/headless/search/algolia), which includes a search client to integrate with Fumadocs UI.\n\n## MDX Remote\n\nFumadocs offers the **MDX Remote** package, it is a helper to integrate Markdown-based content sources with Fumadocs.\nYou can think it as a `next-mdx-remote` with built-in plugins for Fumadocs.\n\n### Setup\n\n```package-install\n@fumadocs/mdx-remote\n```\n\nThe main feature it offers is the MDX Compiler, it can compile MDX content to JSX nodes.\nSince it doesn't use a bundler, there's some limitations:\n\n- No imports and exports in MDX files.\n\nIt's compatible with Server Components. For example:\n\n```tsx\nimport { compileMDX } from '@fumadocs/mdx-remote';\nimport { getPage } from './my-content-source';\nimport { DocsBody, DocsPage } from 'fumadocs-ui/page';\nimport { getMDXComponents } from '@/mdx-components';\n\nexport default async function Page({\n  params,\n}: {\n  params: { slug?: string[] };\n}) {\n  const page = getPage(params.slug);\n  const compiled = await compileMDX({\n    source: page.content,\n  });\n\n  const MdxContent = compiled.body;\n\n  return (\n    <DocsPage toc={compiled.toc}>\n      <DocsBody>\n        <MdxContent components={getMDXComponents()} />\n      </DocsBody>\n    </DocsPage>\n  );\n}\n```\n\n#### Images\n\nOn some platforms like Vercel, the original `public` folder (including static assets like images) will be removed after `next build`.\n`compileMDX` might no longer be able to access local images in `public`.\n\nWhen referencing images, make sure to use a URL.\n"}, {"info":{"path":"headless/index.mdx","absolutePath":"/app/apps/docs/content/docs/headless/index.mdx"},"data":{"title":"Introduction","description":"Getting started with core library","icon":"Album","index":false},"content":"\n\n## What is this?\n\nFumadocs Core offers server-side functions and headless components to build docs on any React.js frameworks like Next.js.\n\n- Search (built-in: Orama, Algolia Search)\n- Breadcrumb, Sidebar, TOC Components\n- Remark/Rehype Plugins\n- Additional utilities\n\n<Callout title=\"Tip\">\n\n    It can be used without Fumadocs UI, in other words, it's headless.\n\n    For beginners and normal usages, use [Fumadocs UI](/docs/ui).\n\n</Callout>\n\n## Installation\n\nNo other dependencies required.\n\n```package-install\nfumadocs-core\n```\n\nFor some components, a framework provider is needed:\n\n```tsx tab=\"Next.js\"\nimport type { ReactNode } from 'react';\nimport { NextProvider } from 'fumadocs-core/framework/next';\n\nexport function RootLayout({ children }: { children: ReactNode }) {\n  // or if you're using Fumadocs UI, use `<RootProvider />`\n  return <NextProvider>{children}</NextProvider>;\n}\n```\n\n```tsx tab=\"React Router\"\nimport type { ReactNode } from 'react';\nimport { ReactRouterProvider } from 'fumadocs-core/framework/react-router';\n\nexport function Root({ children }: { children: ReactNode }) {\n  return <ReactRouterProvider>{children}</ReactRouterProvider>;\n}\n```\n\n```tsx tab=\"Tanstack Start/Router\"\nimport type { ReactNode } from 'react';\nimport { TanstackProvider } from 'fumadocs-core/framework/tanstack';\n\nexport function Root({ children }: { children: ReactNode }) {\n  return <TanstackProvider>{children}</TanstackProvider>;\n}\n```\n\nIt offers simple document searching as well as components for building a\ngood docs.\n\n<Cards>\n\n<Card\n  title=\"Breadcrumb\"\n  href=\"/docs/headless/components/breadcrumb\"\n  description=\"The navigation component at the top of screen\"\n/>\n\n<Card\n  title=\"TOC\"\n  href=\"/docs/headless/components/toc\"\n  description=\"A Table of Contents with active anchor observer\"\n/>\n\n<Card\n  title=\"Sidebar\"\n  href=\"/docs/headless/components/sidebar\"\n  description=\"The navigation bar at aside of viewport\"\n/>\n\n<Card\n  title=\"Search\"\n  href=\"/docs/headless/search\"\n  description=\"Implement document searching\"\n/>\n\n</Cards>\n"}, {"info":{"path":"headless/internationalization.mdx","absolutePath":"/app/apps/docs/content/docs/headless/internationalization.mdx"},"data":{"title":"Internationalization","description":"Support multiple languages in your documentation","index":false},"content":"\n\n## Introduction\n\nFumadocs core provides necessary middleware and options for i18n support.\n\nYou can define a config to share between utilities.\n\n```\n\n### Hide Locale Prefix\n\nTo hide the locale prefix (e.g. `/en/page` -> `/page`), use the `hideLocale` option.\n\n```ts\nimport type { I18nConfig } from 'fumadocs-core/i18n';\n\nexport const i18n: I18nConfig = {\n  defaultLanguage: 'en',\n  languages: ['en', 'cn'],\n  hideLocale: 'default-locale',\n};\n```\n\n| Mode             | Description                                        |\n| ---------------- | -------------------------------------------------- |\n| `always`         | Always hide the prefix, detect locale from cookies |\n| `default-locale` | Only hide the default locale                       |\n| `never`          | Never hide the prefix (default)                    |\n\n<Callout type='warn' title={<>Using <code>always</code></>}>\n\nOn `always` mode, locale is stored as a cookie (set by the middleware), which isn't optimal for static sites.\n\nThis may cause undesired cache problems, and need to pay extra attention on SEO to ensure search engines can index your pages correctly.\n\n</Callout>\n\n### Middleware\n\nRedirects users to appropriate locale, it can be customised from `i18n.ts`.\n\n\n\n> When `hideLocale` is enabled, it uses `NextResponse.rewrite` to hide locale prefixes.\n"}, {"info":{"path":"headless/page-conventions.mdx","absolutePath":"/app/apps/docs/content/docs/headless/page-conventions.mdx"},"data":{"title":"Routing","description":"A shared convention for organizing your documents","index":false},"content":"\n\n<Callout title='Before reading'>\n\n    This guide only applies for content sources that uses `loader()` API, such as Fumadocs MDX.\n\n</Callout>\n\n## Overview\n\nWhile Next.js handles routing, Fumadocs generates **page slugs** and **sidebar items** (page tree) from your content directory using [`loader()`](/docs/headless/source-api).\n\nYou can define folders and pages similar to the file-system based routing of Next.js.\n\n<Files>\n  <Folder name=\"content/docs (content directory)\" defaultOpen>\n    <File name=\"index.mdx\" />\n    <File name=\"getting-started.mdx\" />\n  </Folder>\n</Files>\n\n## File\n\nA [MDX](https://mdxjs.com) or Markdown file, you can customise its frontmatter.\n\n```mdx\n---\ntitle: My Page\ndescription: Best document ever\nicon: HomeIcon\nfull: true\n---\n\n## Learn More\n```\n\n| name          | description                                        |\n| ------------- | -------------------------------------------------- |\n| `title`       | The title of page                                  |\n| `description` | The description of page                            |\n| `icon`        | The name of icon, see [Icons](#icons)              |\n| `full`        | Fill all available space on the page (Fumadocs UI) |\n\n<Callout title='Fumadocs MDX'>\n\n    You can use the [`schema`](/docs/mdx/collections#schema-1) option to add frontmatter properties.\n\n</Callout>\n\n### Slugs\n\nThe slugs of a page are generated from its file path.\n\n| path (relative to content folder) | slugs             |\n| --------------------------------- | ----------------- |\n| `./dir/page.mdx`                  | `['dir', 'page']` |\n| `./dir/index.mdx`                 | `['dir']`         |\n\n## Folder\n\nOrganize multiple pages, you can create a [Meta file](#meta) to customise folders.\n\n### Folder Group\n\nBy default, putting a file into folder will change its slugs.\nYou can wrap the folder name in parentheses to avoid impacting the slugs of child files.\n\n| path (relative to content folder) | slugs      |\n| --------------------------------- | ---------- |\n| `./(group-name)/page.mdx`         | `['page']` |\n\n## Meta\n\nCustomise folders by creating a `meta.json` file in the folder.\n\n```json title=\"meta.json\"\n{\n  \"title\": \"Display Name\",\n  \"icon\": \"MyIcon\",\n  \"pages\": [\"index\", \"getting-started\"],\n  \"defaultOpen\": true\n}\n```\n\n| name          | description                           |\n| ------------- | ------------------------------------- |\n| `title`       | Display name                          |\n| `icon`        | The name of icon, see [Icons](#icons) |\n| `pages`       | Folder items (see below)              |\n| `defaultOpen` | Open the folder by default            |\n\n### Pages\n\nBy default, folder items are sorted alphabetically.\n\nYou can add or control the order of items using `pages`, items are not included unless they are listed inside.\n\n```json title=\"meta.json\"\n{\n  \"title\": \"Name of Folder\",\n  \"pages\": [\"guide\", \"components\", \"---My Separator---\", \"./nested/page\"]\n}\n```\n\n<Files>\n  <File name=\"meta.json\" />\n  <File name=\"guide.mdx\" />\n  <File name=\"components.mdx\" />\n  <File name=\"nested/page.mdx\" />\n</Files>\n\n#### Rest\n\nAdd a `...` item to include remaining pages (sorted alphabetically), or `z...a` for descending order.\n\n```json title=\"meta.json\"\n{\n  \"pages\": [\"guide\", \"...\"]\n}\n```\n\nYou can add `!name` to prevent an item from being included.\n\n```json title=\"meta.json\"\n{\n  \"pages\": [\"guide\", \"...\", \"!components\"]\n}\n```\n\n#### Extract\n\nYou can extract the items from a folder with `...folder_name`.\n\n```json title=\"meta.json\"\n{\n  \"pages\": [\"guide\", \"...nested\"]\n}\n```\n\n#### Link\n\nUse the syntax `[Text](url)` to insert links, or `[Icon][Text](url)` to add icon.\n\n```json title=\"meta.json\"\n{\n  \"pages\": [\n    \"[Vercel](https://vercel.com)\",\n    \"[Triangle][Vercel](https://vercel.com)\"\n  ]\n}\n```\n\n## Icons\n\nSince Fumadocs doesn't include an icon library, you have to convert the icon names to JSX elements in runtime, and render it as a component.\n\nYou can add an [`icon` handler](/docs/headless/source-api#icons) to `loader()`.\n\n## Root Folder\n\nMarks the folder as a root folder, only items in the opened root folder will be considered.\n\n```json title=\"meta.json\"\n{\n  \"title\": \"Name of Folder\",\n  \"description\": \"The description of root folder (optional)\",\n  \"root\": true\n}\n```\n\nFor example, when you are opening a root folder `framework`, the other folders (e.g. `headless`) are not shown on the sidebar and other navigation elements.\n\n<Files>\n  <Folder name=\"framework\" defaultOpen>\n    <File name=\"index.mdx\" />\n    <File\n      name=\"current-page.mdx\"\n      className=\"!text-fd-primary !bg-fd-primary/10\"\n    />\n    <File name=\"other-pages.mdx\" />\n  </Folder>\n  <Folder name=\"headless (hidden)\" className=\"opacity-50\" disabled defaultOpen>\n    <File name=\"my-page.mdx\" />\n  </Folder>\n</Files>\n\n<Callout title='Fumadocs UI'>\n\n    Fumadocs UI renders root folders as [Sidebar Tabs](/docs/ui/navigation/sidebar#sidebar-tabs), which allows user to switch between them.\n\n</Callout>\n\n## Internationalization\n\n<include>../../shared/page-conventions.i18n.mdx</include>\n"}, {"info":{"path":"headless/page-tree.mdx","absolutePath":"/app/apps/docs/content/docs/headless/page-tree.mdx"},"data":{"title":"Page Tree","description":"The structure of page tree.","index":false},"content":"\n\nPage tree is a tree structure that describes all navigation links, with other items like separator and folders.\n\nIt will be sent to the client and being referenced in navigation elements including the sidebar and breadcrumb.\nHence, you shouldn't store any sensitive or large data in page tree.\n\n<Callout title=\"Note\">\n\nBy design, page tree only contains necessary information of all pages and folders.\n\nUnserializable data such as functions can't be passed to page tree.\n\n</Callout>\n\n## Conventions\n\nThis is the definitions of Page Tree, you may refer to Page Conventions to learn how to structure your folders/pages.\n\nCertain nodes contain a `$ref` property to link to its original page/meta file, they are optional when hardcoding it.\n\n### Root\n\nThe initial root of page trees.\n\n<AutoTypeTable path=\"./content/docs/headless/props.ts\" name=\"PageTreeRoot\" />\n\n### Page\n\n```json\n{\n  \"type\": \"page\",\n  \"name\": \"Quick Start\",\n  \"url\": \"/docs\"\n}\n```\n\n> External urls are also supported\n\n<AutoTypeTable path=\"./content/docs/headless/props.ts\" name=\"PageTreeItem\" />\n\n### Folder\n\n```json\n{\n    \"type\": \"folder\",\n    \"name\": \"Guide\",\n    \"index\": {\n        \"type\": \"page\",\n        ...\n    }\n    \"children\": [\n        ...\n    ]\n}\n```\n\n<AutoTypeTable path=\"./content/docs/headless/props.ts\" name=\"PageTreeFolder\" />\n\n#### As Root\n\nTo implement multiple page trees, you can add a `root` property to the folder node.\nThis will mark the folder as a root folder, and the nearest root folder of current page will be used as the root of page tree.\nInstead of showing the entire page tree, navigation elements will be restricted within the current root.\n\n### Separator\n\nA label between items.\n\n```json\n{\n  \"type\": \"separator\",\n  \"name\": \"Components\"\n}\n```\n\n<AutoTypeTable\n  path=\"./content/docs/headless/props.ts\"\n  name=\"PageTreeSeparator\"\n/>\n\n## Icons\n\nIcon is a `ReactElement`, supported by pages and folders.\n\n## Type Bindings\n\nYou can import the type from server package.\n\n```ts\nimport type { PageTree } from 'fumadocs-core/server';\n\nconst tree: PageTree.Root = {\n  // props\n};\n```\n"}, {"info":{"path":"headless/source-api.mdx","absolutePath":"/app/apps/docs/content/docs/headless/source-api.mdx"},"data":{"title":"loader()","description":"Turn a content source into a unified interface","index":false},"content":"\n\n## Usage\n\n`loader()` provides an interface for Fumadocs to integrate with file-system based content sources.\n\n### What it does?\n\n- Generate page trees based on file system.\n- Assign URL and slugs to each page.\n- Output useful utilities to interact with content.\n\nIt doesn't rely on the real file system (zero `node:fs` usage), a virtual storage is also allowed.\n\nYou can use it with built-in content sources like Fumadocs MDX.\n\n```ts\nimport { loader } from 'fumadocs-core/source';\nimport { docs } from '@/.source';\n\nexport const source = loader({\n  source: docs.toFumadocsSource(),\n});\n```\n\n### URL\n\nYou can override the base URL, or specify a function to generate URL for each page.\n\n```ts\nimport { loader } from 'fumadocs-core/source';\n\nloader({\n  baseUrl: '/docs',\n  // or you can customise it with function\n  url(slugs, locale) {\n    if (locale) return '/' + [locale, 'docs', ...slugs].join('/');\n    return '/' + ['docs', ...slugs].join('/');\n  },\n});\n```\n\n### Icons\n\nLoad the [icon](/docs/headless/page-conventions#icons) property specified by pages and meta files.\n\n```ts\nimport { loader } from 'fumadocs-core/source';\nimport { icons } from 'lucide-react';\nimport { createElement } from 'react';\n\nloader({\n  icon(icon) {\n    if (!icon) {\n      // You may set a default icon\n      return;\n    }\n\n    if (icon in icons) return createElement(icons[icon as keyof typeof icons]);\n  },\n});\n```\n\n### I18n\n\nPass the `i18n` config to loader.\n\n```ts title=\"lib/source.ts\"\nimport { i18n } from '@/lib/i18n';\nimport { loader } from 'fumadocs-core/source';\n\nexport const source = loader({\n  i18n, // [!code highlight]\n});\n```\n\nWith i18n enabled, loader will generate a page tree for every locale.\n\nWhen looking for a page, it fallbacks to default locale if the page doesn't exist for specified locale.\n\n## Output\n\nThe loader outputs a source object.\n\n### Get Page\n\nGet page with slugs.\n\n```ts\nimport { source } from '@/lib/source';\n\nsource.getPage(['slug', 'of', 'page']);\n\n// with i18n\nsource.getPage(['slug', 'of', 'page'], 'locale');\n```\n\n### Get Pages\n\nGet a list of page available for locale.\n\n```ts\nimport { source } from '@/lib/source';\n\n// from default locale\nsource.getPages();\n\n// for a specific locale\nsource.getPages('locale');\n```\n\n### Page Tree\n\n```ts\nimport { source } from '@/lib/source';\n\n// without i18n\nsource.pageTree;\n\n// with i18n\nsource.pageTree['locale'];\n```\n\n### Get from Node\n\nThe page tree nodes contain references to their original file path.\nYou can find their original page or meta file from the tree nodes.\n\n```ts\nimport { source } from '@/lib/source';\n\nsource.getNodePage(pageNode);\nsource.getNodeMeta(folderNode);\n```\n\n### Params\n\nA function to generate output for Next.js `generateStaticParams`.\nThe generated parameter names will be `slug: string[]` and `lang: string` (i18n only).\n\n```ts title=\"app/[[...slug]]/page.tsx\"\nimport { source } from '@/lib/source';\n\nexport function generateStaticParams() {\n  return source.generateParams();\n}\n```\n\n### Language Entries\n\nGet available languages and its pages.\n\n```ts\nimport { source } from '@/lib/source';\n\n// language -> pages\nconst entries = source.getLanguages();\n```\n\n## Deep Dive\n\nAs mentioned, Source API doesn't rely on real file systems.\nDuring the process, your input source files will be parsed and form a virtual storage to avoid inconsistent behaviour between different OS.\n\n### Transformer\n\nTo perform virtual file-system operations before processing, you can add a transformer.\n\n```ts\nimport { loader } from 'fumadocs-core/source';\n\nloader({\n  transformers: [\n    ({ storage }) => {\n      storage.makeDir();\n    },\n  ],\n});\n```\n\n### Page Tree\n\nThe page tree is generated from your file system, using the **Page Tree Builder**.\nIt also filters out some unnecessary information (e.g. unused frontmatter properties).\n\nTo customise the process, use the `pageTree` option.\nYou can attach custom properties to page tree nodes, like customising the display name of pages and folders.\n\n```tsx\nimport React from 'react';\nimport { loader } from 'fumadocs-core/source';\n\nloader({\n  pageTree: {\n    attachFile(node, file) {\n      // you can access its file information\n      console.log(file?.data);\n      // JSX nodes are allowed\n      node.name = <>Some JSX Nodes here</>;\n\n      return node;\n    },\n  },\n});\n```\n\n### Custom Source\n\nTo plug your own content source, create a `Source` object.\n\nIt includes a `files` property which is an array of virtual files.\nEach virtual file must contain its file path and corresponding data.\nYou can check type definitions for more info.\n\nSince Source API doesn't rely on file system, file paths cannot be absolute or relative (for example, `./file.mdx` and `D://content/file.mdx` are not allowed).\nInstead, pass the file paths like `file.mdx` and `content/file.mdx`.\n\n```ts\nimport { Source } from 'fumadocs-core/source';\n\nexport function createMySource(): Source<{\n  metaData: { title: string; pages: string[] }; // Your custom type\n  pageData: { title: string; description: string }; // Your custom type\n}> {\n  return {\n    files: [],\n  };\n}\n```\n"}, {"info":{"path":"mdx/async.mdx","absolutePath":"/app/apps/docs/content/docs/mdx/async.mdx"},"data":{"title":"Async Mode","description":"Runtime compilation of content files.","index":false},"content":"\n\n## Introduction\n\nBy default, all Markdown and MDX files need to be pre-compiled first, the same constraint also applies on development server.\n\nThis may result in longer dev server start time for large docs sites, you can enable Async Mode on `doc` collections to improve this.\n\n### Setup\n\nInstall required dependencies.\n\n```package-install\n@fumadocs/mdx-remote shiki\n```\n\nEnable Async Mode.\n\n```ts tab=\"Docs Collection\"\nimport { defineDocs } from 'fumadocs-mdx/config';\n\nexport const docs = defineDocs({\n  dir: 'content/docs',\n  docs: {\n    async: true,\n  },\n});\n```\n\n```ts tab=\"Doc Collection\"\nimport { defineCollections } from 'fumadocs-mdx/config';\n\nexport const doc = defineCollections({\n  type: 'doc',\n  dir: 'content/docs',\n  async: true,\n});\n```\n\n### Usage\n\nAsync Mode allows on-demand compilation of Markdown and MDX content, by moving the compilation process from build time to Next.js runtime.\n\nHowever, you need to invoke the `load()` async function to load and compile content.\n\nFor example:\n\n```tsx title=\"lib/source.ts\"\nimport { loader } from 'fumadocs-core/source';\nimport { docs } from '@/.source';\n\nexport const source = loader({\n  baseUrl: '/docs',\n  source: docs.toFumadocsSource(),\n});\n```\n\n```tsx title=\"page.tsx\"\nimport { source } from '@/lib/source';\nimport { getMDXComponents } from '@/mdx-components';\n\nconst page = source.getPage(['...']);\n\nif (page) {\n  // frontmatter properties are available\n  console.log(page.data);\n\n  // Markdown content requires await\n  const { body: MdxContent, toc } = await page.data.load();\n\n  console.log(toc);\n\n  return <MdxContent components={getMDXComponents()} />;\n}\n```\n\nWhen using Async Mode, we highly recommend to use 3rd party services to implement search, which usually has a better capability to handle massive amount of content to index.\n\n### Constraints\n\nIt comes with some limitations on MDX features.\n\n- No import/export allowed in MDX files, for MDX components, pass them from the `components` prop instead.\n- Images must be referenced with URL (e.g. `/images/test.png`). Don't use **file paths** like `./image.png`, you should locate your images in `public` folder, and reference them with URLs.\n"}, {"info":{"path":"mdx/collections.mdx","absolutePath":"/app/apps/docs/content/docs/mdx/collections.mdx"},"data":{"title":"Collections","description":"Collection of content data for your app","index":false},"content":"\n\n## Define Collections\n\nDefine a collection to parse a certain set of files.\n\n```ts\nimport { defineCollections } from 'fumadocs-mdx/config';\nimport { z } from 'zod';\n\nexport const blog = defineCollections({\n  type: 'doc',\n  dir: './content/blog',\n  schema: z.object({\n    // schema\n  }),\n  // other options\n});\n```\n\n### `type`\n\nThe accepted type of collection.\n\n```ts\nimport { defineCollections } from 'fumadocs-mdx/config';\n\n// only scan for json/yaml files\nexport const metaFiles = defineCollections({\n  type: 'meta',\n  // options\n});\n```\n\n- `type: meta`\n\n  Accept JSON/YAML Files, available options:\n\n  <AutoTypeTable path=\"./content/docs/mdx/props.ts\" name=\"MetaCollection\" />\n\n- `type: doc`\n\n  Markdown/MDX Documents, available options:\n\n  <AutoTypeTable path=\"./content/docs/mdx/props.ts\" name=\"DocCollection\" />\n\n### `dir`\n\nDirectories to scan input files.\n\n### `schema`\n\nThe schema to validate file data (frontmatter on `doc` type, content on `meta` type).\n\n```ts\nimport { defineCollections } from 'fumadocs-mdx/config';\nimport { z } from 'zod';\n\nexport const blog = defineCollections({\n  type: 'doc',\n  dir: './content/blog',\n  schema: z.object({\n    name: z.string(),\n  }),\n});\n```\n\n> [Standard Schema](https://standardschema.dev) compatible libraries, including Zod are supported.\n\nNote that the validation is done by build time, hence the output must be serializable.\nYou can also pass a function and receives the transform context.\n\n```ts\nimport { defineCollections } from 'fumadocs-mdx/config';\nimport { z } from 'zod';\n\nexport const blog = defineCollections({\n  type: 'doc',\n  dir: './content/blog',\n  schema: (ctx) => {\n    return z.object({\n      name: z.string(),\n      testPath: z.string().default(\n        // original file path\n        ctx.path,\n      ),\n    });\n  },\n});\n```\n\n### `mdxOptions`\n\nCustomise MDX options on collection level.\n\n```ts title=\"source.config.ts\"\nimport { defineCollections, getDefaultMDXOptions } from 'fumadocs-mdx/config';\n\nexport const blog = defineCollections({\n  type: 'doc',\n  mdxOptions: {\n    // mdx options\n  },\n});\n```\n\nBy design, this will remove all default settings applied by your global config and Fumadocs MDX.\nYou have full control over MDX options.\n\nYou can use `getDefaultMDXOptions` to apply default configurations, it accepts the [extended MDX Options](/docs/mdx/mdx#extended).\n\n```ts title=\"source.config.ts\"\nimport { defineCollections, getDefaultMDXOptions } from 'fumadocs-mdx/config';\n\nexport const blog = defineCollections({\n  type: 'doc',\n  mdxOptions: getDefaultMDXOptions({\n    // extended mdx options\n  }),\n});\n```\n\n> This API only available on `doc` type.\n\n## Define Docs\n\nDefine a collection for Fumadocs.\n\n```ts\nimport { defineDocs } from 'fumadocs-mdx/config';\n\nexport const docs = defineDocs({\n  dir: '/my/content/dir',\n  docs: {\n    // optional, options of `doc` collection\n  },\n  meta: {\n    // optional, options of `meta` collection\n  },\n});\n```\n\n### `dir`\n\nInstead of per collection, you should customise `dir` from `defineDocs`:\n\n```ts\nimport { defineDocs } from 'fumadocs-mdx/config';\n\nexport const docs = defineDocs({\n  dir: 'my/content/dir',\n});\n```\n\n### `schema`\n\nYou can extend the default Zod schema of `docs` and `meta`.\n\n```ts\nimport { frontmatterSchema, metaSchema, defineDocs } from 'fumadocs-mdx/config';\nimport { z } from 'zod';\n\nexport const docs = defineDocs({\n  docs: {\n    schema: frontmatterSchema.extend({\n      index: z.boolean().default(false),\n    }),\n  },\n  meta: {\n    schema: metaSchema.extend({\n      // other props\n    }),\n  },\n});\n```\n"}, {"info":{"path":"mdx/global.mdx","absolutePath":"/app/apps/docs/content/docs/mdx/global.mdx"},"data":{"title":"Global Options","description":"Customise Fumadocs MDX","index":false},"content":"\n\n## Global Options\n\nShared options of Fumadocs MDX.\n\n```ts title=\"source.config.ts\"\nimport { defineConfig } from 'fumadocs-mdx/config';\n\nexport default defineConfig({\n  // global options\n});\n```\n\n<AutoTypeTable path=\"./content/docs/mdx/props.ts\" name=\"GlobalConfig\" />\n\n### MDX Options\n\nCustomise the MDX processor options for MDX files.\n\n```ts title=\"source.config.ts\"\nimport { defineConfig } from 'fumadocs-mdx/config';\nimport rehypeKatex from 'rehype-katex';\nimport remarkMath from 'remark-math';\n\nexport default defineConfig({\n  mdxOptions: {\n    remarkPlugins: [remarkMath],\n    // When order matters\n    rehypePlugins: (v) => [rehypeKatex, ...v],\n  },\n});\n```\n\nSome default options are applied by Fumadocs MDX, see [Extended MDX Options](/docs/mdx/mdx#extended) for available options.\n"}, {"info":{"path":"mdx/include.mdx","absolutePath":"/app/apps/docs/content/docs/mdx/include.mdx"},"data":{"title":"Include","description":"Reuse content from other files.","index":false},"content":"\n\n## Usage\n\n### Markdown\n\nSpecify the target Markdown file path in `<include>` tag (relative to the Markdown file itself).\n\n```mdx title=\"page.mdx\"\n<include>./another.mdx</include>\n```\n\nThis will display the content from target file (e.g. `another.mdx`).\n\n### CodeBlock\n\nFor other types of files, it will become a codeblock:\n\n```mdx title=\"page.mdx\"\n<include>./script.ts</include>\n\n<include lang=\"tsx\" meta='title=\"lib.ts\"'>\n  ./script.ts\n</include>\n```\n\n### `cwd`\n\nResolve relative paths from cwd instead of Markdown file:\n\n```mdx\n<include cwd lang=\"tsx\" meta='title=\"lib.ts\"'>\n  ./script.ts\n</include>\n```\n"}, {"info":{"path":"mdx/index.mdx","absolutePath":"/app/apps/docs/content/docs/mdx/index.mdx"},"data":{"title":"Introduction","description":"Learn how to use Fumadocs MDX in your documentation","icon":"Album","index":false},"content":"\n\n## Introduction\n\nFumadocs MDX is the official content source of Fumadocs.\n\nIt provides the tool for Next.js to transform content into type-safe data, similar to Contentlayer and Content Collections.\nThis library isn't Fumadocs-only, you can use it to handle blog and other contents.\n\n## Getting Started\n\nSetup Fumadocs MDX for your Fumadocs application.\n\n```package-install\nfumadocs-mdx @types/mdx\n```\n\nAdd the plugin to your `next.config.mjs` file.\n\n```js\nimport { createMDX } from 'fumadocs-mdx/next';\n\nconst withMDX = createMDX();\n\n/** @type {import('next').NextConfig} */\nconst config = {\n  reactStrictMode: true,\n};\n\nexport default withMDX(config);\n```\n\n<Callout title=\"ESM Only\" type='warn' className=\"mt-4\">\n\n    The Next.js config must be a `.mjs` file since Fumadocs is ESM-only.\n\n</Callout>\n\n### Defining Collections\n\n**Collection** refers to a collection containing a certain type of files, there's two types of collections:\n\n- `doc`: Markdown/MDX documents\n- `meta`: JSON files\n\nFor example, a `doc` collection will include only the `.md` and `.mdx` files:\n\n<Files>\n  <Folder name=\"folder\" defaultOpen>\n    <File name=\"ui.md\" />\n  </Folder>\n  <File name=\"hello.md\" />\n  <File name=\"index.mdx\" />\n  <File\n    name=\"meta.json\"\n    className=\"opacity-50 cursor-not-allowed\"\n    aria-disabled\n  />\n</Files>\n\nFumadocs MDX transforms collections into arrays of type-safe data, accessible in your Next.js app.\n\nYou can define collections by creating a `source.config.ts` file.\n\n<Tabs items={[\"doc\", \"meta\"]}>\n\n    <Tab value='doc'>\n\n        Markdown & MDX content will be compiled into a React Server Component, with other useful properties like **Table of Contents**.\n\n```ts title=\"source.config.ts\"\nimport { defineCollections } from 'fumadocs-mdx/config';\n\nexport const test = defineCollections({\n  type: 'doc',\n  dir: 'content/docs',\n});\n```\n\n    </Tab>\n\n    <Tab value='meta'>\n\n        JSON data will be transformed with `JSON.parse` into an array of objects.\n\n```ts title=\"source.config.ts\"\nimport { defineCollections } from 'fumadocs-mdx/config';\n\nexport const test = defineCollections({\n  type: 'meta',\n  dir: 'content/docs',\n});\n```\n\n    </Tab>\n\n</Tabs>\n\nFor Fumadocs to work, you can define a `docs` collection:\n\n```ts title=\"source.config.ts\"\nimport { defineDocs } from 'fumadocs-mdx/config';\n\nexport const docs = defineDocs({\n  dir: 'content/docs',\n  docs: {\n    // options for `doc` collection\n  },\n  meta: {\n    // options for `meta` collection\n  },\n});\n```\n\nThe `docs` collection combines a `meta` and `doc` collection, which scans through all Markdown, MDX and JSON files under your `content/docs` directory.\nThey are needed for Fumadocs to work.\n\n### Output Folder\n\nOnce you run `next dev` or `next build`, it generates a `.source` folder in root directory.\n\nThe folder contains all output data and its types, you should add it to `.gitignore`.\n\nThe `fumadocs-mdx` command generates types for `.source` folder without running Next.js, you can add it as a post install script to ensure types are always generated when initializing the project.\n\n```json title=\"package.json\"\n{\n  \"scripts\": {\n    \"postinstall\": \"fumadocs-mdx\"\n  }\n}\n```\n\n### Accessing Collections\n\n**Collection Output** is the generated data of a collection, it can have a different type/shape depending on the collection type and schema.\n\nYou can access the collection output from `.source` folder with its original name:\n\n```ts\n// source.config.ts\nimport { defineDocs } from 'fumadocs-mdx/config';\n\nexport const docs = defineDocs({\n  dir: 'content/docs',\n  docs: {\n    // options for `doc` collection\n  },\n  meta: {\n    // options for `meta` collection\n  },\n});\n\n// lib/source.ts\nimport { docs } from '@/.source';\n\nconsole.log(docs);\n```\n\nIn this guide, We will import the `.source` folder with `@/.source`, you can also change it to your own import alias.\nMake sure you are importing from `.source` rather than `source.config.ts`.\n\nTo integrate with Fumadocs, you can use the `toFumadocsSource()` function of `docs` collection output.\n\n```ts title=\"lib/source.ts\"\nimport { docs } from '@/.source';\nimport { loader } from 'fumadocs-core/source';\n\nexport const source = loader({\n  baseUrl: '/docs',\n  source: docs.toFumadocsSource(),\n});\n```\n\nAnd for other types of collections, the output may different, you can also log them to see the differences.\n\n### Start Server\n\n```bash\nnext dev\n```\n\nA `.source` folder should be created. You can log and see if it is loaded correctly.\n\n### Usage\n\nGenerally, you'll interact with Fumadocs MDX through the [Source](/docs/headless/source-api#output) object (output of `loader`).\n\n```tsx\nimport { source } from '@/lib/source';\n\nconst page = source.getPage(['slugs']);\n\nif (page) {\n  // access page data [!code highlight]\n  console.log(page.data);\n\n  // frontmatter properties are also inside [!code highlight]\n  console.log(page.data.title);\n}\n```\n\nTo render the page, use `page.data.body` as a component.\n\n```tsx\nimport { getMDXComponents } from '@/mdx-components';\n\nconst MDX = page.data.body;\n\n// set your MDX components with `components` prop\nreturn <MDX components={getMDXComponents()} />;\n```\n\n## FAQ\n\n### Built-in Properties\n\nThese properties are exported from MDX files by default.\n\n| Property         | Description                                     |\n| ---------------- | ----------------------------------------------- |\n| `frontmatter`    | Frontmatter                                     |\n| `toc`            | Table of Contents                               |\n| `structuredData` | Structured Data, useful for implementing search |\n\n### Customise Frontmatter\n\nUse the [`schema`](/docs/mdx/collections#schema-1) option to pass a validation schema to validate frontmatter and define its output properties.\n\n### Syntax Highlighting\n\nUse [`rehypeCodeOptions`](/docs/mdx/mdx#rehype-plugins) on global or collection-level config.\n\n### MDX Plugins\n\nFor other customisation needs, see [MDX Options](/docs/mdx/mdx).\n\n### Multiple Collections\n\nYou can define more collections, see [Collections](/docs/mdx/collections) for available options.\n\n```ts title=\"source.config.ts\"\nimport { defineDocs } from 'fumadocs-mdx/config';\n\nexport const docs = defineDocs({\n  dir: 'content/docs',\n});\n\nexport const blogPosts = defineDocs({\n  dir: 'content/blog',\n});\n```\n\nAnd use `loader` for a simple way to interact with collection output.\n\n```ts title=\"lib/source.ts\"\nimport { docs, blogPosts } from '@/.source';\nimport { loader } from 'fumadocs-core/source';\n\nexport const source = loader({\n  baseUrl: '/docs',\n  source: docs.toFumadocsSource(),\n});\n\nexport const blog = loader({\n  baseUrl: '/blog',\n  source: blogPosts.toFumadocsSource(),\n});\n```\n"}, {"info":{"path":"mdx/last-modified.mdx","absolutePath":"/app/apps/docs/content/docs/mdx/last-modified.mdx"},"data":{"title":"Last Modified Time","description":"Output the last modified time of a document","index":false},"content":"\n\n## Usage\n\nThis feature is not enabled by default, you can enable this from config file. Notice that it only supports Git as version control.\nPlease ensure you have Git installed on your machine, and **the repository is not shallow cloned**, as it relies on your local Git history.\n\n```ts title=\"source.config.ts\"\nimport { defineConfig } from 'fumadocs-mdx/config';\n\nexport default defineConfig({\n  lastModifiedTime: 'git', // [!code highlight]\n});\n```\n\n### Access the Property\n\nAfter doing this, a `lastModified` number will be exported for each document, you can convert it to a JavaScript Date object.\n\n```ts\nimport { source } from '@/lib/source';\n\nconst page = source.getPage(['...']);\n\nconsole.log(new Date(page.data.lastModified));\n// or with async mode:\nconst { lastModified } = await page.data.load();\nconsole.log(new Date(lastModified));\n```\n"}, {"info":{"path":"mdx/mdx.mdx","absolutePath":"/app/apps/docs/content/docs/mdx/mdx.mdx"},"data":{"title":"MDX Options","description":"Configure MDX processor for Fumadocs MDX","index":false},"content":"\n\n## Customising MDX Processor\n\nFumadocs MDX uses [MDX Compiler](https://mdxjs.com/packages/mdx) to compile MDX files into JavaScript files.\n\nYou can customise it on [Global Config](/docs/mdx/global#mdx-options) or [Collection Config](/docs/mdx/collections#mdxoptions).\n\n## Extended MDX Options [#extended]\n\nFumadocs MDX will apply some default MDX options, to make features like **syntax highlighting** work out of the box.\n\nTo allow overriding the defaults, Fumadocs MDX's `mdxOptions` option accepts **Extended MDX Options** on top of [`ProcessorOptions`](https://mdxjs.com/packages/mdx/#processoroptions).\nYou can see the additional options below:\n\n### Remark Plugins\n\nThese plugins are applied by default:\n\n- [Remark Image](/docs/headless/mdx/remark-image) - Handle images\n- [Remark Heading](/docs/headless/mdx/headings) - Extract table of contents\n- [Remark Structure](/docs/headless/mdx/structure) - Generate search indexes\n- Remark Exports - Exports the output generated by remark plugins above\n\nYou can add other remark plugins with:\n\n```ts tab=\"Global Config\"\nimport { defineConfig } from 'fumadocs-mdx/config';\nimport { myPlugin } from './remark-plugin';\n\nexport default defineConfig({\n  mdxOptions: {\n    remarkPlugins: [myPlugin],\n    // You can also pass a function to control the order of remark plugins.\n    remarkPlugins: (v) => [myPlugin, ...v],\n  },\n});\n```\n\n```ts tab=\"Collection Config\"\nimport { defineCollections, getDefaultMDXOptions } from 'fumadocs-mdx/config';\nimport { myPlugin } from './remark-plugin';\n\nexport const blog = defineCollections({\n  type: 'doc',\n  mdxOptions: getDefaultMDXOptions({\n    remarkPlugins: [myPlugin],\n    // You can also pass a function to control the order of remark plugins.\n    remarkPlugins: (v) => [myPlugin, ...v],\n  }),\n});\n```\n\n### Rehype Plugins\n\nThese plugins are applied by default:\n\n- [Rehype Code](/docs/headless/mdx/rehype-code) - Syntax highlighting\n\nSame as remark plugins, you can pass an array or a function to add other rehype plugins.\n\n```ts tab=\"Global Config\"\nimport { defineConfig } from 'fumadocs-mdx/config';\nimport { myPlugin } from './rehype-plugin';\n\nexport default defineConfig({\n  mdxOptions: {\n    rehypePlugins: (v) => [myPlugin, ...v],\n  },\n});\n```\n\n```ts tab=\"Collection Config\"\nimport { defineCollections, getDefaultMDXOptions } from 'fumadocs-mdx/config';\nimport { myPlugin } from './rehype-plugin';\n\nexport const blog = defineCollections({\n  type: 'doc',\n  mdxOptions: getDefaultMDXOptions({\n    rehypePlugins: (v) => [myPlugin, ...v],\n  }),\n});\n```\n\n### Customise Built-in Plugins\n\nCustomise the options of built-in plugins like:\n\n```ts tab=\"Global Config\"\nimport { defineConfig } from 'fumadocs-mdx/config';\n\nexport default defineConfig({\n  mdxOptions: {\n    rehypeCodeOptions: {\n      // options\n    },\n    remarkImageOptions: {\n      // options\n    },\n    remarkHeadingOptions: {\n      // options\n    },\n  },\n});\n```\n\n```ts tab=\"Collection Config\"\nimport { defineCollections, getDefaultMDXOptions } from 'fumadocs-mdx/config';\n\nexport const blog = defineCollections({\n  type: 'doc',\n  mdxOptions: getDefaultMDXOptions({\n    rehypeCodeOptions: {\n      // options\n    },\n    remarkImageOptions: {\n      // options\n    },\n    remarkHeadingOptions: {\n      // options\n    },\n  }),\n});\n```\n\n### Export Properties from `vfile.data`\n\nSome remark plugins store their output in `vfile.data` (an compile-time memory) which cannot be accessed from your code.\nFumadocs MDX applies a remark plugin that turns `vfile.data` properties into ESM exports, so that you can access these properties when importing the MDX file.\n\nYou can define additional properties to be exported.\n\n```ts tab=\"Global Config\"\nimport { defineConfig } from 'fumadocs-mdx/config';\n\nexport default defineConfig({\n  mdxOptions: {\n    valueToExport: ['dataName'],\n  },\n});\n```\n\n```ts tab=\"Collection Config\"\nimport { defineCollections, getDefaultMDXOptions } from 'fumadocs-mdx/config';\n\nexport const blog = defineCollections({\n  type: 'doc',\n  mdxOptions: getDefaultMDXOptions({\n    valueToExport: ['dataName'],\n  }),\n});\n```\n\nBy default, it includes:\n\n- `toc` for the Remark Heading plugin\n- `structuredData` for the Remark Structure Plugin\n- `frontmatter` for the frontmatter of MDX (using `gray-matter`)\n"}, {"info":{"path":"mdx/page.mdx","absolutePath":"/app/apps/docs/content/docs/mdx/page.mdx"},"data":{"title":"Use as Page","description":"Use MDX file as a page","index":false},"content":"\n\n## Setup\n\nYou can use `page.mdx` instead of `page.tsx` for creating a new page under the app directory.\n\nHowever, it doesn't have MDX components by default so you have to provide them:\n\n```tsx title=\"mdx-components.tsx\"\nimport defaultMdxComponents from 'fumadocs-ui/mdx';\nimport type { MDXComponents } from 'mdx/types';\n\nexport function getMDXComponents(components?: MDXComponents): MDXComponents {\n  return {\n    ...defaultMdxComponents, // for Fumadocs UI\n    ...components,\n  };\n}\n\n// export a `useMDXComponents()` that returns MDX components\nexport const useMDXComponents = getMDXComponents; // [!code ++]\n```\n\n```ts title=\"source.config.ts\"\nimport { defineConfig } from 'fumadocs-mdx/config';\n\nexport default defineConfig({\n  mdxOptions: {\n    // Path to import your `mdx-components.tsx` above. [!code ++]\n    providerImportSource: '@/mdx-components',\n  },\n});\n```\n\n### Usage\n\n```mdx title=\"app/test/page.mdx\"\n{/* this will enable Typography styles of Fumadocs UI */}\nexport { withArticle as default } from 'fumadocs-ui/page';\n\n## Hello World\n```\n"}, {"info":{"path":"mdx/performance.mdx","absolutePath":"/app/apps/docs/content/docs/mdx/performance.mdx"},"data":{"title":"Performance","description":"The performance of Fumadocs MDX","icon":"Rocket","index":false},"content":"\n\n## Overview\n\nFumadocs MDX is a bundler plugin, in other words, it has a higher performance bottleneck.\nWith bundlers like Webpack and Turbopack, it is enough for large docs sites with nearly 500+ MDX files, which is sufficient for almost all use cases.\n\nSince Fumadocs MDX works with your bundler, you can import any files including client components in your MDX files.\nThis allows a high flexibility and ensures everything is optimized by default.\n\n### Image Optimization\n\nFumadocs MDX resolves images into static imports with [Remark Image](/docs/headless/mdx/remark-image).\nTherefore, your images will be optimized automatically by the Next.js Image API.\n\n```mdx\n![Hello](./hello.png)\n\nor in public folder\n\n![Hello](/hello.png)\n```\n\nYields:\n\n```mdx\nimport HelloImage from './hello.png';\n\n<img alt=\"Hello\" src={HelloImage} />\n```\n\n![Banner](/banner.png)\n\n## Caveats\n\nAlthough Fumadocs MDX can handle nearly 500+ files, it could be slow and inefficient.\nA huge amount of MDX files can cause an extremely high memory usage during build and development mode.\n\nThis is because of:\n\n- Bundlers do a lot of work under the hood to bundle MDX and JavaScript files and optimize performance.\n- Bundlers are not supposed to compile hundreds of MDX files.\n\n### Solutions\n\nThe main solution is to make the compilation on-demand, such that content is only loaded when it's being requested.\n\n#### Remote Source\n\nRemote sources don't need to pre-compile MDX files, it can compile them on-demand with SSG which can **highly increase your build speed.**\nHowever, you cannot use import in MDX files anymore.\n\nSee [Custom Source](/docs/headless/custom-source) for configuring remote sources.\n\n#### Async Mode\n\nSee [Async Mode](/docs/mdx/async).\n"}, {"info":{"path":"mdx/plugin.mdx","absolutePath":"/app/apps/docs/content/docs/mdx/plugin.mdx"},"data":{"title":"Next.js Loader","description":"Customise the Next.js loader","index":false},"content":"\n\n## Plugin Options\n\nFumadocs MDX offers loaders and a Fumadocs [Source API](/docs/headless/source-api) adapter to integrate with Fumadocs.\nYou can configure the plugin by passing options to `createMDX` in `next.config.mjs`.\n\n### Config Path\n\nCustomise the path of config file.\n\n```ts\nimport { createMDX } from 'fumadocs-mdx/next';\n\nconst withMDX = createMDX({\n  configPath: './my-config.ts',\n});\n```\n\n### Development Server\n\nWhen running in development mode (`next dev`), a file watcher will be started to watch for changes.\nIt automatically re-generates the index file in `.source` folder, ensuring Next.js hot reload is working properly.\n"}, {"info":{"path":"openapi/events.mdx","absolutePath":"/app/apps/docs/content/docs/openapi/events.mdx"},"data":{"title":"New special event added","description":"Publish details of a new or updated event.","full":true,"_openapi":{"toc":[],"structuredData":{"headings":[],"contents":[]}},"index":false},"content":"\n\n{/* This file was generated by Fumadocs. Do not edit this file directly. Any changes should be made by running the generation command again. */}\n\n<APIPage document={\"museum.yaml\"} operations={[]} webhooks={[{\"name\":\"publishNewEvent\",\"method\":\"post\"}]} hasHead={false} />"}, {"info":{"path":"openapi/index.mdx","absolutePath":"/app/apps/docs/content/docs/openapi/index.mdx"},"data":{"title":"Find Pet by ID","description":"Returns a single pet from the store.","full":true,"_openapi":{"method":"GET","route":"/pet/{petId}","toc":[],"structuredData":{"headings":[],"contents":[{"content":"Returns a single pet from the store."}]}},"index":false},"content":"\n\n{/* This file was generated by Fumadocs. Do not edit this file directly. Any changes should be made by running the generation command again. */}\n\n<APIPage\n  document={'https://raw.githubusercontent.com/readmeio/oas-examples/refs/heads/main/3.0/json/petstore.json'}\n  operations={[{ path: '/pet/{petId}', method: 'get' }]}\n  webhooks={[]}\n  hasHead={false}\n/>\n"}, {"info":{"path":"ui/comparisons.mdx","absolutePath":"/app/apps/docs/content/docs/ui/comparisons.mdx"},"data":{"title":"Comparisons","description":"How is Fumadocs different from other existing frameworks?","icon":"GitCompareArrows","index":false},"content":"\n\n## Nextra\n\nFumadocs is highly inspired by Nextra. For example, the Routing Conventions. That is why\n`meta.json` also exists in Fumadocs.\n\nNextra is more opinionated than Fumadocs. Fumadocs is accelerated by App Router. As a result, It provides many server-side functions, and you have to\nconfigure things manually compared to simply editing a configuration file.\n\nFumadocs works great if you want more control over everything, such as\nadding it to an existing codebase or implementing advanced routing.\n\n### Feature Table\n\n| Feature             | Fumadocs     | Nextra                    |\n| ------------------- | ------------ | ------------------------- |\n| Static Generation   | Yes          | Yes                       |\n| Cached              | Yes          | Yes                       |\n| Light/Dark Mode     | Yes          | Yes                       |\n| Syntax Highlighting | Yes          | Yes                       |\n| Table of Contents   | Yes          | Yes                       |\n| Full-text Search    | Yes          | Yes                       |\n| i18n                | Yes          | Yes                       |\n| Last Git Edit Time  | Yes          | Yes                       |\n| Page Icons          | Yes          | Yes, via `_meta.js` files |\n| RSC                 | Yes          | Yes                       |\n| Remote Source       | Yes          | Yes                       |\n| SEO                 | Via Metadata | Yes                       |\n| Built-in Components | Yes          | Yes                       |\n| RTL Layout          | Yes          | Yes                       |\n\n### Additional Features\n\nFeatures supported via 3rd party libraries like [TypeDoc](https://typedoc.org) will not be listed here.\n\n| Feature                    | Fumadocs | Nextra |\n| -------------------------- | -------- | ------ |\n| OpenAPI Integration        | Yes      | No     |\n| TypeScript Docs Generation | Yes      | No     |\n| TypeScript Twoslash        | Yes      | Yes    |\n\n## Mintlify\n\nMintlify is a documentation service, as compared to Fumadocs, it offers a free tier but isn't completely free and open source.\n\nFumadocs is not as powerful as Mintlify, for example, the OpenAPI integration of Mintlify.\nAs the creator of Fumadocs, I wouldn't recommend switching to Fumadocs from Mintlify if you're satisfied with the current way you build docs.\nHowever, I believe Fumadocs is a suitable tool for all Next.js developers who want to have elegant docs.\n\n## Docusaurus\n\nDocusaurus is a powerful framework based on React.js. It offers many cool\nfeatures with plugins and custom themes.\n\n### Better DX\n\nSince Fumadocs is built on the top of Next.js, you'll have to start the Next.js dev\nserver every time to review changes, and initial boilerplate code is relatively more\ncompared to Docusaurus.\n\nFor a simple docs, Docusaurus might be a better choice if you don't need any Next.js specific functionality.\n\nHowever, when you want to use Next.js, or seek extra customizability like tuning default UI components, Fumadocs could be a better choice.\n\n### Plugins\n\nYou can easily achieve many things with plugins, their ecosystem is indeed larger and maintained by many contributors.\n\nIn comparison, the flexibility of Fumadocs allows you to implement them on your own, it may take longer to tune it to your satisfaction.\n"}, {"info":{"path":"ui/customisation.mdx","absolutePath":"/app/apps/docs/content/docs/ui/customisation.mdx"},"data":{"title":"Overview","description":"An overview of Fumadocs UI","index":false},"content":"\n\n## Architecture\n\n<UiOverview />\n\n|               |                                                         |\n| ------------- | ------------------------------------------------------- |\n| **Sidebar**   | Display site title and navigation elements.             |\n| **Page Tree** | Passed by you, mainly rendered as the items of sidebar. |\n| **Docs Page** | All content of the page.                                |\n| **TOC**       | Navigation within the article.                          |\n\n## Customisation\n\n### Layouts\n\nYou can use the exposed options of different layouts:\n\n<Cards>\n  <Card title=\"Docs Layout\" href=\"/docs/ui/layouts/docs\">\n    Layout for docs\n  </Card>\n  <Card title=\"Docs Page\" href=\"/docs/ui/layouts/page\">\n    Layout for docs content\n  </Card>\n  <Card title=\"Notebook Layout\" href=\"/docs/ui/layouts/notebook\">\n    A more compact version of Docs Layout\n  </Card>\n  <Card title=\"Home Layout\" href=\"/docs/ui/layouts/home-layout\">\n    Layout for other pages\n  </Card>\n</Cards>\n\n### Components\n\nFumadocs UI also offers styled components for interactive examples to enhance your docs, you can customise them with exposed props like `style` and `className`.\n\nSee [Components](/docs/ui/components).\n\n### Design System\n\nSince the design system is built on Tailwind CSS, you can customise it [with CSS Variables](/docs/ui/theme#colors).\n\n### CLI\n\nFumadocs CLI is a tool that installs components to your codebase, similar to Shadcn UI.\n\n```package-install\nnpx @fumadocs/cli\n```\n\nUse it to install Fumadocs UI components:\n\n```package-install\nnpx @fumadocs/cli add\n```\n\nOr customise layouts:\n\n```package-install\nnpx @fumadocs/cli customise\n```\n"}, {"info":{"path":"ui/index.mdx","absolutePath":"/app/apps/docs/content/docs/ui/index.mdx"},"data":{"title":"Quick Start","description":"Getting Started with Fumadocs","icon":"Album","index":false},"content":"\n\n## Introduction\n\nFumadocs <span className='text-fd-muted-foreground text-sm'>(Foo-ma docs)</span> is a **documentation framework** based on Next.js, designed to be fast, flexible,\nand composes seamlessly into Next.js App Router.\n\nFumadocs has different parts:\n\n<Cards>\n\n<Card icon={<CpuIcon className=\"text-purple-300\" />} title='Fumadocs Core'>\n\nHandles most of the logic, including document search, content source adapters, and Markdown extensions.\n\n</Card>\n\n<Card icon={<PanelsTopLeft className=\"text-blue-300\" />} title='Fumadocs UI'>\n\nThe default theme of Fumadocs offers a beautiful look for documentation sites and interactive components.\n\n</Card>\n\n<Card icon={<Database />} title='Content Source'>\n\nThe source of your content, can be a CMS or local data layers like [Fumadocs MDX](/docs/mdx) (the official content source).\n\n</Card>\n\n<Card icon={<Terminal />} title='Fumadocs CLI'>\n\nA command line tool to install UI components and automate things, useful for customizing layouts.\n\n</Card>\n\n</Cards>\n\n<Callout title=\"Want to learn more?\">\n  Read our in-depth [What is Fumadocs](/docs/ui/what-is-fumadocs) introduction.\n</Callout>\n\n### Terminology\n\n**Markdown/MDX:** Markdown is a markup language for creating formatted text. Fumadocs supports Markdown and MDX (superset of Markdown) out-of-the-box.\n\nAlthough not required, some basic knowledge of Next.js App Router would be useful for further customisations.\n\n## Automatic Installation\n\nA minimum version of Node.js 18 required, note that Node.js 23.1 might have problems with Next.js production build.\n\n<Tabs groupId='package-manager' persist items={['npm', 'pnpm', 'yarn', 'bun']}>\n\n```bash tab=\"npm\"\nnpm create fumadocs-app\n```\n\n```bash tab=\"pnpm\"\npnpm create fumadocs-app\n```\n\n```bash tab=\"yarn\"\nyarn create fumadocs-app\n```\n\n```bash tab=\"bun\"\nbun create fumadocs-app\n```\n\n</Tabs>\n\nIt will ask you:\n\n- the React.js framework to use (the docs is only written for Next.js).\n- the content source to use.\n\nA new fumadocs app should be initialized. Now you can start hacking!\n\n<Callout title='From Existing Codebase?'>\n\n    You can follow the [Manual Installation](/docs/ui/manual-installation) guide to get started.\n\n</Callout>\n\n### Enjoy!\n\nCreate your first MDX file in the docs folder.\n\n```mdx title=\"content/docs/index.mdx\"\n---\ntitle: Hello World\n---\n\n## Yo what's up\n```\n\nRun the app in development mode and see http://localhost:3000/docs.\n\n```package-install\nnpm run dev\n```\n\n## Explore\n\nIn the project, you can see:\n\n- `lib/source.ts`: Code for content source adapter, [`loader()`](/docs/headless/source-api) provides the interface to access your content.\n- `app/layout.config.tsx`: Shared options for layouts, optional but preferred to keep.\n\n| Route                     | Description                                            |\n| ------------------------- | ------------------------------------------------------ |\n| `app/(home)`              | The route group for your landing page and other pages. |\n| `app/docs`                | The documentation layout and pages.                    |\n| `app/api/search/route.ts` | The Route Handler for search.                          |\n\n### Writing Content\n\nFor authoring docs, make sure to read:\n\n<Cards>\n  <Card href=\"/docs/ui/markdown\" title=\"Markdown\">\n    Fumadocs has some additional features for authoring content.\n  </Card>\n  <Card href=\"/docs/ui/navigation\" title=\"Navigation\">\n    Learn how to customise navigation links and sidebar items.\n  </Card>\n  <Card href=\"/docs/ui/page-conventions\" title=\"Routing\">\n    Learn how to organise content.\n  </Card>\n</Cards>\n\n### Content Source\n\nContent source handles all your content, like compiling Markdown files and validating frontmatter.\n\n<Tabs items={['Fumadocs MDX', 'Custom Source']}>\n\n    <Tab value='Fumadocs MDX'>\n\n        A `source.config.ts` config file has been included, you can customise different options like frontmatter schema.\n\n        Read the [Introduction](/docs/mdx) for further details.\n\n    </Tab>\n\n    <Tab value='Custom Source'>\n\n        Fumadocs is not Markdown-exclusive. For other sources like Sanity, you can build a [custom content source](/docs/headless/custom-source).\n\n    </Tab>\n\n</Tabs>\n\n### Customise UI\n\nSee [Customisation Guide](/docs/ui/customisation).\n\n## FAQ\n\nSome common questions you may encounter.\n\n<Accordions>\n    <Accordion id='change-base-url' title=\"How to change the base route of /docs?\">\n\nYou can change the base route of docs (e.g. from `/docs/page` to `/info/page`).\nSince Fumadocs uses Next.js App Router, you can simply rename the route:\n\n<Files>\n  <Folder name=\"app/docs\" defaultOpen className=\"opacity-50\" disabled>\n    <File name=\"layout.tsx\" />\n  </Folder>\n  <Folder name=\"app/info\" defaultOpen>\n    <File name=\"layout.tsx\" />\n  </Folder>\n</Files>\n\nAnd tell Fumadocs to use the new route in `source.ts`:\n\n```ts title=\"lib/source.ts\"\nimport { loader } from 'fumadocs-core/source';\n\nexport const source = loader({\n  baseUrl: '/info',\n  // other options\n});\n```\n\n    </Accordion>\n    <Accordion id='dynamic-route' title=\"It uses Dynamic Route, will it be poor in performance?\">\n\nNext.js turns dynamic route into static routes when `generateStaticParams` is configured.\nHence, it is as fast as static pages.\n\nYou can enable Static Exports on Next.js to get a static build output. (Notice that Route Handler doesn't work with static export, you have to configure static search)\n\n    </Accordion>\n    <Accordion id='custom-layout-docs-page' title='How to create a page in /docs without docs layout?'>\n\nSame as managing layouts in Next.js App Router, remove the original MDX file from content directory (`/content/docs`).\nThis ensures duplicated pages will not cause errors.\n\nNow, You can add the page to another route group, which isn't a descendant of docs layout.\n\nFor example, to replace `/docs/test`:\n\n<Files>\n  <File name=\"(home)/docs/test/page.tsx\" />\n  <Folder name=\"docs\">\n    <File name=\"layout.tsx\" />\n    <File name=\"[[...slug]]/page.tsx\" />\n  </Folder>\n</Files>\n\nFor `/docs`, you need to change the catch-all route to be non-optional:\n\n<Files>\n  <File name=\"(home)/docs/page.tsx\" />\n  <Folder name=\"docs\" defaultOpen>\n    <File name=\"layout.tsx\" />\n    <File name=\"[...slug]/page.tsx\" />\n  </Folder>\n</Files>\n\n    </Accordion>\n\n    <Accordion id='multi-versions' title=\"How to implement docs with multi-version?\">\n        Use a separate deployment for each version.\n\n        On Vercel, this can be done by creating another branch for a specific version on your GitHub repository.\n        To link to the sites of other versions, use the Links API or a custom navigation component.\n    </Accordion>\n\n    <Accordion id='multi-docs' title=\"How to implement multi-docs?\">\n        We recommend to use [Sidebar Tabs](/docs/ui/navigation/sidebar#sidebar-tabs).\n    </Accordion>\n\n</Accordions>\n\n## Learn More\n\nNew to here? Don't worry, we are welcome for your questions.\n\nIf you find anything confusing, please give your feedback on [Github Discussion](https://github.com/fuma-nama/fumadocs/discussions)!\n\n<Cards>\n  <Card\n    href=\"/docs/ui/static-export\"\n    title=\"Configure Static Export\"\n    description=\"Learn how to enable static export on your docs\"\n  />\n  <Card\n    href=\"/docs/ui/search\"\n    title=\"Customise Search\"\n    description=\"Learn how to customise document search\"\n  />\n  <Card\n    href=\"/docs/ui/theme\"\n    title=\"Theming\"\n    description=\"Add themes to Fumadocs UI\"\n  />\n  <Card\n    href=\"/docs/ui/components\"\n    title=\"Components\"\n    description=\"See all available components to enhance your docs\"\n  />\n</Cards>\n"}, {"info":{"path":"ui/internationalization.mdx","absolutePath":"/app/apps/docs/content/docs/ui/internationalization.mdx"},"data":{"title":"Internationalization","description":"Support multiple languages in your documentation","index":false},"content":"\n\n<Callout title='Before you get started'>\n\n    Fumadocs is not a full-powered i18n library, it manages only its own components and utilities.\n\n    You can use other libraries like [next-intl](https://github.com/amannn/next-intl) for the rest of your app.\n    Read the [Next.js Docs](https://nextjs.org/docs/app/building-your-application/routing/internationalization) to learn more about implementing I18n in Next.js.\n\n</Callout>\n\n## Manual Setup\n\nDefine the i18n configurations in a file, we will import it with `@/ilb/i18n` in this guide.\n\n\n\n> See [customisable options](/docs/headless/internationalization).\n\nPass it to the source loader.\n\n```ts title=\"lib/source.ts\"\nimport { i18n } from '@/lib/i18n';\nimport { loader } from 'fumadocs-core/source';\n\nexport const source = loader({\n  i18n, // [!code highlight]\n  // other options\n});\n```\n\nAnd update Fumadocs UI layout options.\n\n```tsx title=\"app/layout.config.tsx\"\nimport { i18n } from '@/lib/i18n';\nimport type { BaseLayoutProps } from 'fumadocs-ui/layouts/shared';\n\nexport function baseOptions(locale: string): BaseLayoutProps {\n  return {\n    i18n,\n    // different props based on `locale`\n  };\n}\n```\n\n### Middleware\n\nCreate a middleware that redirects users to appropriate locale.\n\n\n\n<Callout title=\"Custom Middleware\">\n\n    The default middleware is optional, you can instead use your own middleware or the one provided by i18n libraries.\n\n    When using custom middleware, make sure the locale is correctly passed to Fumadocs.\n    You may also want to [customise page URLs](/docs/headless/source-api#url) from `loader()`.\n\n</Callout>\n\n### Routing\n\nCreate a `/app/[lang]` folder, and move all files (e.g. `page.tsx`, `layout.tsx`) from `/app` to the folder.\n\nProvide UI translations and other config to `<RootProvider />`.\nNote that only English translations are provided by default.\n\n```tsx title=\"app/[lang]/layout.tsx\"\nimport { RootProvider } from 'fumadocs-ui/provider';\nimport type { Translations } from 'fumadocs-ui/i18n';\n\nconst cn: Partial<Translations> = {\n  search: 'Translated Content',\n  // other translations\n};\n\n// available languages that will be displayed on UI\n// make sure `locale` is consistent with your i18n config\nconst locales = [\n  {\n    name: 'English',\n    locale: 'en',\n  },\n  {\n    name: 'Chinese',\n    locale: 'cn',\n  },\n];\n\nexport default async function RootLayout({\n  params,\n  children,\n}: {\n  params: Promise<{ lang: string }>;\n  children: React.ReactNode;\n}) {\n  const lang = (await params).lang;\n\n  return (\n    <html lang={lang}>\n      <body>\n        <RootProvider\n          i18n={{\n            locale: lang,\n            // available languages\n            locales,\n            // translations for UI\n            translations: { cn }[lang],\n          }}\n        >\n          {children}\n        </RootProvider>\n      </body>\n    </html>\n  );\n}\n```\n\n### Pass Locale\n\nPass the locale to Fumadocs in your pages and layouts.\n\n```tsx title=\"/app/[lang]/(home)/layout.tsx\" tab=\"Home Layout\"\nimport type { ReactNode } from 'react';\nimport { HomeLayout } from 'fumadocs-ui/layouts/home';\nimport { baseOptions } from '@/app/layout.config';\n\nexport default async function Layout({\n  params,\n  children,\n}: {\n  params: Promise<{ lang: string }>;\n  children: ReactNode;\n}) {\n  const { lang } = await params;\n\n  return <HomeLayout {...baseOptions(lang)}>{children}</HomeLayout>;\n}\n```\n\n```tsx title=\"/app/[lang]/docs/layout.tsx\" tab=\"Docs Layout\"\nimport type { ReactNode } from 'react';\nimport { source } from '@/lib/source';\nimport { DocsLayout } from 'fumadocs-ui/layouts/docs';\nimport { baseOptions } from '@/app/layout.config';\n\nexport default async function Layout({\n  params,\n  children,\n}: {\n  params: Promise<{ lang: string }>;\n  children: ReactNode;\n}) {\n  const { lang } = await params;\n\n  return (\n    <DocsLayout {...baseOptions(lang)} tree={source.pageTree[lang]}>\n      {children}\n    </DocsLayout>\n  );\n}\n```\n\n```ts title=\"page.tsx\" tab=\"Docs Page\"\nimport { source } from '@/lib/source';\n\nexport default async function Page({\n  params,\n}: {\n  params: Promise<{ lang: string; slug?: string[] }>;\n}) {\n  const { slug, lang } = await params;\n  // get page\n  source.getPage(slug); // [!code --]\n  source.getPage(slug, lang); // [!code ++]\n\n  // get pages\n  source.getPages(); // [!code --]\n  source.getPages(lang); // [!code ++]\n}\n```\n\n<Callout title={<>Using another name for <code>lang</code> dynamic segment?</>}>\n\nIf you're using another name like `app/[locale]`, you also need to update `generateStaticParams()` in docs page:\n\n```tsx\nexport function generateStaticParams() {\n  return source.generateParams(); // [!code --]\n  return source.generateParams('slug', 'locale'); // [!code ++] new param name\n}\n```\n\n</Callout>\n\n### Search\n\nConfigure i18n on your search solution.\n\n- **Built-in Search (Orama):**\n  For [Supported Languages](https://docs.orama.com/open-source/supported-languages#officially-supported-languages), no further changes are needed.\n\n  Otherwise, additional config is required (e.g. Chinese & Japanese). See [Special Languages](/docs/headless/search/orama#special-languages).\n\n- **Cloud Solutions (e.g. Algolia):**\n  They usually have official support for multilingual.\n\n## Writing Documents\n\n<include>../../shared/page-conventions.i18n.mdx</include>\n\n## Navigation\n\nFumadocs only handles navigation for its own layouts (e.g. sidebar).\nFor other places, you can use the `useParams` hook to get the locale from url, and attend it to `href`.\n\n```tsx\nimport Link from 'next/link';\nimport { useParams } from 'next/navigation';\n\nconst { lang } = useParams();\n\nreturn <Link href={`/${lang}/another-page`}>This is a link</Link>;\n```\n\nIn addition, the [`fumadocs-core/dynamic-link`](/docs/headless/components/link#dynamic-hrefs) component supports dynamic hrefs, you can use it to attend the locale prefix.\nIt is useful for Markdown/MDX content.\n\n```mdx title=\"content.mdx\"\nimport { DynamicLink } from 'fumadocs-core/dynamic-link';\n\n<DynamicLink href=\"/[lang]/another-page\">This is a link</DynamicLink>\n```\n"}, {"info":{"path":"ui/manual-installation.mdx","absolutePath":"/app/apps/docs/content/docs/ui/manual-installation.mdx"},"data":{"title":"Manual Installation","description":"Add Fumadocs to existing projects.","index":false},"content":"\n\nBefore continuing, make sure:\n\n- Next.js 15 and Tailwind CSS 4 are configured.\n\n## Getting Started\n\n```package-install\nfumadocs-ui fumadocs-core\n```\n\n### 1. MDX Components\n\n\n\n### 2. Content Source\n\nFumadocs supports different content sources, including Fumadocs MDX and [Content Collections](/docs/headless/content-collections).\n\nFumadocs MDX is our official content source, you can configure it with:\n\n```package-install\nfumadocs-mdx @types/mdx\n```\n\n```js title=\"next.config.mjs\"\nimport { createMDX } from 'fumadocs-mdx/next';\n\nconst withMDX = createMDX();\n\n/** @type {import('next').NextConfig} */\nconst config = {\n  reactStrictMode: true,\n};\n\nexport default withMDX(config);\n```\n\n```ts title=\"source.config.ts\"\nimport { defineDocs } from 'fumadocs-mdx/config';\n\nexport const docs = defineDocs({\n  dir: 'content/docs',\n});\n```\n\nAdd a `postinstall` script to generate types:\n\n```json title=\"package.json\"\n{\n  \"scripts\": {\n    \"postinstall\": \"fumadocs-mdx\"\n  }\n}\n```\n\nFinally, to access your content:\n\n```ts title=\"lib/source.ts\"\nimport { docs } from '@/.source';\nimport { loader } from 'fumadocs-core/source';\n\nexport const source = loader({\n  baseUrl: '/docs',\n  source: docs.toFumadocsSource(),\n});\n```\n\n### 3. Root Layout\n\nWrap the entire application inside [Root Provider](/docs/ui/layouts/root-provider), and add required styles to `body`.\n\n```tsx\nimport { RootProvider } from 'fumadocs-ui/provider';\nimport type { ReactNode } from 'react';\n\nexport default function Layout({ children }: { children: ReactNode }) {\n  return (\n    <html lang=\"en\" suppressHydrationWarning>\n      <body\n        // you can use Tailwind CSS too\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n          minHeight: '100vh',\n        }}\n      >\n        <RootProvider>{children}</RootProvider>\n      </body>\n    </html>\n  );\n}\n```\n\n### 4. Styles\n\nAdd the following to `global.css`.\n\n```css title=\"Tailwind CSS\"\n@import 'tailwindcss';\n@import 'fumadocs-ui/css/neutral.css';\n@import 'fumadocs-ui/css/preset.css';\n```\n\n> It doesn't come with a default font, you may choose one from `next/font`.\n\n### 5. Layout\n\nCreate a `app/layout.config.tsx` file to put the shared options for our layouts.\n\n\n\nCreate a folder `/app/docs` for our docs, and give it a proper layout.\n\n\n\n> `pageTree` refers to Page Tree, it should be provided by your content source.\n\n### 6. Page\n\nCreate a catch-all route `/app/docs/[[...slug]]` for docs pages.\n\nIn the page, wrap your content in the [Page](/docs/ui/layouts/page) component.\n\n### 7. Search\n\nUse the default document search based on Orama.\n\n\nLearn more about [Document Search](/docs/headless/search).\n\n### 8. Done\n\nYou can start the dev server and create MDX files.\n\n```mdx title=\"content/docs/index.mdx\"\n---\ntitle: Hello World\n---\n\n## Introduction\n\nI love Anime.\n```\n\n## Deploying\n\nIt should work out-of-the-box with Vercel & Netlify.\n\n### Docker Deployment\n\nIf you want to deploy your Fumadocs app using Docker with **Fumadocs MDX configured**, make sure to add the `source.config.ts` file to the `WORKDIR` in the Dockerfile.\nThe following snippet is taken from the official [Next.js Dockerfile Example](https://github.com/vercel/next.js/blob/canary/examples/with-docker/Dockerfile):\n\n```zsh title=\"Dockerfile\"\nWORKDIR /app\n\n# Install dependencies based on the preferred package manager\nCOPY package.json yarn.lock* package-lock.json* pnpm-lock.yaml* .npmrc* source.config.ts ./\n```\n\nThis ensures Fumadocs MDX can access your configuration file during builds.\n"}, {"info":{"path":"ui/markdown.mdx","absolutePath":"/app/apps/docs/content/docs/ui/markdown.mdx"},"data":{"title":"Markdown","description":"How to write documents","index":false},"content":"\n\n## Introduction\n\nFumadocs provides many useful extensions to MDX, a markup language. Here is a brief introduction to the default MDX syntax of Fumadocs UI.\n\n> MDX is not the only supported format of Fumadocs. In fact, you can use any renderers such as `next-mdx-remote` or CMS.\n\n## MDX\n\nWe recommend MDX, a superset of Markdown with support of JSX syntax.\nIt allows you to import components, and use them right in the document, or even export values.\n\nSee:\n\n- [MDX Syntax](https://mdxjs.com/docs/what-is-mdx/#mdx-syntax).\n- GFM (GitHub Flavored Markdown) is also supported, see [GFM Specification](https://github.github.com/gfm).\n\n````mdx\n---\ntitle: This is a document\n---\n\nimport { Component } from './component';\n\n<Component name=\"Hello\" />\n\n# Heading\n\n## Heading\n\n### Heading\n\n#### Heading\n\nHello World, **Bold**, _Italic_, ~~Hidden~~\n\n```js\nconsole.log('Hello World');\n```\n\n1. First\n2. Second\n3. Third\n\n- Item 1\n- Item 2\n\n> Quote here\n\n![alt](/image.png)\n\n| Table | Description |\n| ----- | ----------- |\n| Hello | World       |\n````\n\n### Images\n\nImages are automatically optimized for `next/image`.\n\n```mdx\n![Image](/image.png)\n```\n\n### Auto Links\n\nInternal links use the `next/link` component to allow prefetching and avoid hard-reload.\n\nExternal links will get the default `rel=\"noreferrer noopener\" target=\"_blank\"` attributes for security.\n\n```mdx\n[My Link](https://github.github.com/gfm)\n\nThis also works: https://github.github.com/gfm.\n```\n\n### Cards\n\nUseful for adding links, it is included by default.\n\n```mdx\n<Cards>\n  <Card\n    href=\"https://nextjs.org/docs/app/building-your-application/data-fetching/fetching-caching-and-revalidating\"\n    title=\"Fetching, Caching, and Revalidating\"\n  >\n    Learn more about caching in Next.js\n  </Card>\n  <Card title=\"href is optional\">Learn more about `fetch` in Next.js.</Card>\n</Cards>\n```\n\n<Cards>\n  <Card\n    href=\"https://nextjs.org/docs/app/building-your-application/data-fetching/fetching-caching-and-revalidating\"\n    title=\"Fetching, Caching, and Revalidating\"\n  >\n    Learn more about caching in Next.js\n  </Card>\n  <Card title=\"href is optional\">Learn more about `fetch` in Next.js.</Card>\n</Cards>\n\n#### Icon\n\nYou can specify an icon to cards.\n\n```mdx\nimport { HomeIcon } from 'lucide-react';\n\n<Cards>\n  <Card icon={<HomeIcon />} href=\"/\" title=\"Home\">\n    Go back to home\n  </Card>\n</Cards>\n```\n\n<Cards>\n  <Card icon={<HomeIcon />} href=\"/\" title=\"Go back to home\">\n    The home page of Fumadocs.\n  </Card>\n</Cards>\n\n#### \"Further Reading\" Section\n\nYou can do something like:\n\n```tsx title=\"page.tsx\"\nimport { getPageTreePeers } from 'fumadocs-core/server';\nimport { source } from '@/lib/source';\n\n<Cards>\n  {getPageTreePeers(source.pageTree, '/docs/my-page').map((peer) => (\n    <Card key={peer.url} title={peer.name} href={peer.url}>\n      {peer.description}\n    </Card>\n  ))}\n</Cards>;\n```\n\nThis will show the other pages in the same folder as cards.\n\n<DocsCategory url=\"/docs/ui/navigation\" />\n\n### Callouts\n\nUseful for adding tips/warnings, it is included by default. You can specify the type of callout:\n\n- `info` (default)\n- `warn`\n- `error`\n\n```mdx\n<Callout>Hello World</Callout>\n\n<Callout title=\"Title\">Hello World</Callout>\n\n<Callout title=\"Title\" type=\"error\">\n  Hello World\n</Callout>\n```\n\n<Callout>Hello World</Callout>\n\n<Callout title=\"Title\">Hello World</Callout>\n\n<Callout title=\"Title\" type=\"error\">\n  Hello World\n</Callout>\n\n### Headings\n\nAn anchor is automatically applied to each heading, it sanitizes invalid characters like spaces. (e.g. `Hello World` to `hello-world`)\n\n```md\n# Hello `World`\n```\n\n#### TOC Settings\n\nThe table of contents (TOC) will be generated based on headings, you can also customise the effects of headings:\n\n```md\n# Heading [!toc]\n\nThis heading will be hidden from TOC.\n\n# Another Heading [toc]\n\nThis heading will **only** be visible in TOC, you can use it to add additional TOC items.\nLike headings rendered in a React component:\n\n<MyComp />\n```\n\n#### Custom Anchor\n\nYou can add `[#slug]` to customise heading anchors.\n\n```md\n# heading [#my-heading-id]\n```\n\nYou can also chain it with TOC settings like:\n\n```md\n# heading [toc] [#my-heading-id]\n```\n\nTo link people to a specific heading, add the heading id to hash fragment: `/page#my-heading-id`.\n\n### Codeblock\n\nSyntax Highlighting is supported by default using [Rehype Code](/docs/headless/mdx/rehype-code).\n\n````mdx\n```js\nconsole.log('Hello World');\n```\n````\n\nYou can add a title to the codeblock.\n\n````mdx\n```js title=\"My Title\"\nconsole.log('Hello World');\n```\n````\n\n#### Shiki Transformers\n\nWe support some of the [Shiki Transformers](https://shiki.style/packages/transformers), allowing you to highlight/style specific lines.\n\n````md\n```tsx\n// highlight a line\n<div>Hello World</div>  // [\\!code highlight]\n\n// highlight a word\n// [\\!code word:Fumadocs]\n<div>Fumadocs</div>\n\n// diff styles\nconsole.log('hewwo'); // [\\!code --]\nconsole.log('hello'); // [\\!code ++]\n```\n````\n\n```tsx\n// highlight a line\n<div>Hello World</div>  // [!code highlight]\n\n// highlight a word\n// [!code word:Fumadocs]\n<div>Fumadocs</div>\n\n// diff styles:\nconsole.log('hewwo'); // [!code --]\nconsole.log('hello'); // [!code ++]\n```\n\n#### Tab Groups\n\nYou can use code blocks with the `<Tab />` component.\n\n````mdx\nimport { Tab, Tabs } from 'fumadocs-ui/components/tabs';\n\n```ts tab=\"Tab 1\"\nconsole.log('A');\n```\n\n```ts tab=\"Tab 2\"\nconsole.log('B');\n```\n````\n\n> Note that you can add MDX components instead of importing them in MDX files.\n\n```ts tab=\"Tab 1\"\nconsole.log('A');\n```\n\n```ts tab=\"Tab 2\"\nconsole.log('B');\n```\n\n#### Using Typescript Twoslash\n\nWrite Typescript codeblocks with hover type information and detected types errors.\n\nNot enabled by default. See [Twoslash](/docs/ui/twoslash).\n\n### Include\n\n> This is only available on **Fumadocs MDX**.\n\nReference another Markdown/MDX or code example file.\nSpecify the target file path in `<include>` tag (relative to the MDX file itself).\n\n```mdx title=\"page.mdx\"\n<include>./another.mdx</include>\n```\n\nSee [Include](/docs/mdx/include).\n\n## Optional\n\nYou can see [a list of plugins](/docs/headless/mdx) provided by Fumadocs.\n\n### Math Equations\n\nWrite math equations with TeX.\n\n````md\n```math\nf(x) = x * e^{2 pi i \\xi x}\n```\n````\n\n```math\nf(x) = x * e^{2 pi i \\xi x}\n```\n\nTo enable, see [Math Integration](/docs/ui/math).\n\n### Package Install\n\nGenerate code blocks for installing packages via package managers (JS/Node.js).\n\n````md\n```package-install\nnpm i next -D\n```\n````\n\n```package-install\nnpm i next -D\n```\n\nTo enable, see [Remark Install](/docs/headless/mdx/install).\n"}, {"info":{"path":"ui/page-conventions.mdx","absolutePath":"/app/apps/docs/content/docs/ui/page-conventions.mdx"},"data":{"title":"Routing","description":"A shared convention for organizing your documents","index":false},"content":"\n\n<include>../headless/page-conventions.mdx</include>\n"}, {"info":{"path":"ui/search.mdx","absolutePath":"/app/apps/docs/content/docs/ui/search.mdx"},"data":{"title":"Search","description":"Implement document search in your docs","index":false},"content":"\n\nFumadocs UI provides a good-looking search UI for your docs, the search functionality is instead provided and documented on Fumadocs Core.\n\nSee [Document Search](/docs/headless/search).\n\n## Search UI\n\nOpen with <kbd>⌘</kbd> <kbd>K</kbd> or <kbd>Ctrl</kbd> <kbd>K</kbd>.\n\nWhen not specified, it uses the Default [`fetch` Search Client](/docs/headless/search/orama) powered by Orama.\n\n### Custom Links\n\nAdd custom link items to search dialog.\nThey are shown as fallbacks when the query is empty.\n\n```tsx title=\"app/layout.tsx\"\nimport { RootProvider } from 'fumadocs-ui/root-provider';\n\n<RootProvider\n  search={{\n    links: [\n      ['Home', '/'],\n      ['Docs', '/docs'],\n    ],\n  }}\n>\n  {children}\n</RootProvider>;\n```\n\n### Disable Search\n\nTo opt-out of document search, disable it from root provider.\n\n```tsx\nimport { RootProvider } from 'fumadocs-ui/root-provider';\n\n<RootProvider\n  search={{\n    enabled: false,\n  }}\n>\n  {children}\n</RootProvider>;\n```\n\n### Hot Keys\n\nCustomise the hot keys to trigger search dialog.\n\n```tsx\nimport { RootProvider } from 'fumadocs-ui/root-provider';\n\n<RootProvider\n  search={{\n    hotKey: [\n      {\n        display: 'K',\n        key: 'k', // key code, or a function determining whether the key is pressed\n      },\n    ],\n  }}\n>\n  {children}\n</RootProvider>;\n```\n\n### Tag Filter\n\nAdd UI to change filters.\nMake sure to configure [Tag Filter](/docs/headless/search/orama#tag-filter) on search server first.\n\n```tsx\nimport { RootProvider } from 'fumadocs-ui/root-provider';\n\n<RootProvider\n  search={{\n    options: {\n      defaultTag: 'value',\n      tags: [\n        {\n          name: 'Tag Name',\n          value: 'value',\n        },\n      ],\n    },\n  }}\n>\n  {children}\n</RootProvider>;\n```\n\n### Search Options\n\nPass options to the search client, like changing the API endpoint for Orama search server:\n\n```tsx\nimport { RootProvider } from 'fumadocs-ui/root-provider';\n\n<RootProvider\n  search={{\n    options: {\n      api: '/api/search/docs',\n    },\n  }}\n>\n  {children}\n</RootProvider>;\n```\n\n### Replace Search Dialog\n\nYou can replace the default Search Dialog with:\n\n```tsx title=\"components/search.tsx\"\n'use client';\nimport SearchDialog from 'fumadocs-ui/components/dialog/search-default';\nimport type { SharedProps } from 'fumadocs-ui/components/dialog/search';\n\nexport default function CustomDialog(props: SharedProps) {\n  // your own logic here\n  return <SearchDialog {...props} />;\n}\n```\n\nTo pass it to the Root Provider, you need a wrapper with `use client` directive.\n\n```tsx title=\"provider.tsx\"\n'use client';\nimport { RootProvider } from 'fumadocs-ui/provider';\nimport dynamic from 'next/dynamic';\nimport type { ReactNode } from 'react';\n\nconst SearchDialog = dynamic(() => import('@/components/search')); // lazy load\n\nexport function Provider({ children }: { children: ReactNode }) {\n  return (\n    <RootProvider\n      search={{\n        SearchDialog,\n      }}\n    >\n      {children}\n    </RootProvider>\n  );\n}\n```\n\nUse it instead of your previous Root Provider\n\n```tsx title=\"layout.tsx\"\nimport { Provider } from './provider';\nimport type { ReactNode } from 'react';\n\nexport default function Layout({ children }: { children: ReactNode }) {\n  return (\n    <html lang=\"en\">\n      <body>\n        <Provider>{children}</Provider>\n      </body>\n    </html>\n  );\n}\n```\n\n## Other Solutions\n\n### Algolia\n\nFor the setup guide, see [Integrate Algolia Search](/docs/headless/search/algolia).\n\nWhile generally we recommend building your own search with their client-side\nSDK, you can also plug the built-in dialog interface.\n\n```tsx title=\"components/search.tsx\"\n'use client';\nimport algo from 'algoliasearch/lite';\nimport type { SharedProps } from 'fumadocs-ui/components/dialog/search';\nimport SearchDialog from 'fumadocs-ui/components/dialog/search-algolia';\n\nconst client = algo('appId', 'apiKey');\nconst index = client.initIndex('indexName');\n\nexport default function CustomSearchDialog(props: SharedProps) {\n  return <SearchDialog index={index} {...props} />;\n}\n```\n\n1. Replace `appId`, `apiKey` and `indexName` with your desired values.\n\n2. [Replace the default search dialog](#replace-search-dialog) with your new component.\n\n<Callout title=\"Note\" className='mt-4'>\n\n    The built-in implementation doesn't use instant search (their official\n    javascript client).\n\n</Callout>\n\n#### Tag Filter\n\nSame as default search client, you can configure [Tag Filter](/docs/headless/search/algolia#tag-filter) on the dialog.\n\n```tsx title=\"components/search.tsx\"\nimport SearchDialog from 'fumadocs-ui/components/dialog/search-algolia';\n\n<SearchDialog\n  defaultTag=\"value\"\n  tags={[\n    {\n      name: 'Tag Name',\n      value: 'value',\n    },\n  ]}\n/>;\n```\n\n### Orama Cloud\n\nFor the setup guide, see [Integrate Orama Cloud](/docs/headless/search/orama-cloud).\n\n```tsx title=\"components/search.tsx\"\n'use client';\n\nimport { OramaClient } from '@oramacloud/client';\nimport type { SharedProps } from 'fumadocs-ui/components/dialog/search';\nimport SearchDialog from 'fumadocs-ui/components/dialog/search-orama';\n\nconst client = new OramaClient({\n  endpoint: 'endpoint',\n  api_key: 'apiKey',\n});\n\nexport default function CustomSearchDialog(props: SharedProps) {\n  return <SearchDialog {...props} client={client} showOrama />;\n}\n```\n\n1. Replace `endpoint`, `apiKey` with your desired values.\n2. [Replace the default search dialog](#replace-search-dialog) with your new component.\n\n### Community Integrations\n\nA list of integrations maintained by community.\n\n- [Trieve Search](/docs/headless/search/trieve)\n\n## Built-in UI\n\nIf you want to use the built-in search dialog UI instead of building your own,\nyou may use the `SearchDialog` component.\n\n```tsx\nimport {\n  SearchDialog,\n  type SharedProps,\n} from 'fumadocs-ui/components/dialog/search';\n\nexport default function CustomSearchDialog(props: SharedProps) {\n  return <SearchDialog {...props} />;\n}\n```\n\n<Callout type=\"warn\" title=\"Unstable\">\n  It is an internal API, might break during iterations\n</Callout>\n"}, {"info":{"path":"ui/static-export.mdx","absolutePath":"/app/apps/docs/content/docs/ui/static-export.mdx"},"data":{"title":"Static Export","description":"Enable static export with Fumadocs","index":false},"content":"\n\n## Overview\n\nFumadocs is fully compatible with Next.js static export, allowing you to export the app as a static HTML site without a Node.js server.\n\n```js title=\"next.config.mjs\"\n/**\n * @type {import('next').NextConfig}\n */\nconst nextConfig = {\n  output: 'export',\n};\n```\n\n## Search\n\n### Cloud Solutions\n\nSince the search functionality is powered by remote servers, static export works without configuration.\n\n### Built-in Search\n\nThe default search config of Orama Search uses route handlers, which is not supported by static export.\n\nInstead, you can build the search indexes statically following the [Orama Search](/docs/headless/search/orama#static-export) guide.\nAnd enable static mode on search client from Root Provider:\n\n```tsx title=\"app/layout.tsx\"\nimport { RootProvider } from 'fumadocs-ui/provider';\nimport type { ReactNode } from 'react';\n\nexport default function RootLayout({ children }: { children: ReactNode }) {\n  return (\n    <html lang=\"en\" suppressHydrationWarning>\n      <body>\n        <RootProvider\n          search={{\n            options: {\n              type: 'static', // [!code highlight]\n            },\n          }}\n        >\n          {children}\n        </RootProvider>\n      </body>\n    </html>\n  );\n}\n```\n\nThis allows the route handler to be statically cached into a single file, and search will be computed on browser instead.\n"}, {"info":{"path":"ui/theme.mdx","absolutePath":"/app/apps/docs/content/docs/ui/theme.mdx"},"data":{"title":"Themes","description":"Add Theme to Fumadocs UI","index":false},"content":"\n\n## Usage\n\nOnly Tailwind CSS v4 is supported, the preset will also include source to Fumadocs UI itself:\n\n```css title=\"Tailwind CSS\"\n@import 'tailwindcss';\n@import 'fumadocs-ui/css/neutral.css';\n@import 'fumadocs-ui/css/preset.css';\n```\n\n### Preflight Changes\n\nBy using the Tailwind CSS plugin, or the pre-built stylesheet, your default border, text and background\ncolors will be changed.\n\n### Light/Dark Modes\n\nFumadocs supports light/dark modes with [`next-themes`](https://github.com/pacocoursey/next-themes), it is included in Root Provider.\n\nSee [Root Provider](/docs/ui/layouts/root-provider#theme-provider) to learn more.\n\n### RTL Layout\n\nRTL (Right-to-left) layout is supported.\n\nTo enable RTL, set the `dir` prop to `rtl` in body and root provider (required for Radix UI).\n\n```tsx\nimport { RootProvider } from 'fumadocs-ui/provider';\nimport type { ReactNode } from 'react';\n\nexport default function RootLayout({ children }: { children: ReactNode }) {\n  return (\n    <html lang=\"en\" suppressHydrationWarning>\n      <body dir=\"rtl\">\n        <RootProvider dir=\"rtl\">{children}</RootProvider>\n      </body>\n    </html>\n  );\n}\n```\n\n### Layout Width\n\nCustomise the max width of docs layout with CSS Variables.\n\n```css\n:root {\n  --fd-layout-width: 1400px;\n}\n```\n\n<WidthTrigger />\n\n## Tailwind CSS Preset\n\nFumadocs UI adds its own colors, animations, and utilities with Tailwind CSS preset.\n\n### Colors\n\nIt comes with many themes out-of-the-box, you can pick one you prefer.\n\n```css\n@import 'fumadocs-ui/css/<theme>.css';\n@import 'fumadocs-ui/css/preset.css';\n```\n\n<Tabs items={['neutral', 'black', 'vitepress', 'dusk', 'catppuccin', 'ocean', 'purple']}>\n\n    <Tab value='neutral'>\n\n![Neutral](/themes/neutral.png)\n\n    </Tab>\n\n    <Tab value='black'>\n\n![Black](/themes/black.png)\n\n    </Tab>\n\n    <Tab value='vitepress'>\n\n![Vitepress](/themes/vitepress.png)\n\n    </Tab>\n\n    <Tab value='dusk'>\n\n![Dusk](/themes/dusk.png)\n\n    </Tab>\n\n    <Tab value='Catppuccin'>\n\n![Catppuccin](/themes/catppuccin.png)\n\n    </Tab>\n\n    <Tab value='ocean'>\n\n![Ocean](/themes/ocean.png)\n\n    </Tab>\n\n    <Tab value='purple'>\n\n![Purple](/themes/purple.png)\n\n    </Tab>\n\n</Tabs>\n\nThe design system was inspired by [Shadcn UI](https://ui.shadcn.com), you can also customize the colors using CSS variables.\n\n```css title=\"global.css\"\n:root {\n  --color-fd-background: hsl(0, 0%, 100%);\n}\n\n.dark {\n  --color-fd-background: hsl(0, 0%, 0%);\n}\n```\n\nFor Shadcn UI, you can use the `shadcn` preset instead.\nIt uses colors from your Shadcn UI theme.\n\n```css\n@import 'tailwindcss';\n@import 'fumadocs-ui/css/shadcn.css';\n@import 'fumadocs-ui/css/preset.css';\n```\n\n### Typography\n\nWe have a built-in plugin forked from [Tailwind CSS Typography](https://tailwindcss.com/docs/typography-plugin).\n\nThe plugin adds a `prose` class and variants to customise it.\n\n```tsx\n<div className=\"prose\">\n  <h1>Good Heading</h1>\n</div>\n```\n\n> The plugin works with and only with Fumadocs UI's MDX components, it may conflict with `@tailwindcss/typography`.\n> If you need to use `@tailwindcss/typography` over the default plugin, [set a class name option](https://github.com/tailwindlabs/tailwindcss-typography/blob/main/README.md#changing-the-default-class-name) to avoid conflicts.\n"}, {"info":{"path":"ui/what-is-fumadocs.mdx","absolutePath":"/app/apps/docs/content/docs/ui/what-is-fumadocs.mdx"},"data":{"title":"What is Fumadocs","description":"Introducing Fumadocs, a docs framework that you can break.","icon":"CircleHelp","index":false},"content":"\n\nFumadocs was created because I wanted a more customisable experience for building docs, to be a docs framework that is not opinionated, **a \"framework\" that you can break**.\n\n## Philosophy\n\n**Less Abstraction:** Fumadocs expects you to write code and cooperate with the rest of your software.\nWhile most frameworks are configured with a configuration file, they usually lack flexibility when you hope to tune its details.\nYou can’t control how they render the page nor the internal logic. Fumadocs shows you how the app works, instead of a single configuration file.\n\n**Next.js Fundamentals:** It gives you the utilities and a good-looking UI.\nYou are still using features of Next.js App Router, like **Static Site Generation**. There is nothing new for Next.js developers, so you can use it with confidence.\n\n**Opinionated on UI:** The only thing Fumadocs UI (the default theme) offers is **User Interface**. The UI is opinionated for bringing better mobile responsiveness and user experience.\nInstead, we use a much more flexible approach inspired by Shadcn UI — [Fumadocs CLI](/docs/cli), so we can iterate our design quick, and welcome for more feedback about the UI.\n\n## Why Fumadocs\n\nFumadocs is designed with flexibility in mind.\n\nYou can use `fumadocs-core` as a headless UI library and bring your own styles.\nFumadocs MDX is also a useful library to handle MDX content in Next.js. It also includes:\n\n- Many built-in components.\n- Typescript Twoslash, OpenAPI, and Math (KaTeX) integrations.\n- Fast and optimized by default, natively built on App Router.\n- Tight integration with Next.js, you can add it to an existing Next.js project easily.\n\nYou can read [Comparisons](/docs/ui/comparisons) if you're interested.\n\n### Documentation\n\nFumadocs focuses on **authoring experience**, it provides a beautiful theme and many docs automation tools.\n\nIt helps you to iterate your codebase faster while never leaving your docs behind.\nYou can take this site as an example of docs site built with Fumadocs.\n\n### Blog sites\n\nSince Next.js is already a powerful framework, most features can be implemented with **just Next.js**.\n\nFumadocs provides additional tooling for Next.js, including syntax highlighting, document search, and a default theme (Fumadocs UI).\nIt helps you to avoid reinventing the wheels.\n\n## When to use Fumadocs\n\nFor most of the web applications, vanilla React.js is no longer enough.\nNowadays, we also wish to have a blog, a showcase page, a FAQ page, etc. With a\nfancy UI that's breathtaking, in these cases, Fumadocs can help you build the\ndocs easier, with less boilerplate.\n\nFumadocs is maintained by Fuma and many contributors, with care on the maintainability of codebase.\nWhile we don't aim to offer every functionality people wanted, we're more focused on making basic features perfect and well-maintained.\nYou can also help Fumadocs to be more useful by contributing!\n"}, {"info":{"path":"headless/components/breadcrumb.mdx","absolutePath":"/app/apps/docs/content/docs/headless/components/breadcrumb.mdx"},"data":{"title":"Breadcrumb","description":"The navigation component at the top of screen","index":false},"content":"\n\nA hook for implementing Breadcrumb in your documentation, it returns the path to\na page based on the given page tree.\n\n> If present, the index page of a folder will be used as the item\n\n## Usage\n\nit exports a `useBreadcrumb` hook:\n\n```ts twoslash\ndeclare const tree: any;\n// ---cut---\nimport { usePathname } from 'next/navigation';\nimport { useBreadcrumb } from 'fumadocs-core/breadcrumb';\n\nconst pathname = usePathname();\nconst items = useBreadcrumb(pathname, tree);\n//    ^?\n```\n\n### Example\n\nA styled example.\n\n```tsx\n'use client';\nimport { usePathname } from 'next/navigation';\nimport { useBreadcrumb } from 'fumadocs-core/breadcrumb';\nimport type { PageTree } from 'fumadocs-core/server';\nimport { Fragment } from 'react';\nimport { ChevronRight } from 'lucide-react';\nimport Link from 'next/link';\n\nexport function Breadcrumb({ tree }: { tree: PageTree.Root }) {\n  const pathname = usePathname();\n  const items = useBreadcrumb(pathname, tree);\n\n  if (items.length === 0) return null;\n\n  return (\n    <div className=\"-mb-3 flex flex-row items-center gap-1 text-sm font-medium text-fd-muted-foreground\">\n      {items.map((item, i) => (\n        <Fragment key={i}>\n          {i !== 0 && (\n            <ChevronRight className=\"size-4 shrink-0 rtl:rotate-180\" />\n          )}\n          {item.url ? (\n            <Link\n              href={item.url}\n              className=\"truncate hover:text-fd-accent-foreground\"\n            >\n              {item.name}\n            </Link>\n          ) : (\n            <span className=\"truncate\">{item.name}</span>\n          )}\n        </Fragment>\n      ))}\n    </div>\n  );\n}\n```\n\nYou can use it by passing the page tree via `tree` in a server component.\n\n### Breadcrumb Item\n\n<AutoTypeTable path=\"./content/docs/headless/props.ts\" name=\"BreadcrumbItem\" />\n"}, {"info":{"path":"headless/components/index.mdx","absolutePath":"/app/apps/docs/content/docs/headless/components/index.mdx"},"data":{"title":"Components","description":"Blocks for your docs","index":true},"content":"\n"}, {"info":{"path":"headless/components/link.mdx","absolutePath":"/app/apps/docs/content/docs/headless/components/link.mdx"},"data":{"title":"Link","description":"A Link component that handles external links","index":false},"content":"\n\nA component that wraps `next/link` and handles external links in the document.\nWhen an external URL is detected, it uses `<a>` instead of the Next.js Link\nComponent. `rel` property is automatically generated.\n\n## Usage\n\nSame as using `<a>`.\n\n```mdx\nimport Link from 'fumadocs-core/link';\n\n<Link href=\"/docs/components\">Click Me</Link>\n```\n\n### External\n\nYou can force an URL to be external by passing an `external` prop.\n\n### Dynamic hrefs\n\nDynamic hrefs are no longer supported in Next.js App Router. You can enable\ndynamic hrefs by importing `dynamic-link` instead.\n\n```mdx\nimport { DynamicLink } from 'fumadocs-core/dynamic-link';\n\n<DynamicLink href=\"/[lang]/components\">Click Me</DynamicLink>\n```\n"}, {"info":{"path":"headless/components/sidebar.mdx","absolutePath":"/app/apps/docs/content/docs/headless/components/sidebar.mdx"},"data":{"title":"Sidebar","description":"The navigation bar at aside of viewport","index":false},"content":"\n\nA sidebar component which handles device resizing and remove scroll bar\nautomatically.\n\n## Usage\n\n```tsx\nimport * as Base from 'fumadocs-core/sidebar';\n\nreturn (\n  <Base.SidebarProvider>\n    <Base.SidebarTrigger />\n    <Base.SidebarList />\n  </Base.SidebarProvider>\n);\n```\n\n### Sidebar Provider\n\n<AutoTypeTable\n  path=\"./content/docs/headless/props.ts\"\n  name=\"SidebarProviderProps\"\n/>\n\n### Sidebar Trigger\n\nOpens the sidebar on click.\n\n<AutoTypeTable\n  path=\"./content/docs/headless/props.ts\"\n  name=\"SidebarTriggerProps\"\n/>\n\n### Sidebar List\n\n| Data Attribute | Values        | Description        |\n| -------------- | ------------- | ------------------ |\n| `data-open`    | `true, false` | Is sidebar opening |\n\n<AutoTypeTable\n  path=\"./content/docs/headless/props.ts\"\n  type=\"SidebarContentProps\"\n/>\n"}, {"info":{"path":"headless/components/toc.mdx","absolutePath":"/app/apps/docs/content/docs/headless/components/toc.mdx"},"data":{"title":"TOC","description":"Table of Content","index":false},"content":"\n\nA Table of Contents with active anchor observer and auto scroll.\n\n## Usage\n\n```tsx\nimport * as Base from 'fumadocs-core/toc';\n\nreturn (\n  <Base.AnchorProvider>\n    <Base.ScrollProvider>\n      <Base.TOCItem />\n      <Base.TOCItem />\n    </Base.ScrollProvider>\n  </Base.AnchorProvider>\n);\n```\n\n### Anchor Provider\n\nWatch for the active anchor using the Intersection API.\n\n<AutoTypeTable\n  path=\"./content/docs/headless/props.ts\"\n  name=\"AnchorProviderProps\"\n/>\n\n### Scroll Provider\n\nScrolls (the given scroll container) to the active anchor.\n\n<AutoTypeTable\n  path=\"./content/docs/headless/props.ts\"\n  name=\"ScrollProviderProps\"\n/>\n\n### TOC Item\n\nThe anchor item to jump to the anchor.\n\n| Data Attribute | Values        | Description      |\n| -------------- | ------------- | ---------------- |\n| `data-active`  | `true, false` | Is anchor active |\n\n## Example\n\n<include>./toc-example.tsx</include>\n"}, {"info":{"path":"headless/content-collections/index.mdx","absolutePath":"/app/apps/docs/content/docs/headless/content-collections/index.mdx"},"data":{"title":"Content Collections","description":"Use Content Collections for Fumadocs","index":false},"content":"\n\n[Content Collections](https://www.content-collections.dev) is a library that transforms your content into type-safe data collections.\n\n## Setup\n\nInstall the required packages.\n\n```package-install\n@fumadocs/content-collections @content-collections/core @content-collections/mdx @content-collections/next\n```\n\nAfter the installation, add a path alias for the generated collections to the `tsconfig.json`.\n\n```json\n{\n  \"compilerOptions\": {\n    \"paths\": {\n      \"@/*\": [\"./*\"],\n      \"content-collections\": [\"./.content-collections/generated\"]\n    }\n  }\n}\n```\n\nIn the Next.js configuration file, apply the plugin.\n\n```js title=\"next.config.mjs\"\nimport { withContentCollections } from '@content-collections/next';\n\n/** @type {import('next').NextConfig} */\nconst config = {\n  reactStrictMode: true,\n};\n\nexport default withContentCollections(config);\n```\n\nTo integrate with Fumadocs, add the following to your `content-collections.ts`.\n\n\n\nAnd pass it to Source API.\n\n\n\nDone! You can access the pages and generated page tree from Source API.\n\n```ts\nimport { getPage } from '@/lib/source';\n\nconst page = getPage(slugs);\n\n// MDX output\npage?.data.body;\n\n// Table of contents\npage?.data.toc;\n\n// Structured Data, for Search API\npage?.data.structuredData;\n```\n\n### MDX Options\n\nYou can customise MDX options in the `transformMDX` function.\n\n```ts\nimport { defineCollection } from '@content-collections/core';\nimport { transformMDX } from '@fumadocs/content-collections/configuration';\n\nconst docs = defineCollection({\n  transform: (document, context) =>\n    transformMDX(document, context, {\n      // options here\n    }),\n});\n```\n\n### Import Components\n\nTo use components from other packages like Fumadocs UI, pass them to your `<MDXContent />` component.\n\n```tsx\nimport { MDXContent } from '@content-collections/mdx/react';\nimport { getMDXComponents } from '@/mdx-components';\n\n<MDXContent code=\"...\" components={getMDXComponents()} />;\n```\n\nYou can also import them in MDX Files, but it is not recommended.\n\n<Callout title='Deep Dive: Why?'>\n    Content Collections uses `mdx-bundler` to bundle MDX files.\n\n    To support importing a package from node modules, Fumadocs added a default value to the `cwd` option of MDX Bundler.\n    It works good, but we still **do not** recommend to import components in MDX files.\n\n    Reasons:\n\n    - It requires esbuild to bundle these components, while it should be done by the Next.js bundler (for features of Server Components)\n    - You can refactor the import path of components without changing your MDX files.\n    - With Remote Sources, it doesn't make sense to add an import in MDX files.\n\n</Callout>\n"}, {"info":{"path":"headless/mdx/headings.mdx","absolutePath":"/app/apps/docs/content/docs/headless/mdx/headings.mdx"},"data":{"title":"Headings","description":"Process headings from your document","index":false},"content":"\n\n## Remark Heading\n\nApply ids to headings.\n\n```ts title=\"MDX Compiler\"\nimport { compile } from '@mdx-js/mdx';\nimport { remarkHeading } from 'fumadocs-core/mdx-plugins';\n\nawait compile('...', {\n  remarkPlugins: [remarkHeading],\n});\n```\n\n> This plugin is included by default on Fumadocs MDX.\n\n### Extract TOC\n\nBy default, it extracts the headings (table of contents) of a document to `vfile.data.toc`.\nYou can disable it with:\n\n```ts\nimport { remarkHeading } from 'fumadocs-core/mdx-plugins';\n\nexport default {\n  remarkPlugins: [[remarkHeading, { generateToc: false }]],\n};\n```\n\n### Custom Ids [#custom-heading-id]\n\nYou can customise the heading id with `[#slug]`.\n\n```md\n# heading [#slug]\n```\n\n### Output\n\nAn array of `TOCItemType`.\n\n<AutoTypeTable path=\"./content/docs/headless/props.ts\" name=\"TOCItemType\" />\n\n## Rehype TOC\n\nExport table of contents (an array of `TOCItemType`), it allows JSX nodes which is not possible with a Remark plugin.\n\n> It requires MDX.js.\n\n### Usage\n\n```ts\nimport { rehypeToc } from 'fumadocs-core/mdx-plugins';\n\nexport default {\n  rehypePlugins: [rehypeToc],\n};\n```\n\n### Output\n\nFor a Markdown document:\n\n```md\n## Hello `code`\n```\n\nAn export will be created:\n\n```jsx\nexport const toc = [\n  {\n    title: (\n      <>\n        Hello <code>code</code>\n      </>\n    ),\n    depth: 2,\n    url: '#hello-code',\n  },\n];\n```\n"}, {"info":{"path":"headless/mdx/index.mdx","absolutePath":"/app/apps/docs/content/docs/headless/mdx/index.mdx"},"data":{"title":"MDX Plugins","description":"Useful remark & rehype plugins for your docs.","index":true},"content":"\n"}, {"info":{"path":"headless/mdx/install.mdx","absolutePath":"/app/apps/docs/content/docs/headless/mdx/install.mdx"},"data":{"title":"Package Install","description":"Generate code blocks for installing packages","index":false},"content":"\n\n## Usage\n\n```package-install\nfumadocs-docgen\n```\n\nAdd the remark plugin.\n\n```ts title=\"source.config.ts\" tab=\"Fumadocs MDX\"\nimport { remarkInstall } from 'fumadocs-docgen';\nimport { defineConfig } from 'fumadocs-mdx/config';\n\nexport default defineConfig({\n  mdxOptions: {\n    remarkPlugins: [remarkInstall],\n  },\n});\n```\n\n```ts tab=\"MDX Compiler\"\nimport { compile } from '@mdx-js/mdx';\nimport { remarkInstall } from 'fumadocs-docgen';\n\nawait compile('...', {\n  remarkPlugins: [remarkInstall],\n});\n```\n\nDefine the required components.\n\n```tsx title=\"mdx-components.tsx (Fumadocs UI)\"\nimport { Tab, Tabs } from 'fumadocs-ui/components/tabs';\nimport defaultComponents from 'fumadocs-ui/mdx';\nimport type { MDXComponents } from 'mdx/types';\n\nexport function getMDXComponents(components?: MDXComponents): MDXComponents {\n  return {\n    ...defaultComponents,\n    Tab,\n    Tabs,\n    ...components,\n  };\n}\n```\n\n| Component |                                   |\n| --------- | --------------------------------- |\n| Tabs      | Accept an array of item (`items`) |\n| Tab       | Accept the name of item (`value`) |\n\nCreate code blocks with `package-install` as language.\n\n````mdx\n```package-install\nmy-package\n```\n\n```package-install\nnpm i my-package -D\n```\n````\n\n### Output\n\nThe following structure should be generated by the plugin.\n\n```mdx\n<Tabs items={['npm', 'pnpm', 'yarn', 'bun']}>\n  <Tab value=\"npm\">...</Tab>\n  <Tab value=\"pnpm\">...</Tab>\n  <Tab value=\"yarn\">...</Tab>\n  <Tab value=\"bun\">...</Tab>\n<Tabs>\n```\n\n```package-install\nmy-package\n```\n\n## Options\n\n### Persistent\n\nWhen using with Fumadocs UI, you can enable persistent with the `persist` option.\n\n```ts\nimport { remarkInstall } from 'fumadocs-docgen';\n\nconst config = {\n  remarkPlugins: [\n    [\n      remarkInstall,\n      {\n        persist: {\n          id: 'some-id',\n        },\n      },\n    ],\n  ],\n};\n```\n\nThis will instead generate:\n\n```mdx\n<Tabs groupId=\"some-id\" persist items={[...]}>\n  ...\n<Tabs>\n```\n"}, {"info":{"path":"headless/mdx/rehype-code.mdx","absolutePath":"/app/apps/docs/content/docs/headless/mdx/rehype-code.mdx"},"data":{"title":"Rehype Code","description":"Code syntax highlighter","index":false},"content":"\n\nA wrapper of [Shiki](https://shiki.style), the built-in syntax highlighter.\n\n## Usage\n\nAdd the rehype plugin.\n\n```ts title=\"MDX Compiler\"\nimport { compile } from '@mdx-js/mdx';\nimport { rehypeCode } from 'fumadocs-core/mdx-plugins';\n\nawait compile('...', {\n  rehypePlugins: [rehypeCode],\n});\n```\n\n> This plugin is included by default on Fumadocs MDX.\n\n### Output\n\nA codeblock wrapped in `<pre />`.\n\n```html\n<pre>\n<code>...</code>\n</pre>\n```\n\n### Meta\n\nIt parses the `title` meta string, and add it to the `pre` element via attribute.\n\n````mdx\n```js title=\"Title\"\nconsole.log('Hello');\n```\n````\n\nYou may filter the meta string before processing it with the `filterMetaString` option.\n\n### Inline Code\n\n`console.log(\"hello world\"){:js}` works.\n\nSee https://shiki.style/packages/rehype#inline-code.\n\n### Icon\n\nAdd an icon according to the language of codeblock.\nIt outputs HTML, you might need to render it with React `dangerouslySetInnerHTML`.\n\n```jsx\n<pre icon=\"<svg />\">...</pre>\n```\n\nDisable or customise icons with the `icon` option.\n\n### More Options\n\nsee [Shiki](https://shiki.style).\n"}, {"info":{"path":"headless/mdx/remark-admonition.mdx","absolutePath":"/app/apps/docs/content/docs/headless/mdx/remark-admonition.mdx"},"data":{"title":"Remark Admonition","description":"Use Admonition in Fumadocs","index":false},"content":"\n\nIn Docusaurus, there's an [Admonition syntax](https://docusaurus.io/docs/markdown-features/admonitions).\n\nFor people migrating from Docusaurus, you can enable this remark plugin to support the Admonition syntax.\n\n## Usage\n\n```ts title=\"source.config.ts\" tab=\"Fumadocs MDX\"\nimport { remarkAdmonition } from 'fumadocs-core/mdx-plugins';\nimport { defineConfig } from 'fumadocs-mdx/config';\n\nexport default defineConfig({\n  mdxOptions: {\n    remarkPlugins: [remarkAdmonition],\n  },\n});\n```\n\n```ts tab=\"MDX Compiler\"\nimport { compile } from '@mdx-js/mdx';\nimport { remarkAdmonition } from 'fumadocs-core/mdx-plugins';\n\nawait compile('...', {\n  remarkPlugins: [remarkAdmonition],\n});\n```\n\n### Input\n\n```md\n:::warning\nHello World\n:::\n```\n\n### Output\n\n```mdx\n<Callout type='warn'>\n\nHello World\n\n</Callout>\n```\n\n### When to use\n\nWe highly recommend to use the JSX syntax of MDX instead.\nIt's more flexible, some editors support intellisense in MDX files.\n\n```mdx\n<Callout type='warn'>\n\nHello World\n\n</Callout>\n```\n"}, {"info":{"path":"headless/mdx/remark-image.mdx","absolutePath":"/app/apps/docs/content/docs/headless/mdx/remark-image.mdx"},"data":{"title":"Remark Image","description":"Make images compatible with Next.js Image Optimization","index":false},"content":"\n\n## Usage\n\nAdd it to your Remark plugins.\n\n```ts title=\"MDX Compiler\"\nimport { compile } from '@mdx-js/mdx';\nimport { remarkImage } from 'fumadocs-core/mdx-plugins';\n\nawait compile('...', {\n  remarkPlugins: [remarkImage],\n});\n```\n\n> This plugin is included by default on Fumadocs MDX.\n\nSupported:\n\n- Local Images\n- External URLs\n- Next.js static imports\n\n### How It Works\n\nIt transforms your `![image](/test.png)` into Next.js Image usage, and add required props like `width` and `height`.\n\nBy default, it uses **static imports** to import local images, which supports the `placeholder` option of Next.js Image.\nNext.js can handle image imports with its built-in image loader.\n\nOtherwise, it uses the file system or an HTTP request to download the image and obtain its size.\n\n### Options\n\n<AutoTypeTable\n  path=\"./content/docs/headless/props.ts\"\n  name=\"RemarkImageOptions\"\n/>\n\n### Example: With Imports\n\n```mdx\n![Hello](/hello.png)\n![Test](https://example.com/image.png)\n```\n\nYields:\n\n```mdx\nimport HelloImage from './public/hello.png';\n\n<img alt=\"Hello\" src={HelloImage} />\n<img\n  alt=\"Test\"\n  src=\"https://example.com/image.png\"\n  width=\"1980\"\n  height=\"1080\"\n/>\n```\n\nWhere `./public/hello.png` points to the image in public directory.\n\n### Example: Without Imports\n\nYou can disable Next.js static imports on local images.\n\n```ts\nimport { remarkImage } from 'fumadocs-core/mdx-plugins';\n\nexport default {\n  remarkPlugins: [[remarkImage, { useImport: false }]],\n};\n```\n\n```mdx\n![Hello](/hello.png)\n![Test](https://example.com/image.png)\n```\n\nYields:\n\n```mdx\n<img alt=\"Hello\" src=\"/hello.png\" width=\"1980\" height=\"1080\" />\n<img\n  alt=\"Test\"\n  src=\"https://example.com/image.png\"\n  width=\"1980\"\n  height=\"1080\"\n/>\n```\n\n### Example: Relative Paths\n\nWhen `useImport` is enabled, you can reference local images using relative paths.\n\n```mdx\n![Hello](./hello.png)\n```\n\nBe careful that using it with `useImport` disabled **doesn't work**.\nNext.js will not add the image to public assets unless you have imported it in code.\nFor images in public directory, you can just reference them without relative paths.\n\n### Example: Public Directory\n\nCustomise the path of public directory\n\n```ts\nimport { remarkImage } from 'fumadocs-core/mdx-plugins';\nimport path from 'node:path';\n\nexport default {\n  remarkPlugins: [\n    remarkImage,\n    {\n      publicDir: path.join(process.cwd(), 'dir'),\n    },\n  ],\n};\n```\n\nYou can pass a URL too.\n\n```ts\nimport { remarkImage } from 'fumadocs-core/mdx-plugins';\n\nexport default {\n  remarkPlugins: [\n    remarkImage,\n    {\n      publicDir: 'http://localhost:3000/images',\n    },\n  ],\n};\n```\n"}, {"info":{"path":"headless/mdx/remark-ts2js.mdx","absolutePath":"/app/apps/docs/content/docs/headless/mdx/remark-ts2js.mdx"},"data":{"title":"Remark TS to JS","description":"A remark plugin to transform TypeScript codeblocks into two tabs of codeblock with its JavaScript variant.","index":false},"content":"\n\n## Usage\n\nInstall dependencies:\n\n```package-install\nfumadocs-docgen oxc-transform\n```\n\nAdd `oxc-transform` to `serverExternalPackages` in `next.config.mjs`:\n\n```js title=\"next.config.mjs\"\nimport { createMDX } from 'fumadocs-mdx/next';\n\n/** @type {import('next').NextConfig} */\nconst config = {\n  reactStrictMode: true,\n  serverExternalPackages: ['oxc-transform'],\n};\n\nconst withMDX = createMDX();\n\nexport default withMDX(config);\n```\n\nAdd the remark plugin:\n\n```ts title=\"source.config.ts\" tab=\"Fumadocs MDX\"\nimport { remarkTypeScriptToJavaScript } from 'fumadocs-docgen/remark-ts2js';\nimport { defineConfig } from 'fumadocs-mdx/config';\n\nexport default defineConfig({\n  mdxOptions: {\n    remarkPlugins: [remarkTypeScriptToJavaScript],\n  },\n});\n```\n\n```ts tab=\"MDX Compiler\"\nimport { remarkTypeScriptToJavaScript } from 'fumadocs-docgen/remark-ts2js';\nimport { compile } from '@mdx-js/mdx';\n\nawait compile('...', {\n  remarkPlugins: [remarkTypeScriptToJavaScript],\n});\n```\n\nFinally, make sure to define the required MDX components: `Tabs` and `Tab`.\n\n```tsx title=\"mdx-components.tsx (Fumadocs UI)\"\nimport { Tab, Tabs } from 'fumadocs-ui/components/tabs';\nimport defaultComponents from 'fumadocs-ui/mdx';\nimport type { MDXComponents } from 'mdx/types';\n\nexport function getMDXComponents(components?: MDXComponents): MDXComponents {\n  return {\n    ...defaultComponents,\n    Tab,\n    Tabs,\n    ...components,\n  };\n}\n```\n\nYou can now enable it on TypeScript/TSX codeblocks, like:\n\n````md\n```tsx ts2js\nimport { ReactNode } from 'react';\n\nexport default function Layout({ children }: { children: ReactNode }) {\n  return <div>{children}</div>;\n}\n```\n````\n\n```tsx ts2js\nimport { ReactNode } from 'react';\n\nexport default function Layout({ children }: { children: ReactNode }) {\n  return <div>{children}</div>;\n}\n```\n"}, {"info":{"path":"headless/mdx/structure.mdx","absolutePath":"/app/apps/docs/content/docs/headless/mdx/structure.mdx"},"data":{"title":"Remark Structure","description":"Extract information from your documents, useful for implementing document search","index":false},"content":"\n\n## Usage\n\nAdd it as a remark plugin.\n\n```ts title=\"MDX Compiler\"\nimport { compile } from '@mdx-js/mdx';\nimport { remarkStructure } from 'fumadocs-core/mdx-plugins';\n\nconst vfile = await compile('...', {\n  remarkPlugins: [remarkStructure],\n});\n```\n\n> This plugin is included by default on Fumadocs MDX.\n\nExtracted information could be found in `vfile.data.structuredData`, you may\nwrite your own plugin to convert it into a MDX export.\n\n### Options\n\n<AutoTypeTable\n  path=\"./content/docs/headless/props.ts\"\n  name=\"StructureOptions\"\n/>\n\n### Output\n\nA list of headings and contents. Paragraphs will be extracted to the `contents`\narray, each item contains a `heading` prop indicating the heading of paragraph.\n\n<Callout title=\"Note\">A heading can have multiple paragraphs.</Callout>\n\n#### Heading\n\n| Prop      |                                      |\n| --------- | ------------------------------------ |\n| `id`      | unique identifier or slug of heading |\n| `content` | Text content                         |\n\n#### Content\n\n| Prop      |                                 |\n| --------- | ------------------------------- |\n| `heading` | Heading of paragraph (nullable) |\n| `content` | Text content                    |\n\n## As a Function\n\nAccepts MDX/markdown content and return structurized data.\n\n```ts\nimport { structure } from 'fumadocs-core/mdx-plugins';\n\nstructure(page.body.raw);\n```\n\n<Callout title=\"Tip\" className=\"mt-4\">\nIf you have custom remark plugins enabled, such as\n`remark-math`, you have to pass these plugins to the function. This avoids unreadable content on paragraphs.\n\n```ts\nimport { structure } from 'fumadocs-core/mdx-plugins';\nimport remarkMath from 'remark-math';\n\nstructure(page.body.raw, [remarkMath]);\n```\n\n</Callout>\n\n### Parameters\n\n| Parameter       |                        |\n| --------------- | ---------------------- |\n| `content`       | MDX/markdown content   |\n| `remarkPlugins` | List of remark plugins |\n| `options`       | Custom options         |\n"}, {"info":{"path":"headless/search/algolia.mdx","absolutePath":"/app/apps/docs/content/docs/headless/search/algolia.mdx"},"data":{"title":"Algolia Search","description":"Integrate Algolia Search with Fumadocs","index":false},"content":"\n\n<Callout title=\"Notice\">\n  If you're using Algolia's free tier, you have to [display their logo on your\n  search dialog](https://algolia.com/policies/free-services-terms).\n</Callout>\n\n## Introduction\n\nThe Algolia Integration automatically configures Algolia Search for document search.\n\nIt creates a record for **each paragraph** in your document, it is also recommended by Algolia.\n\nEach record contains searchable attributes:\n\n| Attribute | Description           |\n| --------- | --------------------- |\n| `title`   | Page Title            |\n| `section` | Heading ID (nullable) |\n| `content` | Paragraph content     |\n\nThe `section` field only exists in paragraphs under a heading. Headings and\nparagraphs are indexed as an individual record, grouped by their page ID.\n\nNotice that it expects the `url` property of a page to be unique, you shouldn't have two pages with the same\nurl.\n\n## Setup\n\n### Install Dependencies\n\n```package-install\nalgoliasearch\n```\n\n### Sign up on Algolia\n\nSign up and obtain the app id and API keys for your search. Store these\ncredentials in environment variables.\n\n### Sync Search Indexes\n\nExport the search indexes from Next.js using a route handler, this way we can access the search indexes after production build:\n\n\nMake a script to sync search indexes:\n\n```js title=\"update-index.mjs\"\nimport algosearch from 'algoliasearch';\nimport { sync } from 'fumadocs-core/search/algolia';\nimport * as fs from 'node:fs';\n\nconst content = fs.readFileSync('.next/server/app/static.json.body');\n\n/** @type {import('fumadocs-core/search/algolia').DocumentRecord[]} **/\nconst indexes = JSON.parse(content.toString());\n\nconst client = algosearch('id', 'key');\n\nsync(client, {\n  documents: indexes, // search indexes, can be provided by your content source too [!code highlight]\n});\n```\n\nThe `sync` function will update the index settings and sync search indexes.\n\nNow run the script after build:\n\n```json title=\"package.json\"\n{\n  \"scripts\": {\n    \"build\": \"next build && node ./update-index.mjs\"\n  }\n}\n```\n\n### Workflow\n\nYou may make it a script and manually sync with `node ./update-index.mjs`, or\nintegrate it with your CI/CD pipeline.\n\n<Callout type=\"warn\" title=\"Typescript Usage\">\n  If you are running the script with [TSX](https://github.com/privatenumber/tsx)\n  or other similar Typescript executors, ensure to name it `.mts` for best ESM\n  compatibility.\n</Callout>\n\n### Search UI\n\nYou can consider different options for implementing the UI:\n\n- [Fumadocs UI Usage](/docs/ui/search#algolia)\n- Build your own using the built-in search client hook:\n\n  ```ts\n  import algosearch from 'algoliasearch';\n  import { useDocsSearch } from 'fumadocs-core/search/client';\n\n  const index = algosearch('id', 'key').initIndex('document');\n\n  const { search, setSearch, query } = useDocsSearch({\n    type: 'algolia',\n    index,\n    distinct: 5,\n    hitsPerPage: 10,\n  });\n  ```\n\n## Options\n\n### Tag Filter\n\nTo configure tag filtering, add a `tag` value to indexes.\n\n```js\nimport algosearch from 'algoliasearch';\nimport { sync } from 'fumadocs-core/search/algolia';\n\nconst client = algosearch('id', 'key');\n\nsync(client, {\n  documents: indexes.map((index) => ({\n    ...index,\n    tag: 'value', // [!code highlight]\n  })),\n});\n```\n\nAnd update your search client:\n\n- **Fumadocs UI**: Enable [Tag Filter](/docs/ui/search#tag-filter-1) on Search Dialog.\n- **Search Client**: You can add the tag filter like:\n\n  ```ts\n  import algosearch from 'algoliasearch';\n  import { useDocsSearch } from 'fumadocs-core/search/client';\n\n  const index = algosearch('id', 'key').initIndex('document');\n\n  const { search, setSearch, query } = useDocsSearch(\n    {\n      type: 'algolia',\n      index,\n    },\n    undefined,\n    '<your tag value>',\n  );\n  ```\n\nThe `tag` field is an attribute for faceting. You can also use the filter `tag:value` on Algolia search clients.\n\n### Customise Attributes & Settings\n\nWhile the default attributes might not suit your case, you can pass `extra_data`\nto index options for adding extra fields to each record.\n\n```js\nimport { sync } from 'fumadocs-core/search/algolia';\n\nsync(client, {\n  documents: indexes.map((docs) => ({\n    ...docs,\n    extra_data: {\n      value: 'hello world',\n    },\n  })),\n});\n```\n\nTo customize the default index settings, set index settings, and update\ndocuments with `updateDocuments(...)` separately.\n"}, {"info":{"path":"headless/search/index.mdx","absolutePath":"/app/apps/docs/content/docs/headless/search/index.mdx"},"data":{"title":"Search","description":"Configure Search in Fumadocs","icon":"Search","index":true},"content":"\n"}, {"info":{"path":"headless/search/orama-cloud.mdx","absolutePath":"/app/apps/docs/content/docs/headless/search/orama-cloud.mdx"},"data":{"title":"Orama Cloud","description":"Integrate with Orama Cloud","index":false},"content":"\n\nTo begin, create an account on Orama Cloud.\n\n## REST API\n\nREST API integration requires your docs to upload the indexes.\n\n1. Create a new REST API index from Dashboard.\n2. Use the following schema:\n\n   ```json\n   {\n     \"id\": \"string\",\n     \"title\": \"string\",\n     \"url\": \"string\",\n     \"tag\": \"string\",\n     \"page_id\": \"string\",\n     \"section\": \"string\",\n     \"section_id\": \"string\",\n     \"content\": \"string\"\n   }\n   ```\n\n3. Then, using the private API key and index ID from dashboard, create a script to sync search indexes.\n\n\n4. Create a route handler in your Next.js app to export search indexes.\n\n\n5. Run the script after `next build`.\n\n### Search Client\n\nTo search documents on the client side, use [Fumadocs UI Search Dialog](/docs/ui/search#orama-cloud), or make your own implementation.\n\nIn addition, the headless search client of Fumadocs can handle state management for React.\n\n```ts\nimport { useDocsSearch } from 'fumadocs-core/search/client';\nimport { OramaClient } from '@oramacloud/client';\n\nconst client = new OramaClient();\n\nconst { search, setSearch, query } = useDocsSearch({\n  type: 'orama-cloud',\n  client,\n  params: {\n    // search params\n  },\n});\n```\n\n## Web Crawler\n\n1. Create a Crawler index from dashboard, and configure it correctly with the \"Documentation\" preset.\n2. Copy the public API key and index ID from dashboard\n\n### Search Client\n\nSame as REST API integration, but make sure to set `index` to `crawler`.\n\n```ts\nimport { useDocsSearch } from 'fumadocs-core/search/client';\nimport { OramaClient } from '@oramacloud/client';\n\nconst client = new OramaClient({\n  endpoint: '<endpoint_url>',\n  api_key: '<api_key>',\n});\n\nconst { search, setSearch, query } = useDocsSearch({\n  type: 'orama-cloud',\n  index: 'crawler',\n  client,\n  params: {\n    // optional search params\n  },\n});\n```\n\nIt's same for Fumadocs UI:\n\n```tsx\n'use client';\n\nimport { OramaClient } from '@oramacloud/client';\nimport type { SharedProps } from 'fumadocs-ui/components/dialog/search';\nimport SearchDialog from 'fumadocs-ui/components/dialog/search-orama';\n\nconst client = new OramaClient({\n  endpoint: '<endpoint_url>',\n  api_key: '<api_key>',\n});\n\nexport default function CustomSearchDialog(props: SharedProps) {\n  return <SearchDialog {...props} index=\"crawler\" client={client} />;\n}\n```\n"}, {"info":{"path":"headless/search/orama.mdx","absolutePath":"/app/apps/docs/content/docs/headless/search/orama.mdx"},"data":{"title":"Built-in Search","description":"Built-in document search of Fumadocs","index":false},"content":"\n\nFumadocs supports searching document based on Orama.\n\nAs the built-in search of Fumadocs, It is the default but also recommended\noption since it's easier to setup and totally free.\n\n## Setup\n\nYou can create the search route handler from the source object, or search indexes.\n\n### From Source\n\nCreate a route handler from Source object.\n\n\n\n### From Search Indexes\n\nPass search indexes to the function.\n\nEach index needs a `structuredData` field.\nUsually, it has been provided by your content source (e.g. Fumadocs MDX).\n\n\nIt can also be processed from Markdown/MDX document using the [Structure](/docs/headless/mdx/structure) remark plugin.\n\n### Client\n\nYou can query it using:\n\n- **Fumadocs UI**: The built-in [Search UI](/docs/ui/search) supports it out-of-the-box.\n- **Search Client**:\n\n  ```ts twoslash\n  import { useDocsSearch } from 'fumadocs-core/search/client';\n\n  const client = useDocsSearch({\n    type: 'fetch',\n  });\n  ```\n\n  <AutoTypeTable type='Extract<import(\"fumadocs-core/search/client\").Client, { type: \"fetch\" }>' />\n\n### Tag Filter\n\nSupport filtering by tag, it's useful for implementing multi-docs similar to this documentation.\n\n\nand update your search client:\n\n- **Fumadocs UI**:\n  Configure [Tag Filter](/docs/ui/search#tag-filter) on Search UI.\n- **Search Client**:\n  pass a tag to the hook.\n\n  ```ts\n  import { useDocsSearch } from 'fumadocs-core/search/client';\n\n  // Pass `tag` in your custom search dialog\n  const client = useDocsSearch(\n    {\n      type: 'fetch',\n    },\n    undefined, // locale code, can be `undefined`\n    'tag',\n  );\n  ```\n\n### Index by Content\n\nIndex with the raw content of document (unrecommended).\n\n```ts title=\"app/api/search/route.ts\"\nimport { allDocs } from 'content-collections';\nimport { createSearchAPI } from 'fumadocs-core/search/server';\n\nexport const { GET } = createSearchAPI('simple', {\n  indexes: allDocs.map((docs) => ({\n    title: docs.title,\n    content: docs.content, // Raw Content\n    url: docs.url,\n  })),\n});\n```\n\n## Internationalization\n\n```ts title=\"lib/source.ts\" tab=\"createFromSource\"\nimport { i18n } from '@/lib/i18n';\nimport { loader } from 'fumadocs-core/source';\n\n// You only need i18n option on source object.\nexport const source = loader({\n  i18n, // [!code highlight]\n});\n```\n\n\n### Update Search Client\n\n<Callout type=\"info\" title=\"For Fumadocs UI\">\n  You can ignore this, Fumadocs UI handles this when you have i18n configured\n  correctly.\n</Callout>\n\nAdd `locale` to the search client, this will only allow pages with specified locale to be searchable by the user.\n\n```ts\nconst { search, setSearch, query } = useDocsSearch(\n  {\n    type: 'fetch',\n  },\n  locale,\n);\n```\n\n### Special Languages\n\nIf your language is not on the Orama [Supported Languages](https://docs.orama.com/open-source/supported-languages#officially-supported-languages) list, you have to configure them manually:\n\n\n\nSee [Orama Docs](https://docs.orama.com/open-source/supported-languages/using-chinese-with-orama) for more details.\n\n## Static Export\n\nTo work with Next.js static export, use `staticGET` from search server.\n\n```ts title=\"app/api/search/route.ts\"\nimport { source } from '@/lib/source';\nimport { createFromSource } from 'fumadocs-core/search/server';\n\n// it should be cached forever\nexport const revalidate = false;\n\nexport const { staticGET: GET } = createFromSource(source);\n```\n\n> `staticGET` is also available on `createSearchAPI`.\n\nand update your search clients:\n\n- **Fumadocs UI**: See [Static Export](/docs/ui/static-export#built-in-search) guide.\n\n- **Search Client**:\n\n  On your search client, use `static` instead of `fetch`.\n\n  ```ts\n  import { useDocsSearch } from 'fumadocs-core/search/client';\n\n  const client = useDocsSearch({\n    type: 'static',\n  });\n  ```\n\n  <AutoTypeTable type='Extract<import(\"fumadocs-core/search/client\").Client, { type: \"static\" }>' />\n\n<Callout type='warn' title=\"Be Careful\">\n\n    Static Search requires clients to download the exported search indexes.\n    For large docs sites, its size can be really big.\n\n    Especially with i18n (e.g. Chinese tokenizers), the bundle size of tokenizers can exceed ~500MB.\n    You should use 3rd party solutions like Algolia for these cases.\n\n</Callout>\n\n## Custom Algorithm\n\nYou can port your own search algorithm by returning a list of `SortedResult`\nfrom your custom `/api/search/route.ts` route handler (API Endpoint). You can also integrate it\nwith Fumadocs UI.\n\n<AutoTypeTable path=\"./content/docs/headless/props.ts\" name=\"SortedResult\" />\n\n## Headless\n\nYou can host the search server on other backend such as Express and Elysia.\n\n```ts\nimport { initAdvancedSearch } from 'fumadocs-core/search/server';\n\nconst server = initAdvancedSearch({\n  // you still have to pass indexes\n});\n\nserver.search('query', {\n  // you can specify `locale` and `tag` here\n});\n```\n"}, {"info":{"path":"headless/search/trieve.mdx","absolutePath":"/app/apps/docs/content/docs/headless/search/trieve.mdx"},"data":{"title":"Trieve Search","description":"Integrate Trieve Search with Fumadocs","index":false},"content":"\n\n> This is a community maintained integration.\n\n## Introduction\n\nThe Trieve Integration automatically configures Trieve Search for site search.\n\nBy default, it creates a chunk for **each paragraph** in your document, it is\nofficially recommended by Trieve.\n\n## Setup\n\n### Install Dependencies\n\n```package-install\ntrieve-ts-sdk trieve-fumadocs-adapter\n```\n\n### Sign up on Trieve\n\nSign up and create a dataset. Then obtain 2 API keys where one has only read access and the other has admin access to create and delete chunks.\nStore these credentials in environment variables.\n\n<Callout title=\"Notice\">\n  One API Key should have only read access for the public facing search and the\n  other should have admin access to create and delete chunks.\n</Callout>\n\n### Sync Dataset\n\nYou can export the search indexes from Next.js using a route handler:\n\n```ts title=\"app/static.json/route.ts\"\nimport { NextResponse } from 'next/server';\nimport { source } from '@/lib/source';\nimport { type TrieveDocument } from 'trieve-fumadocs-adapter/search/sync';\n\nexport const revalidate = false;\n\nexport function GET() {\n  const results: TrieveDocument[] = [];\n\n  for (const page of source.getPages()) {\n    results.push({\n      _id: page.url,\n      structured: page.data.structuredData,\n      url: page.url,\n      title: page.data.title,\n      description: page.data.description,\n    });\n  }\n\n  return NextResponse.json(results);\n}\n```\n\nCreate a script, the `sync` function will sync search indexes.\n\n```js title=\"update-index.mjs\"\nimport * as fs from 'node:fs';\nimport { sync } from 'trieve-fumadocs-adapter/search/sync';\nimport { TrieveSDK } from 'trieve-ts-sdk';\n\nconst content = fs.readFileSync('.next/server/app/static.json.body');\n\n// now you can pass it to `sync`\n/** @type {import('trieve-fumadocs-adapter/search/sync').TrieveDocument[]} **/\nconst records = JSON.parse(content.toString());\n\nconst client = new TrieveSDK({\n  apiKey: 'adminApiKey',\n  datasetId: 'datasetId',\n});\n\nsync(client, records);\n```\n\nMake sure to run the script after build:\n\n```json title=\"package.json\"\n{\n  \"scripts\": {\n    \"build\": \"next build && node ./update-index.mjs\"\n  }\n}\n```\n\n### Workflow\n\nYou may manually sync with `node ./update-index.mjs`, or\nintegrate it with your CI/CD pipeline.\n\n<Callout type=\"info\" title=\"Typescript Usage\">\n  You can use Bun or other JavaScript runtimes that supports TypeScript and ESM.\n</Callout>\n\n### Search UI\n\nOn Fumadocs UI, you can use the `SearchDialog` component:\n\n```tsx title=\"components/search.tsx\"\n'use client';\nimport type { SharedProps } from 'fumadocs-ui/components/dialog/search';\nimport SearchDialog from 'trieve-fumadocs-adapter/components/dialog/search';\nimport { TrieveSDK } from 'trieve-ts-sdk';\n\nconst trieveClient = new TrieveSDK({\n  apiKey: 'readOnlyApiKey',\n  datasetId: 'datasetId',\n});\n\nexport default function CustomSearchDialog(props: SharedProps) {\n  return <SearchDialog trieveClient={trieveClient} {...props} />;\n}\n```\n\n1. Replace `apiKey` and `datasetId` with your desired values.\n\n2. [Replace the default search dialog](/docs/ui/search#replace-search-dialog) with your new component.\n\n### Search Client\n\nAdd the `useTrieveSearch` hook:\n\n```ts\nimport { TrieveSDK } from 'trieve-ts-sdk';\nimport { useTrieveSearch } from 'trieve-fumadocs-adapter/search/trieve';\n\nconst client = new TrieveSDK({\n  apiKey: 'readOnlyApiKey',\n  datasetId: 'datasetId',\n});\n\nconst { search, setSearch, query } = useTrieveSearch(client);\n```\n\n## Options\n\n### Tag Filter\n\nTo configure tag filtering, add a `tag` value to indexes.\n\n```js\nimport { sync } from 'trieve-fumadocs-adapter/search/sync';\nimport { TrieveSDK } from 'trieve-ts-sdk';\n\nconst client = new TrieveSDK({\n  apiKey: 'adminApiKey',\n  datasetId: 'datasetId',\n});\n\nconst documents = records.map((index) => ({\n  ...index,\n  tag: 'value', // [!code highlight]\n}));\n\nsync(client, documents);\n```\n\n#### Search UI\n\nEnable Tag Filter.\n\n```tsx title=\"components/search.tsx\"\nimport SearchDialog from 'trieve-fumadocs-adapter/components/dialog/search';\n\n<SearchDialog\n  defaultTag=\"value\"\n  tags={[\n    {\n      name: 'Tag Name',\n      value: 'value',\n    },\n  ]}\n/>;\n```\n\n#### Search Client\n\nThe `tag_set` field is an attribute for filtering. To filter indexes by tag, use the filter on Trieve search clients.\n\n```json\n{\n  \"must\": [\n    {\n      \"field\": \"tag_set\",\n      \"match\": [\"value\"]\n    }\n  ]\n}\n```\n\nOr with `useTrieveSearch` hook:\n\n```ts\nimport { TrieveSDK } from 'trieve-ts-sdk';\nimport { useTrieveSearch } from 'trieve-fumadocs-adapter/search/trieve';\n\nconst client = new TrieveSDK({\n  apiKey: 'readOnlyApiKey',\n  datasetId: 'datasetId',\n});\n\nconst { search, setSearch, query } = useTrieveSearch(\n  client,\n  undefined,\n  '<your tag value>',\n);\n```\n"}, {"info":{"path":"headless/utils/find-neighbour.mdx","absolutePath":"/app/apps/docs/content/docs/headless/utils/find-neighbour.mdx"},"data":{"title":"Find Neighbours","description":"Find the neighbours of a page from the page tree","index":false},"content":"\n\nFind the neighbours of a page from the page tree, it returns the next and\nprevious page of a given page. It is useful for implementing a footer.\n\n## Usage\n\nIt requires a page tree and the url of page.\n\n```ts\nimport { findNeighbour } from 'fumadocs-core/server';\nimport { pageTree } from '@/lib/source';\n\nconst neighbours = findNeighbour(pageTree, '/url/to/page');\n```\n\n| Parameter | Type       | Description     |\n| --------- | ---------- | --------------- |\n| tree      | `PageTree` | The page tree   |\n| url       | `string`   | The url of page |\n"}, {"info":{"path":"headless/utils/get-toc.mdx","absolutePath":"/app/apps/docs/content/docs/headless/utils/get-toc.mdx"},"data":{"title":"Get TOC","description":"Parse Table of contents from markdown/mdx content","index":false},"content":"\n\nParse Table of contents from markdown/mdx content.\n\n> [You can use the remark plugin directly](/docs/headless/mdx/headings)\n\n## Usage\n\nNote: If you're using a CMS, you should use the API provided by the CMS instead.\n\n```ts\nimport { getTableOfContents } from 'fumadocs-core/server';\n\nconst toc = getTableOfContents('## markdown content');\n```\n\n### Output\n\nAn array of [`TOCItemType`](/docs/headless/mdx/headings#output) is returned.\n"}, {"info":{"path":"headless/utils/git-last-edit.mdx","absolutePath":"/app/apps/docs/content/docs/headless/utils/git-last-edit.mdx"},"data":{"title":"Last Modified Time","description":"Get the last edit time of a file in Github repository","index":false},"content":"\n\n## Usage\n\nPass your repository name, and the path to file.\n\n```ts\nimport { getGithubLastEdit } from 'fumadocs-core/server';\n\nconst time = await getGithubLastEdit({\n  owner: 'fuma-nama',\n  repo: 'fumadocs',\n  // example: \"content/docs/index.mdx\"\n  path: `content/docs/${page.file.path}`,\n});\n```\n\n### Github Token\n\nNotice that you may easily reach the rate limit in development mode. Hence, you\nshould pass a Github token for a higher rate limit.\n\nLearn more about\n[Authenticating to the REST API](https://docs.github.com/en/rest/overview/authenticating-to-the-rest-api).\n\n```ts\nimport { getGithubLastEdit } from 'fumadocs-core/server'\n\n const time = await getGithubLastEdit({\n    ...,\n    token: `Bearer ${process.env.GIT_TOKEN}`\n  })\n```\n\nAlso, you can skip this in development mode if you don't need that\nfunctionality.\n\n```ts\nprocess.env.NODE_ENV === 'development'? null : getGithubLastEdit(...)\n```\n"}, {"info":{"path":"headless/utils/index.mdx","absolutePath":"/app/apps/docs/content/docs/headless/utils/index.mdx"},"data":{"title":"Utilities","description":"Utilities to provide extra functionality to your docs","index":true},"content":"\n"}, {"info":{"path":"openapi/operations/museum-hours.mdx","absolutePath":"/app/apps/docs/content/docs/openapi/operations/museum-hours.mdx"},"data":{"title":"Get museum hours","description":"Get upcoming museum operating hours.","full":true,"_openapi":{"method":"GET","route":"/museum-hours","toc":[],"structuredData":{"headings":[],"contents":[{"content":"Get upcoming museum operating hours."}]}},"index":false},"content":"\n\n{/* This file was generated by Fumadocs. Do not edit this file directly. Any changes should be made by running the generation command again. */}\n\n<APIPage document={\"museum.yaml\"} operations={[{\"path\":\"/museum-hours\",\"method\":\"get\"}]} webhooks={[]} hasHead={false} />"}, {"info":{"path":"openapi/tickets/tickets.mdx","absolutePath":"/app/apps/docs/content/docs/openapi/tickets/tickets.mdx"},"data":{"title":"Buy museum tickets","description":"Purchase museum tickets for general entry or special events.","full":true,"_openapi":{"method":"POST","route":"/tickets","toc":[],"structuredData":{"headings":[],"contents":[{"content":"Purchase museum tickets for general entry or special events."}]}},"index":false},"content":"\n\n{/* This file was generated by Fumadocs. Do not edit this file directly. Any changes should be made by running the generation command again. */}\n\n<APIPage document={\"museum.yaml\"} operations={[{\"path\":\"/tickets\",\"method\":\"post\"}]} webhooks={[]} hasHead={false} />"}, {"info":{"path":"ui/(integrations)/feedback.mdx","absolutePath":"/app/apps/docs/content/docs/ui/(integrations)/feedback.mdx"},"data":{"title":"Feedback","description":"Receive feedback from your users","index":false},"content":"\n\n## Overview\n\nFeedback is crucial for knowing what your reader thinks, and help you to further improve documentation content.\n\n## Installation\n\nAdd dependencies:\n\n```package-install\nclass-variance-authority lucide-react\n```\n\nCopy the component:\n\n```json doc-gen:file\n{\n  \"file\": \"./components/rate.tsx\",\n  \"codeblock\": {\n    \"lang\": \"tsx\",\n    \"meta\": \"title=\\\"components/rate.tsx\\\"\"\n  }\n}\n```\n\nThe `@/lib/cn` import specifier may be different for your project, change it to import your `cn()` function if needed. (e.g. like `@/lib/utils`)\n\n### How to Use\n\nNow add the `<Rate />` component to your docs page:\n\n```tsx\nimport { DocsPage } from 'fumadocs-ui/page';\nimport { Rate } from '@/components/rate';\nimport posthog from 'posthog-js';\n\nexport default async function Page() {\n  return (\n    <DocsPage toc={toc} full={page.data.full}>\n      {/* at the bottom of page */}\n      <Rate\n        onRateAction={async (url, feedback) => {\n          'use server';\n\n          await posthog.capture('on_rate_docs', feedback);\n        }}\n      />\n    </DocsPage>\n  );\n}\n```\n\nOn above example, it reports user feedback by capturing a `on_rate_docs` event on PostHog.\n\nYou can specify your own server action to `onRateAction`, and report the feedback to different destinations like database, or GitHub Discussions via their API.\n\n### Linking to GitHub Discussion\n\nTo report your feedback to GitHub Discussion, make a custom `onRateAction`.\n\nYou can copy this example as a starting point:\n\n```json doc-gen:file\n{\n  \"file\": \"./lib/github.ts\",\n  \"codeblock\": {\n    \"lang\": \"ts\",\n    \"meta\": \"title=\\\"lib/github.ts\\\"\"\n  }\n}\n```\n\n- Create your own GitHub App and obtain its app ID and private key.\n- Fill required environment variables.\n- Replace constants like `owner`, `repo`, and `DocsCategory`.\n"}, {"info":{"path":"ui/(integrations)/llms.mdx","absolutePath":"/app/apps/docs/content/docs/ui/(integrations)/llms.mdx"},"data":{"title":"llms.txt","description":"Output docs content for large language models","index":false},"content":"\n\nCreate a route handler, modify it to include other remark plugins.\n\n```json doc-gen:file\n{\n  \"file\": \"./content/shared/llms.ts\",\n  \"codeblock\": {\n    \"meta\": \"title=\\\"app/llms.txt/route.ts\\\"\"\n  }\n}\n```\n"}, {"info":{"path":"ui/(integrations)/math.mdx","absolutePath":"/app/apps/docs/content/docs/ui/(integrations)/math.mdx"},"data":{"title":"Math","description":"Writing math equations in Markdown/MDX documents","index":false},"content":"\n\n## Getting Started\n\nFumadocs doesn't bundle with other plugins, you have to manually install\nthose plugins.\n\n```package-install\nremark-math rehype-katex katex\n```\n\n### Add Plugins\n\nAdd the remark/rehype plugins you have installed above.\n\nThe code might be vary depending on your content source, here is an example for Fumadocs MDX:\n\n```ts\nimport rehypeKatex from 'rehype-katex';\nimport remarkMath from 'remark-math';\nimport { defineConfig } from 'fumadocs-mdx/config';\n\nexport default defineConfig({\n  mdxOptions: {\n    remarkPlugins: [remarkMath],\n    // Place it at first so that it won't be changed by syntax highlighter\n    rehypePlugins: (v) => [rehypeKatex, ...v],\n  },\n});\n```\n\n### Add Stylesheet\n\nIn order to make it looks great on the client, add the following to root layout:\n\n```tsx title=\"layout.tsx\"\nimport 'katex/dist/katex.css';\n```\n\n### Done\n\nType some TeX expression in your documents\n\n````mdx\n```math\nc = \\pm\\sqrt{a^2 + b^2}\n```\n````\n\n```math\nc = \\pm\\sqrt{a^2 + b^2}\n```\n\n---\n\n**Long equations example**\n\n```math\n\\displaystyle {\\begin{aligned}T_{f}(z)&=\\sum _{k=0}^{\\infty }{\\frac {(z-c)^{k}}{2\\pi i}}\\int _{\\gamma }{\\frac {f(w)}{(w-c)^{k+1}}}\\,dw\\\\&={\\frac {1}{2\\pi i}}\\int _{\\gamma }{\\frac {f(w)}{w-c}}\\sum _{k=0}^{\\infty }\\left({\\frac {z-c}{w-c}}\\right)^{k}\\,dw\\\\&={\\frac {1}{2\\pi i}}\\int _{\\gamma }{\\frac {f(w)}{w-c}}\\left({\\frac {1}{1-{\\frac {z-c}{w-c}}}}\\right)\\,dw\\\\&={\\frac {1}{2\\pi i}}\\int _{\\gamma }{\\frac {f(w)}{w-z}}\\,dw=f(z),\\end{aligned}}\n```\n"}, {"info":{"path":"ui/(integrations)/mermaid.mdx","absolutePath":"/app/apps/docs/content/docs/ui/(integrations)/mermaid.mdx"},"data":{"title":"Mermaid","description":"Rendering diagrams in your docs","index":false},"content":"\n\nFumadocs doesn't have a built-in Mermaid wrapper provided, we recommend using `mermaid` directly.\n\n## Setup\n\nInstall the required dependencies, `next-themes` is used with Fumadocs to manage the light/dark mode.\n\n```package-install\nmermaid next-themes\n```\n\nCreate the Mermaid component:\n\n<include cwd meta='title=\"components/mdx/mermaid.tsx\"'>\n  ./components/mdx/mermaid.tsx\n</include>\n\n> This is originally inspired by [remark-mermaid](https://github.com/the-guild-org/docs/blob/main/packages/remark-mermaid/src/mermaid.tsx).\n\nAdd the component as a MDX component:\n\n```tsx title=\"mdx-components.tsx\"\nimport defaultMdxComponents from 'fumadocs-ui/mdx';\nimport { Mermaid } from '@/components/mdx/mermaid';\nimport type { MDXComponents } from 'mdx/types';\n\nexport function getMDXComponents(components?: MDXComponents): MDXComponents {\n  return {\n    ...defaultMdxComponents,\n    Mermaid,\n    ...components,\n  };\n}\n```\n\n## Usage\n\nUse it in MDX files.\n\n```mdx\n<Mermaid\n  chart=\"\ngraph TD;\nsubgraph AA [Consumers]\nA[Mobile app];\nB[Web app];\nC[Node.js client];\nend\nsubgraph BB [Services]\nE[REST API];\nF[GraphQL API];\nG[SOAP API];\nend\nZ[GraphQL API];\nA --> Z;\nB --> Z;\nC --> Z;\nZ --> E;\nZ --> F;\nZ --> G;\"\n/>\n```\n\n<Mermaid\n  chart=\"\ngraph TD;\nsubgraph AA [Consumers]\nA[Mobile app];\nB[Web app];\nC[Node.js client];\nend\nsubgraph BB [Services]\nE[REST API];\nF[GraphQL API];\nG[SOAP API];\nend\nZ[GraphQL API];\nA --> Z;\nB --> Z;\nC --> Z;\nZ --> E;\nZ --> F;\nZ --> G;\"\n/>\n"}, {"info":{"path":"ui/(integrations)/open-graph.mdx","absolutePath":"/app/apps/docs/content/docs/ui/(integrations)/open-graph.mdx"},"data":{"title":"Metadata","description":"Usage with Next.js Metadata API","index":false},"content":"\n\n## Introduction\n\nNext.js provides an useful set of utilities, allowing a flexible experience with Fumadocs.\nFumadocs uses the Next.js Metadata API for SEO.\n\nMake sure to read their [Metadata section](https://nextjs.org/docs/app/building-your-application/optimizing/metadata) for the fundamentals of Metadata API.\n\n## Open Graph Image\n\nFor docs pages, Fumadocs has a built-in metadata image generator.\n\nYou will need a route handler to get started.\n\n\n> We need to append `image.png` to the end of slugs so that we can access it via `/docs-og/my-page/image.png`.\n\nIn your docs page, add the image to metadata.\n\n\n\n### Font\n\nYou can also customise the font, options for Satori are also available on the built-in generator.\n\n```ts\nimport { generateOGImage } from 'fumadocs-ui/og';\n\ngenerateOGImage({\n  fonts: [\n    {\n      name: 'Roboto',\n      // Use `fs` (Node.js only) or `fetch` to read the font as Buffer/ArrayBuffer and provide `data` here.\n      data: robotoArrayBuffer,\n      weight: 400,\n      style: 'normal',\n    },\n  ],\n});\n```\n"}, {"info":{"path":"ui/(integrations)/python.mdx","absolutePath":"/app/apps/docs/content/docs/ui/(integrations)/python.mdx"},"data":{"title":"Python","description":"Generate docs from Python","index":false},"content":"\n\n<Callout type=\"warn\" title=\"Experiemntal\">\n  Support for Python docgen is still experimental, please use it in caution.\n</Callout>\n\n## Setup\n\n```package-install\nfumadocs-python shiki\n```\n\n### Generate Docs\n\nInstall the Python command first, we need it to collect docs from your Python package.\n\n```bash\npip install ./node_modules/fumadocs-python\n```\n\nGenerate the docs as a JSON:\n\n```bash\nfumapy-generate your-package-name\n# for example\nfumapy-generate httpx\n```\n\nUse the following script to convert JSON into MDX:\n\n```js title=\"scripts/generate-docs.mjs\"\nimport { rimraf } from 'rimraf';\nimport * as Python from 'fumadocs-python';\nimport * as fs from 'node:fs/promises';\n\n// output JSON file path\nconst jsonPath = './httpx.json';\n\nasync function generate() {\n  const out = 'content/docs/(api)';\n  // clean previous output\n  await rimraf(out);\n\n  const content = JSON.parse((await fs.readFile(jsonPath)).toString());\n  const converted = Python.convert(content, {\n    baseUrl: '/docs',\n  });\n\n  await Python.write(converted, {\n    outDir: out,\n  });\n}\n\nvoid generate();\n```\n\n<Callout type=\"warn\" title=\"Be careful\">\n  While most docgens use Markdown or reStructuredText, Fumadocs uses **MDX**.\n  Make sure your doc is valid in MDX syntax before running.\n</Callout>\n\n### MDX Components\n\nAdd the components.\n\n```tsx\nimport defaultMdxComponents from 'fumadocs-ui/mdx';\nimport type { MDXComponents } from 'mdx/types';\nimport * as Python from 'fumadocs-python/components';\n\nexport function getMDXComponents(components?: MDXComponents): MDXComponents {\n  return {\n    ...defaultMdxComponents,\n    ...Python,\n    ...components,\n  };\n}\n```\n\nAdd styles:\n\n```css title=\"Tailwind CSS\"\n@import 'tailwindcss';\n@import 'fumadocs-ui/css/neutral.css';\n@import 'fumadocs-ui/css/preset.css';\n/* [!code ++] */\n@import 'fumadocs-python/preset.css';\n```\n"}, {"info":{"path":"ui/(integrations)/twoslash.mdx","absolutePath":"/app/apps/docs/content/docs/ui/(integrations)/twoslash.mdx"},"data":{"title":"Twoslash","description":"Use Typescript Twoslash in your docs","index":false},"content":"\n\n## Usage\n\nThanks to the Twoslash integration of [Shiki](https://github.com/shikijs/shiki), the default code syntax highlighter, it is as simple as adding a transformer.\n\n```package-install\nfumadocs-twoslash twoslash\n```\n\nUpdate your `serverExternalPackages` in Next.js config:\n\n```js\nimport { createMDX } from 'fumadocs-mdx/next';\n\nconst config = {\n  reactStrictMode: true,\n  serverExternalPackages: ['typescript', 'twoslash'],\n};\n\nconst withMDX = createMDX();\n\nexport default withMDX(config);\n```\n\nAdd to your Shiki transformers.\n\n```ts twoslash title=\"source.config.ts (Fumadocs MDX)\"\nimport { defineConfig } from 'fumadocs-mdx/config';\nimport { transformerTwoslash } from 'fumadocs-twoslash';\nimport { rehypeCodeDefaultOptions } from 'fumadocs-core/mdx-plugins';\n\nexport default defineConfig({\n  mdxOptions: {\n    rehypeCodeOptions: {\n      themes: {\n        light: 'github-light',\n        dark: 'github-dark',\n      },\n      transformers: [\n        ...(rehypeCodeDefaultOptions.transformers ?? []),\n        transformerTwoslash(),\n      ],\n    },\n  },\n});\n```\n\nAdd required styles, Tailwind CSS is recommended.\n\n```css title=\"Tailwind CSS\"\n@import 'fumadocs-twoslash/twoslash.css';\n```\n\nAdd MDX components.\n\n```tsx title=\"mdx-components.tsx\"\nimport { Popup, PopupContent, PopupTrigger } from 'fumadocs-twoslash/ui';\nimport defaultComponents from 'fumadocs-ui/mdx';\nimport type { MDXComponents } from 'mdx/types';\n\nexport function getMDXComponents(components?: MDXComponents): MDXComponents {\n  return {\n    ...defaultComponents,\n    Popup,\n    PopupContent,\n    PopupTrigger,\n    ...components,\n  };\n}\n```\n\nNow you can add `twoslash` meta string to codeblocks.\n\n````md\n```ts twoslash\nconsole.log('Hello World');\n```\n````\n\n### Example\n\nLearn more about [Twoslash notations](https://twoslash.netlify.app/refs/notations).\n\n```ts twoslash title=\"Test\"\ntype Player = {\n  /**\n   * The player name\n   * @default 'user'\n   */\n  name: string;\n};\n\n// ---cut---\n// @noErrors\nconsole.g;\n//       ^|\n\n// ---cut-start---\n// ---cut-end---\n\n// ---cut-start---\n// ---cut-end---\n\n// ---cut-start---\n// ---cut-end---\n\n// ---cut-start---\n// ---cut-end---\n\nconst player: Player = { name: 'Hello World' };\n//    ^?\n```\n\n```ts twoslash\nconst a = '123';\n\nconsole.log(a);\n//      ^^^\n```\n\n```ts twoslash\nimport { generateFiles } from 'fumadocs-openapi';\n\nvoid generateFiles({\n  input: ['./museum.yaml'],\n  output: './content/docs/ui',\n});\n```\n\n```ts twoslash\n// @errors: 2588\nconst a = '123';\n\na = 132;\n```\n\n## Cache\n\nYou can enable filesystem cache with `typesCache` option:\n\n```ts twoslash title=\"source.config.ts\"\nimport { transformerTwoslash } from 'fumadocs-twoslash';\nimport { createFileSystemTypesCache } from 'fumadocs-twoslash/cache-fs';\n\ntransformerTwoslash({\n  typesCache: createFileSystemTypesCache(),\n});\n```\n"}, {"info":{"path":"ui/(integrations)/typescript.mdx","absolutePath":"/app/apps/docs/content/docs/ui/(integrations)/typescript.mdx"},"data":{"title":"Typescript","description":"Generate docs from Typescript definitions","index":false},"content":"\n\n## Usage\n\n```package-install\nfumadocs-typescript\n```\n\n### UI Integration\n\nIt comes with the `AutoTypeTable` component. Learn more about [Auto Type Table](/docs/ui/components/auto-type-table).\n\n### MDX Integration\n\nYou can use it as a remark plugin:\n\n```ts title=\"source.config.ts\" tab=\"Fumadocs MDX\"\nimport { remarkAutoTypeTable, createGenerator } from 'fumadocs-typescript';\nimport { defineConfig } from 'fumadocs-mdx/config';\n\nconst generator = createGenerator();\n\nexport default defineConfig({\n  mdxOptions: {\n    remarkPlugins: [[remarkAutoTypeTable, { generator }]],\n  },\n});\n```\n\n```ts tab=\"MDX Compiler\"\nimport { remarkAutoTypeTable, createGenerator } from 'fumadocs-typescript';\nimport { compile } from '@mdx-js/mdx';\n\nconst generator = createGenerator();\n\nawait compile('...', {\n  remarkPlugins: [[remarkAutoTypeTable, { generator }]],\n});\n```\n\nIt gives you a `auto-type-table` component.\n\nYou can use it like [Auto Type Table](/docs/ui/components/auto-type-table), but with additional rules:\n\n- The value of attributes must be string.\n- `path` accepts a path relative to the MDX file itself.\n- You also need to add [`TypeTable`](/docs/ui/components/type-table) to MDX components.\n\n```ts title=\"path/to/file.ts\"\nexport interface MyInterface {\n  name: string;\n}\n```\n\n```mdx title=\"page.mdx\"\n<auto-type-table path=\"./path/to/file.ts\" name=\"MyInterface\" />\n```\n\n## Annotations\n\n### Hide\n\nHide a field by adding `@internal` tsdoc tag.\n\n```ts\ninterface MyInterface {\n  /**\n   * @internal\n   */\n  cache: number;\n}\n```\n\n### Specify Type Name\n\nYou can specify the name of a type with the `@remarks` tsdoc tag.\n\n```ts\ninterface MyInterface {\n  /**\n   * @remarks `timestamp` Returned by API. // [!code highlight]\n   */\n  time: number;\n}\n```\n\nThis will make the type of `time` property to be shown as `timestamp`.\n"}, {"info":{"path":"ui/components/accordion.mdx","absolutePath":"/app/apps/docs/content/docs/ui/components/accordion.mdx"},"data":{"title":"Accordion","description":"Add Accordions to your documentation","preview":"accordion","index":false},"content":"\n\n## Usage\n\nBased on\n[Radix UI Accordion](https://www.radix-ui.com/primitives/docs/components/accordion), useful for FAQ sections.\n\n```mdx\nimport { Accordion, Accordions } from 'fumadocs-ui/components/accordion';\n\n<Accordions type=\"single\">\n  <Accordion title=\"My Title\">My Content</Accordion>\n</Accordions>\n```\n\n### Accordions\n\n<AutoTypeTable path=\"./content/docs/ui/props.ts\" name=\"AccordionsProps\" />\n\n### Accordion\n\n<AutoTypeTable path=\"./content/docs/ui/props.ts\" name=\"AccordionProps\" />\n\n### Linking to Accordion\n\nYou can specify an `id` for accordion. The accordion will automatically open when the user is navigating to the page with the specified `id` in hash parameter.\n\n```mdx\n<Accordions>\n<Accordion title=\"My Title\" id=\"my-title\">\n\nMy Content\n\n</Accordion>\n</Accordions>\n```\n\n> The value of accordion is same as title by default. When an id presents, it will be used as the value instead.\n"}, {"info":{"path":"ui/components/auto-type-table.mdx","absolutePath":"/app/apps/docs/content/docs/ui/components/auto-type-table.mdx"},"data":{"title":"Auto Type Table","description":"Auto-generated type table","index":false},"content":"\n\n<Wrapper>\n\n<div className=\"bg-fd-background p-4 rounded-xl\">\n\n<AutoTypeTable name=\"AutoTypeTableExample\" type={`export interface AutoTypeTableExample {\n    /**\n     * Markdown syntax like links, \\`code\\` are supported.\n     *\n     * See https://fumadocs.vercel.app/docs/ui/components/type-table\n     */\n    name: string;\n\n    /**\n    * We love Shiki.\n    *\n    * \\`\\`\\`ts\n    * console.log(\"Hello World, powered by Shiki\");\n    * \\`\\`\\`\n    */\n    options: Partial<{ a: unknown }>;\n\n}`} />\n\n</div>\n\n</Wrapper>\n\nIt generates a table for your docs based on TypeScript definitions.\n\n## Usage\n\n```package-install\nfumadocs-typescript\n```\n\nInitialize the TypeScript compiler and add it as a MDX component.\n\n```tsx title=\"mdx-components.tsx\"\nimport defaultComponents from 'fumadocs-ui/mdx';\nimport type { MDXComponents } from 'mdx/types';\nimport { createGenerator } from 'fumadocs-typescript';\nimport { AutoTypeTable } from 'fumadocs-typescript/ui';\n\nconst generator = createGenerator();\n\nexport function getMDXComponents(components?: MDXComponents): MDXComponents {\n  return {\n    ...defaultComponents,\n    AutoTypeTable: (props) => (\n      <AutoTypeTable {...props} generator={generator} />\n    ),\n    ...components,\n  };\n}\n```\n\n### From File\n\nIt accepts a `path` prop that points to a typescript file, and `name` for the exported type name.\n\n```ts title=\"path/to/file.ts\"\nexport interface MyInterface {\n  name: string;\n}\n```\n\n```mdx\n<AutoTypeTable path=\"./path/to/file.ts\" name=\"MyInterface\" />\n```\n\nThe path is relative to your project directory (`cwd`), because `AutoTypeTable` is a React Server Component, it cannot access build-time information like MDX file path.\n\n<Callout title=\"Server Component only\" type=\"warn\">\n\nYou cannot use this in a client component.\n\n</Callout>\n\n### From Type\n\nYou can specify the type to generate, without an actual TypeScript file.\n\n```mdx\nimport { AutoTypeTable } from 'fumadocs-typescript/ui';\n\n<AutoTypeTable type=\"{ hello: string }\" />\n```\n\nWhen a `path` is given, it shares the same context as the TypeScript file.\n\n```ts title=\"file.ts\"\nexport type A = { hello: string };\n```\n\n```mdx\n<AutoTypeTable path=\"file.ts\" type=\"A & { world: string }\" />\n```\n\nWhen `type` has multiple lines, the export statement and `name` prop are required.\n\n```mdx\n<AutoTypeTable\n  path=\"file.ts\"\n  name=\"B\"\n  type={`\nimport { ReactNode } from \"react\"\nexport type B = ReactNode | { world: string }\n`}\n/>\n```\n\n### Functions\n\nNotice that only object type is allowed. For functions, you should wrap them into an object instead.\n\n```ts\nexport interface MyInterface {\n  myFn: (input: string) => void;\n}\n```\n\n### References\n\n<auto-type-table path=\"../props.ts\" name=\"AutoTypeTableProps\" />\n\n### File System\n\nIt relies on the file system, hence, the page referencing this component must be built in **build time**. Rendering the component on serverless runtime may cause problems.\n\n### Deep Dive\n\nUnder the hood, it uses the [Typescript Compiler API](https://github.com/microsoft/TypeScript/wiki/Using-the-Compiler-API) to extract type information.\nYour `tsconfig.json` file in the current working directory will be loaded.\n\nTo change the compiler settings, pass a `options` prop to the component.\n\nLearn more about [Typescript Docs Generation](/docs/ui/typescript).\n"}, {"info":{"path":"ui/components/banner.mdx","absolutePath":"/app/apps/docs/content/docs/ui/components/banner.mdx"},"data":{"title":"Banner","description":"Add a banner to your site","preview":"banner","index":false},"content":"\n\n## Usage\n\nPut the element at the top of your root layout, you can use it for displaying announcements.\n\n```tsx\nimport { Banner } from 'fumadocs-ui/components/banner';\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}): React.ReactElement {\n  return (\n    <html lang=\"en\">\n      <body>\n        <Banner>Hello World</Banner>\n        {children}\n      </body>\n    </html>\n  );\n}\n```\n\n### Variant\n\nChange the default variant.\n\n```tsx\nimport { Banner } from 'fumadocs-ui/components/banner';\n\n<Banner variant=\"rainbow\">Hello World</Banner>;\n```\n\n### Change Layout\n\nBy default, the banner uses a `style` tag to modify Fumadocs layouts (e.g. reduce the sidebar height).\nYou can disable it with:\n\n```tsx\nimport { Banner } from 'fumadocs-ui/components/banner';\n\n<Banner changeLayout={false}>Hello World</Banner>;\n```\n\n### Close\n\nTo allow users to close the banner, give the banner an ID.\n\n```tsx\nimport { Banner } from 'fumadocs-ui/components/banner';\n\n<Banner id=\"hello-world\">Hello World</Banner>;\n```\n\nThe state will be automatically persisted.\n"}, {"info":{"path":"ui/components/dynamic-codeblock.mdx","absolutePath":"/app/apps/docs/content/docs/ui/components/dynamic-codeblock.mdx"},"data":{"title":"Code Block (Dynamic)","description":"A codeblock that also highlights code","preview":"dynamicCodeBlock","index":false},"content":"\n\n## Usage\n\n### Client Component\n\n```tsx\nimport { DynamicCodeBlock } from 'fumadocs-ui/components/dynamic-codeblock';\n\n<DynamicCodeBlock lang=\"ts\" code='console.log(\"Hello World\")' />;\n```\n\nUnlike the MDX [`CodeBlock`](/docs/ui/mdx/codeblock) component, this is a client component that can be used without MDX.\nIt highlights the code with Shiki and use the default component to render it.\n\nFeatures:\n\n- Can be pre-rendered on server\n- load languages and themes on browser lazily\n\n#### Options\n\n```tsx\nimport { DynamicCodeBlock } from 'fumadocs-ui/components/dynamic-codeblock';\n\n<DynamicCodeBlock\n  lang=\"ts\"\n  code='console.log(\"Hello World\")'\n  options={{\n    themes: {\n      light: 'github-light',\n      dark: 'github-dark',\n    },\n    components: {\n      // override components (e.g. `pre` and `code`)\n    },\n    // other Shiki options\n  }}\n/>;\n```\n\n### Server Component\n\nFor a server component equivalent, you can use the built-in utility from core:\n\n<include>./server-codeblock.tsx</include>\n"}, {"info":{"path":"ui/components/files.mdx","absolutePath":"/app/apps/docs/content/docs/ui/components/files.mdx"},"data":{"title":"Files","description":"Display file structure in your documentation","preview":"files","index":false},"content":"\n\n## Usage\n\nWrap file components in `Files`.\n\n```mdx\nimport { File, Folder, Files } from 'fumadocs-ui/components/files';\n\n<Files>\n  <Folder name=\"app\" defaultOpen>\n    <File name=\"layout.tsx\" />\n    <File name=\"page.tsx\" />\n    <File name=\"global.css\" />\n  </Folder>\n  <Folder name=\"components\">\n    <File name=\"button.tsx\" />\n    <File name=\"tabs.tsx\" />\n    <File name=\"dialog.tsx\" />\n  </Folder>\n  <File name=\"package.json\" />\n</Files>\n```\n\n### File\n\n<AutoTypeTable path=\"./content/docs/ui/props.ts\" name=\"FileProps\" />\n\n### Folder\n\n<AutoTypeTable path=\"./content/docs/ui/props.ts\" name=\"FolderProps\" />\n"}, {"info":{"path":"ui/components/github-info.mdx","absolutePath":"/app/apps/docs/content/docs/ui/components/github-info.mdx"},"data":{"title":"GitHub Info","description":"Display your GitHub repository information","preview":"githubInfo","index":false},"content":"\n\n## Usage\n\n```tsx\n\n```\n\nIt's recommended to add it to your docs layout with `links` option:\n\n```tsx title=\"app/docs/layout.tsx\"\nimport { DocsLayout, type DocsLayoutProps } from 'fumadocs-ui/layouts/notebook';\nimport type { ReactNode } from 'react';\nimport { baseOptions } from '@/app/layout.config';\nimport { source } from '@/lib/source';\nimport { GithubInfo } from 'fumadocs-ui/components/github-info';\n\nconst docsOptions: DocsLayoutProps = {\n  ...baseOptions,\n  tree: source.pageTree,\n  links: [\n    {\n      type: 'custom',\n      children: (\n        <GithubInfo owner=\"fuma-nama\" repo=\"fumadocs\" className=\"lg:-mx-2\" />\n      ),\n    },\n  ],\n};\n\nexport default function Layout({ children }: { children: ReactNode }) {\n  return <DocsLayout {...docsOptions}>{children}</DocsLayout>;\n}\n```\n"}, {"info":{"path":"ui/components/image-zoom.mdx","absolutePath":"/app/apps/docs/content/docs/ui/components/image-zoom.mdx"},"data":{"title":"Zoomable Image","description":"Allow zoom-in images in your documentation","preview":"zoomImage","index":false},"content":"\n\n## Usage\n\nReplace `img` with `ImageZoom` in your MDX components.\n\n```tsx title=\"mdx-components.tsx\"\nimport { ImageZoom } from 'fumadocs-ui/components/image-zoom';\nimport defaultComponents from 'fumadocs-ui/mdx';\nimport type { MDXComponents } from 'mdx/types';\n\nexport function getMDXComponents(components?: MDXComponents): MDXComponents {\n  return {\n    ...defaultComponents,\n    img: (props) => <ImageZoom {...(props as any)} />,\n    ...components,\n  };\n}\n```\n\nNow image zoom will be automatically enabled on all images.\n\n```mdx\n![Test](/banner.png)\n```\n\n### Image Optimization\n\nA default [`sizes` property](https://nextjs.org/docs/app/api-reference/components/image#sizes) will be defined for Next.js `<Image />` component if not specified.\n"}, {"info":{"path":"ui/components/index.mdx","absolutePath":"/app/apps/docs/content/docs/ui/components/index.mdx"},"data":{"title":"Components","description":"Additional components to improve your docs","index":true},"content":"\n"}, {"info":{"path":"ui/components/inline-toc.mdx","absolutePath":"/app/apps/docs/content/docs/ui/components/inline-toc.mdx"},"data":{"title":"Inline TOC","description":"Add Inline TOC into your documentation","preview":"inlineTOC","index":false},"content":"\n\n## Usage\n\nPass TOC items to the component.\n\n```mdx\nimport { InlineTOC } from 'fumadocs-ui/components/inline-toc';\n\n<InlineTOC items={toc} />\n```\n\n### Use in Pages\n\nYou can add inline TOC into every page.\n\n```tsx\n<DocsPage>\n  ...\n  <InlineTOC items={toc} />\n  ...\n</DocsPage>\n```\n\n## Reference\n\n<AutoTypeTable path=\"./content/docs/ui/props.ts\" name=\"InlineTOCProps\" />\n"}, {"info":{"path":"ui/components/steps.mdx","absolutePath":"/app/apps/docs/content/docs/ui/components/steps.mdx"},"data":{"title":"Steps","description":"Adding steps to your docs","preview":"steps","index":false},"content":"\n\n## Usage\n\nPut your steps into the `Steps` container.\n\n```mdx\nimport { Step, Steps } from 'fumadocs-ui/components/steps';\n\n<Steps>\n<Step>\n\n### Hello World\n\n</Step>\n\n<Step>\n\n### Hello World\n\n</Step>\n</Steps>\n```\n\n> We recommend using Tailwind CSS utility classes directly on Tailwind CSS projects.\n\n### Without imports\n\nYou can use the Tailwind CSS utilities without importing it.\n\n```mdx\n<div className=\"fd-steps\">\n  <div className=\"fd-step\" />\n</div>\n```\n\nIt supports adding step styles to only headings with arbitrary variants.\n\n```mdx\n<div className='fd-steps [&_h3]:fd-step'>\n\n### Hello World\n\n</div>\n```\n\n<div className='fd-steps [&_h3]:fd-step'>\n\n### Hello World\n\nYou no longer need to use the step component anymore.\n\n</div>\n"}, {"info":{"path":"ui/components/tabs.mdx","absolutePath":"/app/apps/docs/content/docs/ui/components/tabs.mdx"},"data":{"title":"Tabs","description":"A Tabs component built with Radix UI, with additional features such as persistent and shared value.","preview":"tabs","index":false},"content":"\n\n## Usage\n\nImport it in your MDX documents.\n\n```mdx\nimport { Tab, Tabs } from 'fumadocs-ui/components/tabs';\n\n<Tabs items={['Javascript', 'Rust']}>\n  <Tab value=\"Javascript\">Javascript is weird</Tab>\n  <Tab value=\"Rust\">Rust is fast</Tab>\n</Tabs>\n```\n\n### Without `value`\n\nWithout a `value`, it detects from the children index. Note that it might cause errors on re-renders, it's not encouraged if the tabs might change.\n\n```mdx\nimport { Tab, Tabs } from 'fumadocs-ui/components/tabs';\n\n<Tabs items={['Javascript', 'Rust']}>\n  <Tab>Javascript is weird</Tab>\n  <Tab>Rust is fast</Tab>\n</Tabs>\n```\n\n#### Demo with Re-renders\n\n<Tabs items={['Javascript', 'Rust']}>\n  <Tab>Javascript is weird</Tab>\n  <Tab>Rust is fast</Tab>\n</Tabs>\n\n<WithoutValueTest />\n\n### Shared Value\n\nBy passing an `groupId` property, you can share a value across all tabs with the same\nid.\n\n```mdx\n<Tabs groupId=\"language\" items={['Javascript', 'Rust']}>\n  <Tab value=\"Javascript\">Javascript is weird</Tab>\n  <Tab value=\"Rust\">Rust is fast</Tab>\n</Tabs>\n```\n\n### Persistent\n\nYou can enable persistent by passing a `persist` property. The value will be\nstored in `localStorage`, with its id as the key.\n\n```mdx\n<Tabs groupId=\"language\" items={['Javascript', 'Rust']} persist>\n  <Tab value=\"Javascript\">Javascript is weird</Tab>\n  <Tab value=\"Rust\">Rust is fast</Tab>\n</Tabs>\n```\n\n> Persistent only works if you have passed an `id`.\n\n### Default Value\n\nSet a default value by passing `defaultIndex`.\n\n```mdx\n<Tabs items={['Javascript', 'Rust']} defaultIndex={1}>\n  <Tab value=\"Javascript\">Javascript is weird</Tab>\n  <Tab value=\"Rust\">Rust is fast</Tab>\n</Tabs>\n```\n\n### Link to Tab\n\nUse HTML `id` attribute to link to a specific tab.\n\n```mdx\n<Tabs items={['Javascript', 'Rust', 'C++']}>\n  <Tab value=\"Javascript\">Javascript is weird</Tab>\n  <Tab value=\"Rust\">Rust is fast</Tab>\n  <Tab id=\"tab-cpp\" value=\"C++\">\n    `Hello World`\n  </Tab>\n</Tabs>\n```\n\nYou can add the hash `#tab-cpp` to your URL and reload, the C++ tab will be activated.\n\n<Tabs items={['Javascript', 'Rust', 'C++']}>\n  <Tab value=\"Javascript\">Javascript is weird</Tab>\n  <Tab value=\"Rust\">Rust is fast</Tab>\n  <Tab id=\"tab-cpp\" value=\"C++\">\n    `Hello World`\n  </Tab>\n</Tabs>\n\nAdditionally, the `updateAnchor` property can be set to `true` in the `Tabs` component\nto automatically update the URL hash whenever time a new tab is selected:\n\n```mdx\n<Tabs items={['Javascript', 'Rust', 'C++']} updateAnchor>\n  <Tab id=\"tab-js\" value=\"Javascript\">\n    Javascript is weird\n  </Tab>\n  <Tab id=\"tab-rs\" value=\"Rust\">\n    Rust is fast\n  </Tab>\n  <Tab id=\"tab-cpp\" value=\"C++\">\n    `Hello World`\n  </Tab>\n</Tabs>\n```\n\n<UrlBar />\n\n<Tabs items={['Hello', 'World']} updateAnchor>\n  <Tab id=\"tab-hello\" value=\"Hello\">\n    Hello!\n  </Tab>\n  <Tab id=\"tab-world\" value=\"World\">\n    World!\n  </Tab>\n</Tabs>\n\n### Advanced\n\nYou can use the styled Radix UI primitive directly from exported `Primitive`.\n\n```mdx\nimport { Primitive } from 'fumadocs-ui/components/tabs';\n\n<Primitive.Tabs>\n  <Primitive.TabsList>\n    <Primitive.TabsTrigger />\n  </Primitive.TabsList>\n  <Primitive.TabsContent />\n</Primitive.Tabs>\n```\n"}, {"info":{"path":"ui/components/type-table.mdx","absolutePath":"/app/apps/docs/content/docs/ui/components/type-table.mdx"},"data":{"title":"Type Table","description":"A table for documenting types","preview":"typeTable","index":false},"content":"\n\n## Usage\n\nIt accepts a `type` property.\n\n```mdx\nimport { TypeTable } from 'fumadocs-ui/components/type-table';\n\n<TypeTable\n  type={{\n    percentage: {\n      description:\n        'The percentage of scroll position to display the roll button',\n      type: 'number',\n      default: 0.2,\n    },\n  }}\n/>\n```\n\n## References\n\n### Type Table\n\n<AutoTypeTable path=\"./content/docs/ui/props.ts\" name=\"TypeTableProps\" />\n\n### Object Type\n\n<AutoTypeTable path=\"./content/docs/ui/props.ts\" name=\"ObjectTypeProps\" />\n"}, {"info":{"path":"ui/layouts/docs.mdx","absolutePath":"/app/apps/docs/content/docs/ui/layouts/docs.mdx"},"data":{"title":"Docs Layout","description":"The layout of documentation","index":false},"content":"\n\nThe layout of documentation pages, it includes a sidebar and mobile-only navbar.\n\n> It is a server component, you should not reference it in a client component.\n\n## Usage\n\nPass your page tree to the component.\n\n```tsx title=\"layout.tsx\"\nimport { DocsLayout } from 'fumadocs-ui/layouts/docs';\nimport { baseOptions } from '@/app/layout.config';\nimport type { ReactNode } from 'react';\n\nexport default function Layout({ children }: { children: ReactNode }) {\n  return (\n    <DocsLayout {...baseOptions} tree={tree}>\n      {children}\n    </DocsLayout>\n  );\n}\n```\n\n<AutoTypeTable\n  path=\"./content/docs/ui/props.ts\"\n  type=\"Omit<DocsLayoutProps, 'children' | 'disableThemeSwitch'>\"\n/>\n\n## Sidebar\n\n```tsx title=\"layout.tsx\"\nimport { DocsLayout } from 'fumadocs-ui/layouts/docs';\n\n<DocsLayout\n  sidebar={{\n    enabled: true,\n    // replace the default sidebar\n    // component:\n  }}\n/>;\n```\n\n> See [Sidebar Links](/docs/ui/navigation/sidebar) for customising sidebar items.\n\n<AutoTypeTable path=\"./content/docs/ui/props.ts\" name=\"SidebarProps\" />\n\n## Nav\n\nA mobile-only navbar, we recommend to customise it from `baseOptions`.\n\n<div className='max-w-[460px] mx-auto'>\n\n![Docs Nav](/docs/docs-nav.png)\n\n</div>\n\n```tsx\nimport type { BaseLayoutProps } from 'fumadocs-ui/layouts/shared';\n\nexport const baseOptions: BaseLayoutProps = {\n  githubUrl: 'https://github.com/fuma-nama/fumadocs',\n  nav: {\n    title: 'My App',\n  },\n};\n```\n\n<AutoTypeTable\n  path=\"./content/docs/ui/props.ts\"\n  type=\"Omit<NavbarProps, 'children'>\"\n/>\n\n### Transparent Mode\n\nTo make the navbar background transparent, you can configure transparent mode.\n\n```tsx\nimport type { BaseLayoutProps } from 'fumadocs-ui/layouts/shared';\n\nexport const baseOptions: BaseLayoutProps = {\n  nav: {\n    transparentMode: 'top',\n  },\n};\n```\n\n| Mode     | Description                              |\n| -------- | ---------------------------------------- |\n| `always` | Always use a transparent background      |\n| `top`    | When at the top of page                  |\n| `none`   | Disable transparent background (default) |\n\n### Replace Navbar\n\nTo replace the navbar in Docs Layout, set `nav.component` to your own component.\n\n```tsx title=\"layout.tsx\"\nimport { baseOptions } from '@/app/layout.config';\nimport { DocsLayout } from 'fumadocs-ui/layouts/notebook';\nimport type { ReactNode } from 'react';\n\nexport default function Layout({ children }: { children: ReactNode }) {\n  return (\n    <DocsLayout\n      {...baseOptions}\n      nav={{\n        component: <CustomNavbar />,\n      }}\n    >\n      {children}\n    </DocsLayout>\n  );\n}\n```\n\nFumadocs uses **CSS Variables** to share the size of layout components, and fit each layout component into appropriate position.\n\nYou need to override `--fd-nav-height` to the exact height of your custom navbar, this can be done with a CSS stylesheet (e.g. in `global.css`):\n\n```css\n:root {\n  --fd-nav-height: 80px !important;\n}\n```\n\n## Advanced\n\n### Disable Prefetching\n\nBy default, it uses the Next.js Link component with prefetch enabled.\nWhen the link component appears into the browser viewport, the content (RSC payload) will be prefetched.\n\nOn Vercel, this may cause a high usage of serverless functions and Data Cache.\nIt can also hit the limits of some other hosting platforms.\n\nYou can disable prefetching to reduce the amount of RSC requests.\n\n```tsx\nimport { DocsLayout } from 'fumadocs-ui/layouts/docs';\n\n<DocsLayout sidebar={{ prefetch: false }} />;\n```\n"}, {"info":{"path":"ui/layouts/home-layout.mdx","absolutePath":"/app/apps/docs/content/docs/ui/layouts/home-layout.mdx"},"data":{"title":"Home Layout","description":"Shared layout for other pages","index":false},"content":"\n\n## Usage\n\nAdd a navbar and search dialog across other pages.\n\n```tsx title=\"/app/(home)/layout.tsx\"\nimport { HomeLayout } from 'fumadocs-ui/layouts/home';\nimport { baseOptions } from '@/app/layout.config';\nimport type { ReactNode } from 'react';\n\nexport default function Layout({ children }: { children: ReactNode }) {\n  return <HomeLayout {...baseOptions}>{children}</HomeLayout>;\n}\n```\n\nCreate a [Route Group](https://nextjs.org/docs/app/building-your-application/routing/route-groups) to share the same layout across multiple pages.\n\n<Files>\n  <Folder name=\"(home)\" defaultOpen>\n    <File name=\"page.tsx\" />\n    <File name=\"layout.tsx\" />\n  </Folder>\n  <Folder name=\"/docs\">\n    <Folder name={'[[..slugs]]'}>\n      <File name=\"page.tsx\" />\n    </Folder>\n    <File name=\"layout.tsx\" />\n  </Folder>\n</Files>\n\nWe recommend to customise it from [`baseOptions`](/docs/ui/navigation/links).\n"}, {"info":{"path":"ui/layouts/notebook.mdx","absolutePath":"/app/apps/docs/content/docs/ui/layouts/notebook.mdx"},"data":{"title":"Notebook","description":"A more compact version of Docs Layout","index":false},"content":"\n\n## Usage\n\nEnable the notebook layout with `fumadocs-ui/layouts/notebook`, it's a more compact layout than the default one.\n\n![Notebook](/docs/notebook.png)\n\n```tsx title=\"layout.tsx\"\nimport { DocsLayout } from 'fumadocs-ui/layouts/notebook';\nimport { baseOptions } from '@/app/layout.config';\nimport { source } from '@/lib/source';\nimport type { ReactNode } from 'react';\n\nexport default function Layout({ children }: { children: ReactNode }) {\n  return (\n    <DocsLayout\n      {...baseOptions}\n      // the position of navbar\n      nav={{ ...baseOptions.nav, mode: 'top' }}\n      // the position of Sidebar Tabs\n      tabMode=\"navbar\"\n      tree={source.pageTree}\n    >\n      {children}\n    </DocsLayout>\n  );\n}\n```\n"}, {"info":{"path":"ui/layouts/page.mdx","absolutePath":"/app/apps/docs/content/docs/ui/layouts/page.mdx"},"data":{"title":"Docs Page","description":"A page in your documentation","index":false},"content":"\n\nPage is the base element of a documentation, it includes Table of contents,\nFooter, and Breadcrumb.\n\n## Usage\n\n```tsx title=\"page.tsx\"\nimport {\n  DocsPage,\n  DocsDescription,\n  DocsTitle,\n  DocsBody,\n} from 'fumadocs-ui/page';\n\n<DocsPage>\n  <DocsTitle>title</DocsTitle>\n  <DocsDescription>description</DocsDescription>\n  <DocsBody>...</DocsBody>\n</DocsPage>;\n```\n\n<Callout type='info' title='Good to know'>\n\nInstead of rendering the title with `DocsTitle` in `page.tsx`, you can put the title into MDX file.\nThis will render the title in the MDX body.\n\n</Callout>\n\n### Body\n\nIt applies the [Typography](/docs/ui/theme#typography) styles, wrap your content inside.\n\n```tsx\nimport { DocsBody } from 'fumadocs-ui/page';\n\n<DocsBody>\n  <h1>This heading looks good!</h1>\n</DocsBody>;\n```\n\n## Configurations\n\n### Full Mode\n\nTo extend the page to fill up all available space, pass `full` to the page component.\nThis will force TOC to be shown as a popover.\n\n```tsx\nimport { DocsPage } from 'fumadocs-ui/page';\n\n<DocsPage full>...</DocsPage>;\n```\n\n### Table of Contents\n\nAn overview of all the headings in your article, it requires an array of headings.\n\nFor Markdown and MDX documents, You can obtain it using the\n[TOC Utility](/docs/headless/utils/get-toc). Content sources like Fumadocs MDX offer this out-of-the-box.\n\n```tsx\nimport { DocsPage } from 'fumadocs-ui/page';\n\n<DocsPage toc={headings}>...</DocsPage>;\n```\n\nCustomise or disable TOC from your documentation with the `tableOfContent` option.\n\n```tsx\nimport { DocsPage } from 'fumadocs-ui/page';\n\n<DocsPage tableOfContent={options}>...</DocsPage>;\n```\n\n<AutoTypeTable path=\"./content/docs/ui/props.ts\" name=\"TOCProps\" />\n\n#### Style\n\nYou can choose another style for TOC, like `clerk` inspired by https://clerk.com:\n\n```tsx\nimport { DocsPage } from 'fumadocs-ui/page';\n\n<DocsPage\n  tableOfContent={{\n    style: 'clerk',\n  }}\n>\n  ...\n</DocsPage>;\n```\n\n#### Popover Mode\n\nOn smaller devices, it is shown on a popover instead.\nCustomise it with the `tableOfContentPopover` option.\n\n```tsx\nimport { DocsPage } from 'fumadocs-ui/page';\n\n<DocsPage tableOfContentPopover={options}>...</DocsPage>;\n```\n\n<AutoTypeTable path=\"./content/docs/ui/props.ts\" name=\"TOCPopoverProps\" />\n\n### Last Updated Time\n\nDisplay last updated time of the page.\n\n```tsx\nimport { DocsPage } from 'fumadocs-ui/page';\n\n<DocsPage lastUpdate={new Date(lastModifiedTime)} />;\n```\n\nSince you might have different version controls (e.g. Github) or it's from\nremote sources like Sanity, Fumadocs UI doesn't display the last updated time by\ndefault.\n\nFor Github hosted documents, you can use\nthe [`getGithubLastEdit`](/docs/headless/utils/git-last-edit) utility.\n\n```tsx\nimport { DocsPage } from 'fumadocs-ui/page';\nimport { getGithubLastEdit } from 'fumadocs-core/server';\n\nconst time = await getGithubLastEdit({\n  owner: 'fuma-nama',\n  repo: 'fumadocs',\n  path: `content/docs/${page.file.path}`,\n});\n\n<DocsPage lastUpdate={new Date(time)} />;\n```\n\n<Callout type='info' title='Note'>\n\n    You can also specify the last updated time of documents (e.g. using frontmatter).\n    Don't forget to [update the schema type](/docs/mdx/collections#schema) on Fumadocs MDX first.\n\n</Callout>\n\n### Edit on GitHub\n\nAdd \"Edit on GitHub\" button to the page.\n\n```tsx\nimport { DocsPage } from 'fumadocs-ui/page';\n\n<DocsPage\n  editOnGithub={{\n    owner: 'fuma-nama',\n    repo: 'fumadocs',\n    sha: 'main',\n    // file path, make sure it's valid\n    path: `content/docs/${page.file.path}`,\n  }}\n/>;\n```\n\n### Footer\n\nFooter is a navigation element that has two buttons to jump to the next and previous pages. When not specified, it shows the neighbour pages found from page tree.\n\nCustomise the footer with the `footer` option.\n\n```tsx\nimport { DocsPage, DocsBody } from 'fumadocs-ui/page';\n\n<DocsPage footer={options}>\n  <DocsBody>...</DocsBody>\n</DocsPage>;\n```\n\n<AutoTypeTable path=\"./content/docs/ui/props.ts\" name=\"FooterProps\" />\n\n### Breadcrumb\n\nA navigation element, shown only when user is navigating in folders.\n\n<AutoTypeTable path=\"./content/docs/ui/props.ts\" name=\"BreadcrumbProps\" />\n"}, {"info":{"path":"ui/layouts/root-provider.mdx","absolutePath":"/app/apps/docs/content/docs/ui/layouts/root-provider.mdx"},"data":{"title":"Root Provider","description":"The context provider of Fumadocs UI.","index":false},"content":"\n\nThe context provider of all the components, including `next-themes` and context\nfor search dialog. It should be located at the root layout.\n\n## Usage\n\n```jsx\nimport { RootProvider } from 'fumadocs-ui/provider';\n\nexport default function Layout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body>\n        <RootProvider>{children}</RootProvider>\n      </body>\n    </html>\n  );\n}\n```\n\n### Search Dialog\n\nCustomize or disable the search dialog with `search` option.\n\n```jsx\n<RootProvider\n  search={{\n    enabled: false,\n  }}\n>\n  {children}\n</RootProvider>\n```\n\nLearn more from [Search](/docs/ui/search).\n\n### Theme Provider\n\nFumadocs supports light/dark modes with [`next-themes`](https://github.com/pacocoursey/next-themes).\nCustomise or disable it with `theme` option.\n\n```jsx\n<RootProvider\n  theme={{\n    enabled: false,\n  }}\n>\n  {children}\n</RootProvider>\n```\n"}, {"info":{"path":"ui/mdx/codeblock.mdx","absolutePath":"/app/apps/docs/content/docs/ui/mdx/codeblock.mdx"},"data":{"title":"Code Block","description":"Displaying Shiki highlighted code blocks","index":false},"content":"\n\n<Wrapper>\n<div className=\"bg-fd-background rounded-lg prose-no-margin\">\n\n```js title=\"config.js\"\nimport createMDX from 'fumadocs-mdx/config';\n\nconst withMDX = createMDX();\n\n// [!code word:config]\n/** @type {import('next').NextConfig} */\nconst config = {\n  // [!code highlight]\n  reactStrictMode: true, // [!code highlight]\n}; // [!code highlight]\n\nexport default withMDX(config);\n```\n\n</div>\n</Wrapper>\n\nThis is a MDX component to be used with [Rehype Code](/docs/headless/mdx/rehype-code) to display highlighted codeblocks.\n\nSupported features:\n\n- Copy button\n- Custom titles and icons\n\n> If you're looking for an equivalent with runtime syntax highlighting, see [Dynamic Code Block](/docs/ui/components/dynamic-codeblock).\n\n## Usage\n\nWrap the pre element in `<CodeBlock />`, which acts as the wrapper of code block.\n\n```tsx title=\"mdx-components.tsx\"\nimport defaultComponents from 'fumadocs-ui/mdx';\nimport type { MDXComponents } from 'mdx/types';\nimport { CodeBlock, Pre } from 'fumadocs-ui/components/codeblock';\n\nexport function getMDXComponents(components?: MDXComponents): MDXComponents {\n  return {\n    ...defaultComponents,\n    // HTML `ref` attribute conflicts with `forwardRef`\n    pre: ({ ref: _ref, ...props }) => (\n      <CodeBlock {...props}>\n        <Pre>{props.children}</Pre> {/* [!code highlight] */}\n      </CodeBlock>\n    ),\n    ...components,\n  };\n}\n```\n\nSee [Markdown](/docs/ui/markdown#codeblock) for usages.\n\n### Keep Background\n\nUse the background color generated by Shiki.\n\n```tsx\nimport { Pre, CodeBlock } from 'fumadocs-ui/components/codeblock';\n\n<CodeBlock keepBackground {...props}>\n  <Pre>{props.children}</Pre>\n</CodeBlock>;\n```\n\n### Icons\n\nSpecify a custom icon by passing an `icon` prop to `CodeBlock` component.\n\nBy default, the icon will be injected by the custom Shiki transformer.\n\n```js title=\"config.js\"\nconsole.log('js');\n```\n"}, {"info":{"path":"ui/mdx/index.mdx","absolutePath":"/app/apps/docs/content/docs/ui/mdx/index.mdx"},"data":{"title":"MDX","description":"Default MDX Components","index":true},"content":"\n\n## Usage\n\nThe default MDX components include Cards, Callouts, Code Blocks and Headings.\n\n```ts\nimport defaultMdxComponents from 'fumadocs-ui/mdx';\n```\n\n### Relative Link\n\nTo support links with relative file path in `href`, override the default `a` component with:\n\n```tsx title=\"app/docs/[[...slug]]/page.tsx\"\nimport { createRelativeLink } from 'fumadocs-ui/mdx';\nimport { source } from '@/lib/source';\nimport { getMDXComponents } from '@/mdx-components';\n\nconst page = source.getPage(['...']);\n\nreturn (\n  <MdxContent\n    components={getMDXComponents({\n      // override the `a` tag\n      a: createRelativeLink(source, page),\n    })}\n  />\n);\n```\n\n```mdx\n[My Link](./file.mdx)\n```\n\n[Example: `../(integrations)/open-graph.mdx`](<../(integrations)/open-graph.mdx>)\n\n<Callout type=\"warn\">Server Component only.</Callout>\n"}, {"info":{"path":"ui/navigation/index.mdx","absolutePath":"/app/apps/docs/content/docs/ui/navigation/index.mdx"},"data":{"title":"Navigation","description":"Configure navigation in your Fumadocs app.","index":true},"content":"\n"}, {"info":{"path":"ui/navigation/links.mdx","absolutePath":"/app/apps/docs/content/docs/ui/navigation/links.mdx"},"data":{"title":"Layout Links","description":"Customise the shared navigation links on all layouts.","index":false},"content":"\n\n## Overview\n\nFumadocs allows adding additional links to your layouts with a `links` prop, like linking to your \"showcase\" page.\n\n<div className=\"not-prose grid gap-2 *:border max-sm:*:last:hidden sm:grid-cols-[2fr_1fr]\">\n\n<>![Nav](/docs/nav-layout-home.png)</>\n\n<>![Nav](/docs/nav-layout-docs.png)</>\n\n</div>\n\n```tsx tab=\"Shared Options\" title=\"app/layout.config.tsx\"\nimport type { BaseLayoutProps } from 'fumadocs-ui/layouts/shared';\n\nexport const baseOptions: BaseLayoutProps = {\n  links: [], // [!code highlight]\n  // other options\n};\n```\n\n```tsx tab=\"Docs Layout\"\nimport { DocsLayout } from 'fumadocs-ui/layouts/docs';\nimport { baseOptions } from '@/app/layout.config';\nimport { source } from '@/lib/source';\nimport type { ReactNode } from 'react';\n\nexport default function Layout({ children }: { children: ReactNode }) {\n  return (\n    <DocsLayout\n      {...baseOptions}\n      tree={source.pageTree}\n      links={[]} // [!code highlight]\n    >\n      {children}\n    </DocsLayout>\n  );\n}\n```\n\n```tsx tab=\"Home Layout\"\nimport { HomeLayout } from 'fumadocs-ui/layouts/home';\nimport { baseOptions } from '@/app/layout.config';\nimport type { ReactNode } from 'react';\n\nexport default function Layout({ children }: { children: ReactNode }) {\n  return (\n    <HomeLayout\n      {...baseOptions}\n      links={[]} // [!code highlight]\n    >\n      {children}\n    </HomeLayout>\n  );\n}\n```\n\nYou can see all supported items below:\n\n### Link Item\n\nA link to navigate to a URL/href, can be external.\n\n```tsx title=\"app/layout.config.tsx\"\nimport { BookIcon } from 'lucide-react';\nimport type { BaseLayoutProps } from 'fumadocs-ui/layouts/shared';\n\nexport const baseOptions: BaseLayoutProps = {\n  links: [\n    {\n      icon: <BookIcon />,\n      text: 'Blog',\n      url: '/blog',\n      // secondary items will be displayed differently on navbar\n      secondary: false,\n    },\n  ],\n};\n```\n\n#### Active Mode\n\nThe conditions to be marked as active.\n\n| Mode         | Description                                                 |\n| ------------ | ----------------------------------------------------------- |\n| `url`        | When browsing the specified url                             |\n| `nested-url` | When browsing the url and its child pages like `/blog/post` |\n| `none`       | Never be active                                             |\n\n```tsx title=\"app/layout.config.tsx\"\nimport type { BaseLayoutProps } from 'fumadocs-ui/layouts/shared';\n\nexport const baseOptions: BaseLayoutProps = {\n  links: [\n    {\n      text: 'Blog',\n      url: '/blog',\n      active: 'nested-url',\n    },\n  ],\n};\n```\n\n### Icon Item\n\nSame as link item, but is shown as an icon button.\nIcon items are secondary by default.\n\n```tsx title=\"app/layout.config.tsx\"\nimport { BookIcon } from 'lucide-react';\nimport type { BaseLayoutProps } from 'fumadocs-ui/layouts/shared';\n\nexport const baseOptions: BaseLayoutProps = {\n  links: [\n    {\n      type: 'icon',\n      label: 'Visit Blog', // `aria-label`\n      icon: <BookIcon />,\n      text: 'Blog',\n      url: '/blog',\n    },\n  ],\n};\n```\n\n### Navigation Menu\n\nA navigation menu containing link items.\n\n```tsx title=\"app/layout.config.tsx\"\nimport type { BaseLayoutProps } from 'fumadocs-ui/layouts/shared';\n\nexport const baseOptions: BaseLayoutProps = {\n  links: [\n    {\n      type: 'menu',\n      text: 'Guide',\n      items: [\n        {\n          text: 'Getting Started',\n          description: 'Learn to use Fumadocs',\n          url: '/docs',\n\n          // (optional) Props for Radix UI Navigation Menu item in Home Layout\n          menu: {\n            className: 'row-span-2',\n            // add banner to navigation menu card\n            // can be an image or other elements\n            banner: <div>Banner</div>,\n          },\n        },\n      ],\n    },\n  ],\n};\n```\n\nNote that the `description` field will only be displayed on the navbar in Home Layout.\n\n### Custom Item\n\nDisplay a custom component.\n\n```tsx title=\"app/layout.config.tsx\"\nimport type { BaseLayoutProps } from 'fumadocs-ui/layouts/shared';\n\nexport const baseOptions: BaseLayoutProps = {\n  links: [\n    {\n      type: 'custom',\n      children: <Button variant=\"primary\">Login</Button>,\n      secondary: true,\n    },\n  ],\n};\n```\n\n### GitHub URL\n\nThere's also a shortcut for adding GitHub repository link item.\n\n```tsx twoslash title=\"app/layout.config.tsx\"\nimport type { BaseLayoutProps } from 'fumadocs-ui/layouts/shared';\n\nexport const baseOptions: BaseLayoutProps = {\n  githubUrl: 'https://github.com',\n};\n```\n"}, {"info":{"path":"ui/navigation/sidebar.mdx","absolutePath":"/app/apps/docs/content/docs/ui/navigation/sidebar.mdx"},"data":{"title":"Sidebar Links","description":"Customise sidebar navigation links on Docs Layout.","index":false},"content":"\n\n## Overview\n\n<div className='flex justify-center items-center *:max-w-[200px] bg-gradient-to-br from-fd-primary/10 rounded-xl border'>\n\n    ![Sidebar](/docs/sidebar.png)\n\n</div>\n\nSidebar items are rendered from the page tree you passed to `<DocsLayout />`.\n\nFor `source.pageTree`, it generates the tree from your file structure, you can see [Routing](/docs/ui/page-conventions) for available patterns.\n\n```tsx title=\"layout.tsx\"\nimport { DocsLayout } from 'fumadocs-ui/layouts/docs';\nimport { source } from '@/lib/source';\nimport type { ReactNode } from 'react';\n\nexport default function Layout({ children }: { children: ReactNode }) {\n  return (\n    <DocsLayout\n      tree={source.pageTree}\n      // other props\n    >\n      {children}\n    </DocsLayout>\n  );\n}\n```\n\nYou may hardcode it too:\n\n```tsx title=\"layout.tsx\"\nimport { DocsLayout } from 'fumadocs-ui/layouts/docs';\nimport type { ReactNode } from 'react';\n\nexport default function Layout({ children }: { children: ReactNode }) {\n  return (\n    <DocsLayout\n      tree={{\n        name: 'docs',\n        children: [],\n      }}\n      // other props\n    >\n      {children}\n    </DocsLayout>\n  );\n}\n```\n\n### Sidebar Tabs\n\nA navigation component to switch between tabs, it will be hidden unless one of its items is active.\n\n<div className='flex justify-center items-center *:max-w-[360px] bg-gradient-to-br from-fd-primary/10 rounded-xl border'>\n\n    ![Sidebar Tabs](/docs/sidebar-tabs.png)\n\n</div>\n\nYou can add items from page tree by creating a `meta.json` file ([Root Folder](/docs/ui/page-conventions#root-folder)):\n\n```json title=\"content/docs/my-folder/meta.json\"\n{\n  \"title\": \"Name of Folder\",\n  \"description\": \"The description of root folder (optional)\",\n  \"root\": true\n}\n```\n\nOr specify them explicitly:\n\n```tsx title=\"/app/docs/layout.tsx\"\nimport { DocsLayout } from 'fumadocs-ui/layouts/docs';\n\n<DocsLayout\n  sidebar={{\n    tabs: [\n      {\n        title: 'Components',\n        description: 'Hello World!',\n        // active for `/docs/components` and sub routes like `/docs/components/button`\n        url: '/docs/components',\n\n        // optionally, you can specify a set of urls which activates the item\n        // urls: new Set(['/docs/test', '/docs/components']),\n      },\n    ],\n  }}\n/>;\n```\n\nSet it to `false` to disable:\n\n```tsx\nimport { DocsLayout } from 'fumadocs-ui/layouts/docs';\n\n<DocsLayout sidebar={{ tabs: false }} />;\n```\n\n<Callout title=\"Want further customisations?\">\n\nYou can specify a `banner` to the [Docs Layout](/docs/ui/layouts/docs) component.\n\n```tsx\nimport { DocsLayout, type DocsLayoutProps } from 'fumadocs-ui/layouts/docs';\nimport type { ReactNode } from 'react';\nimport { baseOptions } from '@/app/layout.config';\nimport { source } from '@/lib/source';\n\nconst docsOptions: DocsLayoutProps = {\n  ...baseOptions,\n  tree: source.pageTree,\n  sidebar: {\n    banner: <div>Hello World</div>,\n  },\n};\n\nexport default function Layout({ children }: { children: ReactNode }) {\n  return <DocsLayout {...docsOptions}>{children}</DocsLayout>;\n}\n```\n\n</Callout>\n\n#### Decoration\n\nChange the icon/styles of tabs.\n\n```tsx\nimport { DocsLayout } from 'fumadocs-ui/layouts/docs';\n\n<DocsLayout\n  sidebar={{\n    tabs: {\n      transform: (option, node) => ({\n        ...option,\n        icon: 'my icon',\n      }),\n    },\n  }}\n/>;\n```\n"}, {"info":{"path":"openapi/events/special-events/get.mdx","absolutePath":"/app/apps/docs/content/docs/openapi/events/special-events/get.mdx"},"data":{"title":"List special events","description":"Return a list of upcoming special events at the museum.","full":true,"_openapi":{"method":"GET","route":"/special-events","toc":[],"structuredData":{"headings":[],"contents":[{"content":"Return a list of upcoming special events at the museum."}]}},"index":false},"content":"\n\n{/* This file was generated by Fumadocs. Do not edit this file directly. Any changes should be made by running the generation command again. */}\n\n<APIPage document={\"museum.yaml\"} operations={[{\"path\":\"/special-events\",\"method\":\"get\"}]} webhooks={[]} hasHead={false} />"}, {"info":{"path":"openapi/events/special-events/post.mdx","absolutePath":"/app/apps/docs/content/docs/openapi/events/special-events/post.mdx"},"data":{"title":"Create special events","description":"Creates a new special event for the museum.","full":true,"_openapi":{"method":"POST","route":"/special-events","toc":[],"structuredData":{"headings":[],"contents":[{"content":"Creates a new special event for the museum."}]}},"index":false},"content":"\n\n{/* This file was generated by Fumadocs. Do not edit this file directly. Any changes should be made by running the generation command again. */}\n\n<APIPage document={\"museum.yaml\"} operations={[{\"path\":\"/special-events\",\"method\":\"post\"}]} webhooks={[]} hasHead={false} />"}, {"info":{"path":"ui/(integrations)/openapi/configurations.mdx","absolutePath":"/app/apps/docs/content/docs/ui/(integrations)/openapi/configurations.mdx"},"data":{"title":"Configurations","description":"Customise Fumadocs OpenAPI","index":false},"content":"\n\n## File Generator\n\nPass options to the `generateFiles` function.\n\n### Input\n\nAn array of input files.\nAllowed:\n\n- File Paths\n- External URLs\n- Wildcard\n\n```ts\nimport { generateFiles } from 'fumadocs-openapi';\n\nvoid generateFiles({\n  input: ['./unkey.json'],\n});\n```\n\nOn Next.js server, the schema is dynamically fetched when the `APIPage` component renders.\n\n<Callout type='warn' title='For Vercel'>\n\n    If the schema is passed as a file path, ensure the page **will not** be re-rendered after build.\n\n</Callout>\n\n### Output\n\nPath to the output directory.\n\n```ts\nimport { generateFiles } from 'fumadocs-openapi';\n\nvoid generateFiles({\n  output: '/content/docs',\n});\n```\n\n### Per\n\nCustomise how the page is generated, default to `operation`.\n\n| mode      | Generate a page for                 |\n| --------- | ----------------------------------- |\n| tag       | each tag                            |\n| file      | each schema                         |\n| operation | each operation (method of endpoint) |\n\n```ts\nimport { generateFiles } from 'fumadocs-openapi';\n\nvoid generateFiles({\n  per: 'tag',\n});\n```\n\n### Group By\n\nIn `operation` mode, you can group output files with folders.\n\n| Group by | Description                                                  |\n| -------- | ------------------------------------------------------------ |\n| tag      | `{tag}/{page}.mdx` (Each operation can only contain `1` tag) |\n| route    | `{api-endpoint}/{page}.mdx`                                  |\n| none     | `{page}.mdx` (default)                                       |\n\n```ts\nimport { generateFiles } from 'fumadocs-openapi';\n\nvoid generateFiles({\n  per: 'operation',\n  groupBy: 'tag',\n});\n```\n\n### Name\n\nA function that controls the output path of files.\n\n```ts\nimport { generateFiles } from 'fumadocs-openapi';\n\nvoid generateFiles({\n  name: (type, file) => {\n    return; // filename\n  },\n});\n```\n\n### Imports\n\nAdd additional imports on the top of MDX files.\n\n```ts\nimport { generateFiles } from 'fumadocs-openapi';\n\nvoid generateFiles({\n  imports: [\n    {\n      names: ['Component1', 'Component2'],\n      from: '@/components/ui/api',\n    },\n  ],\n});\n```\n\n### Frontmatter\n\nCustomise the frontmatter of MDX files.\n\nBy default, it includes:\n\n| property      | description                                      |\n| ------------- | ------------------------------------------------ |\n| `title`       | Page title                                       |\n| `description` | Page description                                 |\n| `full`        | Always true, added for Fumadocs UI               |\n| `method`      | Available method of operation (`operation` mode) |\n| `route`       | Route of operation (`operation` mode)            |\n\n```ts\nimport { generateFiles } from 'fumadocs-openapi';\n\nvoid generateFiles({\n  input: ['./petstore.yaml'],\n  output: './content/docs',\n  frontmatter: (title, description) => ({\n    myProperty: 'hello',\n  }),\n});\n```\n\n### Add Generated Comment\n\nAdd a comment to the top of generated files indicating they are auto-generated.\n\n```ts\nimport { generateFiles } from 'fumadocs-openapi';\n\nvoid generateFiles({\n  input: ['./petstore.yaml'],\n  output: './content/docs',\n  // Add default comment\n  addGeneratedComment: true,\n\n  // Or provide a custom comment\n  addGeneratedComment: 'Custom auto-generated comment',\n\n  // Or disable comments\n  addGeneratedComment: false,\n});\n```\n\n### Tag Display Name\n\nAdding `x-displayName` to OpenAPI Schema can control the display name of your tags.\n\n```yaml title=\"openapi.yaml\"\ntags:\n  - name: test\n    description: this is a tag.\n    x-displayName: My Test Name\n```\n\n## OpenAPI Server\n\nThe server to render pages.\n\n### Generate Code Samples\n\nGenerate custom code samples for each API endpoint.\n\n```ts\nimport { createOpenAPI } from 'fumadocs-openapi/server';\n\nexport const openapi = createOpenAPI({\n  generateCodeSamples(endpoint) {\n    return [\n      {\n        lang: 'js',\n        label: 'JavaScript SDK',\n        source: \"console.log('hello')\",\n      },\n    ];\n  },\n});\n```\n\nIn addition, you can also specify code samples via OpenAPI schema.\n\n```yaml\npaths:\n  /plants:\n    get:\n      x-codeSamples:\n        - lang: js\n          label: JavaScript SDK\n          source: |\n            const planter = require('planter');\n            planter.list({ unwatered: true });\n```\n\n#### Disable Code Sample\n\nYou can disable the code sample for a specific language, for example, to disable cURL:\n\n```ts\nimport { createOpenAPI } from 'fumadocs-openapi/server';\n\nexport const openapi = createOpenAPI({\n  generateCodeSamples(endpoint) {\n    return [\n      {\n        lang: 'curl',\n        label: 'cURL',\n        source: false,\n      },\n    ];\n  },\n});\n```\n\n### Renderer\n\nCustomise components in the page.\n\n```ts\nimport { createOpenAPI } from 'fumadocs-openapi/server';\n\nexport const openapi = createOpenAPI({\n  renderer: {\n    Root(props) {\n      // your own (server) component\n    },\n  },\n});\n```\n\n## Advanced\n\n### Using API Page\n\n> This is not a public API, use it carefully.\n\nTo use the `APIPage` component in your MDX files:\n\n```mdx\n---\ntitle: Delete Api\nfull: true\n---\n\n<APIPage\n  document=\"./unkey.json\"\n  operations={[{ path: '/v1/apis.deleteApi', method: 'post' }]}\n  hasHead={false}\n/>\n```\n\n| Prop         | Description                               |\n| ------------ | ----------------------------------------- |\n| `document`   | OpenAPI Schema                            |\n| `operations` | Operations (API endpoints) to be rendered |\n| `hasHead`    | Enable to render the heading of operation |\n"}, {"info":{"path":"ui/(integrations)/openapi/index.mdx","absolutePath":"/app/apps/docs/content/docs/ui/(integrations)/openapi/index.mdx"},"data":{"title":"OpenAPI","description":"Generating docs for OpenAPI schema","index":false},"content":"\n\n## Manual Setup\n\nInstall the required packages.\n\n```package-install\nfumadocs-openapi shiki\n```\n\n### Generate Styles\n\nPlease note that you must have Tailwind CSS v4 configured.\n\n```css title=\"Tailwind CSS\"\n@import 'tailwindcss';\n@import 'fumadocs-ui/css/neutral.css';\n@import 'fumadocs-ui/css/preset.css';\n/* [!code ++] */\n@import 'fumadocs-openapi/css/preset.css';\n```\n\n### Configure Pages\n\nCreate an OpenAPI instance on the server. Fumadocs OpenAPI renders the pages on server-side.\n\n```ts title=\"lib/source.ts\"\nimport { createOpenAPI, attachFile } from 'fumadocs-openapi/server';\nimport { loader } from 'fumadocs-core/source';\n\nexport const source = loader({\n  pageTree: {\n    // [!code ++] adds a badge to each page item in page tree\n    attachFile,\n  },\n});\n\nexport const openapi = createOpenAPI({\n  // options\n});\n```\n\nAdd `APIPage` to your MDX Components, so that you can use it in MDX files.\n\n```tsx title=\"mdx-components.tsx\"\nimport defaultComponents from 'fumadocs-ui/mdx';\nimport { APIPage } from 'fumadocs-openapi/ui';\nimport { openapi } from '@/lib/source';\nimport type { MDXComponents } from 'mdx/types';\n\nexport function getMDXComponents(components?: MDXComponents): MDXComponents {\n  return {\n    ...defaultComponents,\n    APIPage: (props) => <APIPage {...openapi.getAPIPageProps(props)} />,\n    ...components,\n  };\n}\n```\n\n> It is a React Server Component.\n\n### Generate Files\n\nYou can generate MDX files directly from your OpenAPI schema.\n\nCreate a script:\n\n```js title=\"scripts/generate-docs.mjs\"\nimport { generateFiles } from 'fumadocs-openapi';\n\nvoid generateFiles({\n  input: ['./unkey.json'], // the OpenAPI schemas\n  output: './content/docs',\n  // we recommend to enable it\n  // make sure your endpoint description doesn't break MDX syntax.\n  includeDescription: true,\n});\n```\n\n> Only OpenAPI 3.0 and 3.1 are supported.\n\nGenerate docs with the script:\n\n```bash\nnode ./scripts/generate-docs.mjs\n```\n\n## Features\n\nThe official OpenAPI integration supports:\n\n- Basic API endpoint information\n- Interactive API playground\n- Example code to send request (in different programming languages)\n- Response samples and TypeScript definitions\n- Request parameters and body generated from schemas\n\n### Demo\n\n[View demo](/docs/openapi).\n"}, {"info":{"path":"ui/(integrations)/openapi/proxy.mdx","absolutePath":"/app/apps/docs/content/docs/ui/(integrations)/openapi/proxy.mdx"},"data":{"title":"Creating Proxy","description":"Avoid CORS problem","index":false},"content":"\n\n## Introduction\n\nA proxy server is useful for executing HTTP (`fetch`) requests, as it doesn't have CORS constraints like on the browser.\nWe can use it for executing HTTP requests on the OpenAPI playground, when the target API endpoints do not have CORS configured correctly.\n\n<Callout type=\"warn\" title=\"Warning\">\n  Do not use this on unreliable sites and API endpoints, the proxy server will\n  forward all received headers & body, including HTTP-only `Cookies` and\n  `Authorization` header.\n</Callout>\n\n### Setup\n\nCreate a route handler for proxy server.\n\n```ts title=\"/api/proxy/route.ts\"\nimport { openapi } from '@/lib/source';\n\nexport const { GET, HEAD, PUT, POST, PATCH, DELETE } = openapi.createProxy();\n```\n\n> Follow the [Getting Started](/docs/ui/openapi) guide if `openapi` server is not yet configured.\n\nAnd enable the proxy from `createOpenAPI`.\n\n```ts title=\"lib/source.ts\"\nimport { createOpenAPI } from 'fumadocs-openapi/server';\n\nexport const openapi = createOpenAPI({\n  proxyUrl: '/api/proxy',\n});\n```\n"}, {"info":{"path":"openapi/events/special-events/eventid/delete.mdx","absolutePath":"/app/apps/docs/content/docs/openapi/events/special-events/eventid/delete.mdx"},"data":{"title":"Delete special event","description":"Delete a special event from the collection. Allows museum to cancel planned events.","full":true,"_openapi":{"method":"DELETE","route":"/special-events/{eventId}","toc":[],"structuredData":{"headings":[],"contents":[{"content":"Delete a special event from the collection. Allows museum to cancel planned events."}]}},"index":false},"content":"\n\n{/* This file was generated by Fumadocs. Do not edit this file directly. Any changes should be made by running the generation command again. */}\n\n<APIPage document={\"museum.yaml\"} operations={[{\"path\":\"/special-events/{eventId}\",\"method\":\"delete\"}]} webhooks={[]} hasHead={false} />"}, {"info":{"path":"openapi/events/special-events/eventid/get.mdx","absolutePath":"/app/apps/docs/content/docs/openapi/events/special-events/eventid/get.mdx"},"data":{"title":"Get special event","description":"Get details about a special event.","full":true,"_openapi":{"method":"GET","route":"/special-events/{eventId}","toc":[],"structuredData":{"headings":[],"contents":[{"content":"Get details about a special event."}]}},"index":false},"content":"\n\n{/* This file was generated by Fumadocs. Do not edit this file directly. Any changes should be made by running the generation command again. */}\n\n<APIPage document={\"museum.yaml\"} operations={[{\"path\":\"/special-events/{eventId}\",\"method\":\"get\"}]} webhooks={[]} hasHead={false} />"}, {"info":{"path":"openapi/events/special-events/eventid/patch.mdx","absolutePath":"/app/apps/docs/content/docs/openapi/events/special-events/eventid/patch.mdx"},"data":{"title":"Update special event","description":"Update the details of a special event.","full":true,"_openapi":{"method":"PATCH","route":"/special-events/{eventId}","toc":[],"structuredData":{"headings":[],"contents":[{"content":"Update the details of a special event."}]}},"index":false},"content":"\n\n{/* This file was generated by Fumadocs. Do not edit this file directly. Any changes should be made by running the generation command again. */}\n\n<APIPage document={\"museum.yaml\"} operations={[{\"path\":\"/special-events/{eventId}\",\"method\":\"patch\"}]} webhooks={[]} hasHead={false} />"}, {"info":{"path":"openapi/tickets/tickets/ticketid/qr.mdx","absolutePath":"/app/apps/docs/content/docs/openapi/tickets/tickets/ticketid/qr.mdx"},"data":{"title":"Get ticket QR code","description":"Return an image of your ticket with scannable QR code. Used for event entry.","full":true,"_openapi":{"method":"GET","route":"/tickets/{ticketId}/qr","toc":[],"structuredData":{"headings":[],"contents":[{"content":"Return an image of your ticket with scannable QR code. Used for event entry."}]}},"index":false},"content":"\n\n{/* This file was generated by Fumadocs. Do not edit this file directly. Any changes should be made by running the generation command again. */}\n\n<APIPage document={\"museum.yaml\"} operations={[{\"path\":\"/tickets/{ticketId}/qr\",\"method\":\"get\"}]} webhooks={[]} hasHead={false} />"}], [{"info":{"path":"meta.json","absolutePath":"/app/apps/docs/content/docs/meta.json"},"data":{"pages":["ui","headless","mdx","cli","openapi"]}}, {"info":{"path":"cli/meta.json","absolutePath":"/app/apps/docs/content/docs/cli/meta.json"},"data":{"title":"Fumadocs CLI","description":"The CLI tool for docs automation","root":true,"icon":"Terminal"}}, {"info":{"path":"headless/meta.json","absolutePath":"/app/apps/docs/content/docs/headless/meta.json"},"data":{"title":"Fumadocs Core","pages":["---Guide---","index","search","---Writing---","page-conventions","---API References---","page-tree","internationalization","components","utils","mdx","---Sources---","source-api","content-collections/index","contentlayer","custom-source"],"description":"The headless library","root":true,"icon":"Library"}}, {"info":{"path":"mdx/meta.json","absolutePath":"/app/apps/docs/content/docs/mdx/meta.json"},"data":{"title":"Fumadocs MDX","pages":["---Guide---","index","performance","---Configuration---","collections","global","mdx","plugin","---Features---","include","last-modified","manifest","async","..."],"description":"The official content source","root":true,"icon":"Pencil"}}, {"info":{"path":"openapi/meta.json","absolutePath":"/app/apps/docs/content/docs/openapi/meta.json"},"data":{"title":"OpenAPI Example","description":"A demo for Fumadocs OpenAPI","root":true,"icon":"Rocket"}}, {"info":{"path":"ui/meta.json","absolutePath":"/app/apps/docs/content/docs/ui/meta.json"},"data":{"title":"Framework","pages":["---Introduction---","index","what-is-fumadocs","comparisons","---Setup---","manual-installation","...","(integrations)","---Writing---","markdown","page-conventions","navigation","---UI---","customisation","theme","search","components","mdx","layouts"],"description":"The docs framework","root":true,"icon":"Building2"}}, {"info":{"path":"headless/components/meta.json","absolutePath":"/app/apps/docs/content/docs/headless/components/meta.json"},"data":{"title":"Components","pages":["..."]}}, {"info":{"path":"headless/mdx/meta.json","absolutePath":"/app/apps/docs/content/docs/headless/mdx/meta.json"},"data":{"title":"MDX Plugins"}}, {"info":{"path":"headless/utils/meta.json","absolutePath":"/app/apps/docs/content/docs/headless/utils/meta.json"},"data":{"title":"Utilities","pages":["..."]}}, {"info":{"path":"ui/(integrations)/openapi/meta.json","absolutePath":"/app/apps/docs/content/docs/ui/(integrations)/openapi/meta.json"},"data":{"pages":["configurations","..."]}}], "docs", _sourceConfig)