---
description: 
globs: 
alwaysApply: true
---
# React and Inertia.js Patterns

## Page Component Structure

All Inertia page components should follow this structure:

```typescript
import { InferPageProps } from '@adonisjs/inertia/types'
import { Head } from '@inertiajs/react'
import { AppLayout } from '@/components/layouts/app-layout'
import type UsersController from '#controllers/users_controller'

export default function UsersIndexPage({ 
  users, 
  meta 
}: InferPageProps<UsersController, 'index'>) {
  return (
    <>
      <Head title="Users" />
      <AppLayout breadcrumbs={[{ label: 'Users' }]} layout="sidebar">
        {/* Page content */}
      </AppLayout>
    </>
  )
}
```

## Component Patterns

- Use functional components with hooks
- Prefer TypeScript interfaces for props
- Use proper prop destructuring
- Implement proper error boundaries
- Use React 19 features appropriately

```typescript
interface UserCardProps {
  user: {
    id: number
    name: string
    email: string
  }
  onEdit?: (id: number) => void
}

export function UserCard({ user, onEdit }: UserCardProps) {
  return (
    <div className="p-4 border rounded-lg">
      <h3 className="font-semibold">{user.name}</h3>
      <p className="text-gray-600">{user.email}</p>
      {onEdit && (
        <button onClick={() => onEdit(user.id)}>Edit</button>
      )}
    </div>
  )
}
```

## Layout System

Use the AppLayout component with proper layout selection:

- `layout="sidebar"` for main navigation with sidebar
- `layout="header"` for top navigation bar
- Always provide breadcrumbs for navigation context

## Form Handling

- Use Inertia forms with proper TypeScript types
- Implement proper validation error handling
- Use controlled components for form inputs
- Provide loading states during form submission

```typescript
import { useForm } from '@inertiajs/react'
import { Button } from '@workspace/ui/components/button'
import { Input } from '@workspace/ui/components/input'

export function UserForm() {
  const { data, setData, post, processing, errors } = useForm({
    name: '',
    email: ''
  })

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    post('/users')
  }

  return (
    <form onSubmit={handleSubmit}>
      <Input
        value={data.name}
        onChange={(e) => setData('name', e.target.value)}
        error={errors.name}
      />
      <Button type="submit" disabled={processing}>
        {processing ? 'Saving...' : 'Save'}
      </Button>
    </form>
  )
}
```

## Router Rules

- NEVER use `react-router-dom` 
- Use `react-router` instead: `import { useParams, useLoaderData } from "react-router"`
- For Inertia.js apps, use Inertia's navigation methods

## Styling with TailwindCSS v4

- Use TailwindCSS v4 syntax and features
- Leverage CSS custom properties for theming
- Use Shadcn/UI components from `@workspace/ui`
- Follow the New York style guide for consistent UI

## State Management

- Use React hooks for local state
- Use Inertia's shared data for global state
- Implement proper data fetching patterns
- Use React Query for complex data fetching needs

## Performance Considerations

- Use React.memo for expensive components
- Implement proper key props for lists
- Use code splitting for large components
- Optimize images and assets
