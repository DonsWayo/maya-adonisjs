name: maya-adonisjs

services:
  # Database with PgAI integration
  pgsql:
    image: 'timescale/timescaledb-ha:pg17'
    container_name: 'maya_pgsql'
    ports:
      - '${DB_PORT:-5432}:5432'
    environment:
      POSTGRES_DB: '${DB_DATABASE:-default}'
      POSTGRES_USER: '${DB_USER:-postgres}'
      POSTGRES_PASSWORD: '${DB_PASSWORD:-secret}'
    volumes:
      - 'pgsql_data:/home/postgres/pgdata/data'
    networks:
      - maya_network
    command: ["-c", "ai.ollama_host=http://ollama:11434"]
    # Make Ollama dependency optional
    # depends_on:
    #   ollama:
    #     condition: service_started
    healthcheck:
      test: ['CMD', 'pg_isready', '-q', '-d', '${DB_DATABASE:-default}', '-U', '${DB_USER:-postgres}']
      retries: 3
      timeout: 5s
      interval: 10s

  # Redis for caching, session storage, and pub/sub
  redis:
    image: 'redis:7-alpine'
    container_name: 'maya_redis'
    ports:
      - '${REDIS_PORT:-6379}:6379'
    volumes:
      - 'redis_data:/data'
    networks:
      - maya_network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      retries: 3
      timeout: 5s
      interval: 10s

  # ClickHouse for analytics
  clickhouse:
    image: 'clickhouse/clickhouse-server:23.8-alpine'
    container_name: 'maya_clickhouse'
    ports:
      - '${CLICKHOUSE_PORT:-8123}:8123' # HTTP port
      - '${CLICKHOUSE_NATIVE_PORT:-9000}:9000' # Native port
    volumes:
      - 'clickhouse_data:/var/lib/clickhouse'
    networks:
      - maya_network
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    healthcheck:
      test: ['CMD', 'wget', '--no-verbose', '--spider', '--tries=1', 'http://localhost:8123/ping']
      interval: 10s
      timeout: 5s
      retries: 3

  # Ollama for AI capabilities with Gemma 3 model
  ollama:
    image: 'ollama/ollama:latest'
    container_name: 'maya_ollama'
    volumes:
      - 'ollama_data:/root/.ollama'
    ports:
      - '${OLLAMA_PORT:-11434}:11434'
    networks:
      - maya_network
    command: ["serve"]
    # Disable health check for development
    # healthcheck:
    #   test: ["CMD", "curl", "-s", "-f", "http://localhost:11434/api/version" , "||" , "exit 0"]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 5
    #   start_period: 20s
    # Temporarily disabled - uncomment to enable
    profiles: [ai]

  # PgAI vectorizer worker for background processing
  pgai_vectorizer:
    image: 'timescale/pgai-vectorizer-worker:latest'
    container_name: 'maya_pgai_vectorizer'
    environment:
      PGAI_VECTORIZER_WORKER_DB_URL: postgres://${DB_USER:-postgres}:${DB_PASSWORD:-secret}@pgsql:5432/${DB_DATABASE:-default}
      OLLAMA_HOST: http://ollama:11434
    command: ["--poll-interval", "5s", "--log-level", "DEBUG"]
    networks:
      - maya_network
    depends_on:
      pgsql:
        condition: service_healthy
      # Make Ollama dependency optional
      # ollama:
      #   condition: service_started
    # Temporarily disabled - uncomment to enable
    profiles: [ai]

  # Logto for authentication
  logto:
    image: 'svhd/logto:latest'
    container_name: 'logto'
    depends_on:
      logto_postgres:
        condition: service_healthy
    entrypoint: ["sh", "-c", "npm run cli db seed -- --swe && npm start"]
    environment:
      - TRUST_PROXY_HEADER=1
      - DB_URL=postgres://postgres:p0stgr3s@logto_postgres:5432/logto
      # Use the public URLs for all endpoints since we're using Traefik for routing
      - ENDPOINT=http://logto.localhost
      - ADMIN_ENDPOINT=http://admin.logto.localhost
      # Configure extreme permissive CORS for testing
      - CORS_ALLOWED_ORIGINS=*
      - CORS_ALLOWED_METHODS=GET,POST,PUT,DELETE,OPTIONS,PATCH,HEAD
      - CORS_ALLOWED_HEADERS=*
      - CORS_ALLOW_CREDENTIALS=false
      - CORS_MAX_AGE=86400
      # Additional configuration to ensure proper direct container access
      - PORT=3001
      - ADMIN_PORT=3002
    volumes:
      - 'logto_data:/opt/logto/packages/core/data'
    # Add extra_hosts entries for domain resolution using Docker host gateway
    extra_hosts:
      - "logto.localhost:host-gateway"
      - "admin.logto.localhost:host-gateway"
      - "main.localhost:host-gateway"
      - "monitoring.localhost:host-gateway"
    networks:
      - maya_network
    labels:
      - "traefik.enable=true"
      
      # Enhanced CORS middleware with proper settings for auth flows
      - "traefik.http.middlewares.cors-auth.headers.accesscontrolallowmethods=GET,POST,PUT,DELETE,OPTIONS,PATCH,HEAD"
      - "traefik.http.middlewares.cors-auth.headers.accesscontrolalloworiginlist=*"
      - "traefik.http.middlewares.cors-auth.headers.accesscontrolallowheaders=*"
      - "traefik.http.middlewares.cors-auth.headers.accesscontrolallowcredentials=true"
      - "traefik.http.middlewares.cors-auth.headers.accesscontrolmaxage=3600"
      - "traefik.http.middlewares.simple-cors.headers.addvaryheader=true"
      
      # Main Logto service configuration
      - "traefik.http.routers.logto.rule=Host(`logto.localhost`)"
      - "traefik.http.routers.logto.middlewares=cors-auth"
      - "traefik.http.routers.logto.service=logto-api"
      - "traefik.http.services.logto-api.loadbalancer.server.port=3001"
      
      # Admin UI configuration
      - "traefik.http.routers.logto-admin.rule=Host(`admin.logto.localhost`)"
      - "traefik.http.routers.logto-admin.middlewares=cors-auth"
      - "traefik.http.routers.logto-admin.service=logto-admin-ui"
      - "traefik.http.services.logto-admin-ui.loadbalancer.server.port=3002"

  # Dedicated Postgres for Logto
  logto_postgres:
    image: 'postgres:17-alpine'
    container_name: 'maya_logto_postgres'
    user: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: p0stgr3s
      POSTGRES_DB: logto
    volumes:
      - 'logto_postgres_data:/var/lib/postgresql/data'
    networks:
      - maya_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Initialize Gemma 3 model in Ollama
  init_gemma3:
    image: 'curlimages/curl:latest'
    container_name: 'maya_init_gemma3'
    networks:
      - maya_network
    # Make Ollama dependency optional
    # depends_on:
    #   ollama:
    #     condition: service_healthy
    command: ["-X", "POST", "http://ollama:11434/api/pull", "-d", '{"name":"gemma3:2b-instruct-q4_0"}']
    restart: "no"
    # Temporarily disabled - uncomment to enable
    profiles: [ai]
    
  # MailHog for local email testing
  mailhog:
    image: 'mailhog/mailhog:latest'
    container_name: 'maya_mailhog'
    ports:
      - '${MAILHOG_SMTP_PORT:-1025}:1025' # SMTP server port
      - '${MAILHOG_UI_PORT:-8025}:8025' # Web UI port
    networks:
      - maya_network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "8025"]
      interval: 10s
      timeout: 5s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mailhog.rule=Host(`mailhog.localhost`)"
      - "traefik.http.services.mailhog.loadbalancer.server.port=8025"
      
  # Main application service
  main:
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./apps/main/Dockerfile
      target: development
    container_name: maya_main
    volumes:
      - ./apps/main:/app/apps/main
      - /app/apps/main/node_modules
    # Port is only exposed for direct access if needed
    # Traefik will handle routing through labels
    ports:
      - '${MAIN_PORT:-3333}:3333'
    depends_on:
      pgsql:
        condition: service_healthy
      redis:
        condition: service_healthy
      mailhog:
        condition: service_healthy
      logto:
        condition: service_started
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.main.rule=Host(`main.localhost`)"
      - "traefik.http.services.main.loadbalancer.server.port=3333"
    networks:
      - maya_network
    extra_hosts:
      - "host.docker.internal:host-gateway"
      - "logto.localhost:host-gateway"
      - "admin.logto.localhost:host-gateway"
      - "main.localhost:host-gateway"
      - "monitoring.localhost:host-gateway"
    
        
  # Monitoring application service
  monitoring:
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./apps/monitoring/Dockerfile
      target: development
    container_name: maya_monitoring
    volumes:
      - ./apps/monitoring:/app/apps/monitoring
      - /app/apps/monitoring/node_modules
    # Port is only exposed for direct access if needed
    # Traefik will handle routing through labels
    ports:
      - '${MONITORING_PORT:-3334}:3334'
    depends_on:
      pgsql:
        condition: service_healthy
      redis:
        condition: service_healthy
      clickhouse:
        condition: service_started
    env_file:
      - ./apps/monitoring/.env
    extra_hosts:
      - "logto.localhost:host-gateway"
      - "admin.logto.localhost:host-gateway"
      - "main.localhost:host-gateway"
      - "monitoring.localhost:host-gateway"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.monitoring.rule=Host(`monitoring.localhost`)"
      - "traefik.http.services.monitoring.loadbalancer.server.port=3334"
    networks:
      - maya_network
  # Documentation app (Next.js)
  docs:
    build:
      context: .
      dockerfile: ./apps/docs/Dockerfile
      target: development
    container_name: 'maya_docs'
    restart: unless-stopped
    volumes:
      - ./apps/docs:/app/apps/docs
      - /app/apps/docs/node_modules
    networks:
      - maya_network
    ports:
      - '${DOCS_PORT:-3300}:3300'
    environment:
      - NODE_ENV=${NODE_ENV:-development}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.docs.rule=Host(`docs.localhost`)"
      - "traefik.http.services.docs.loadbalancer.server.port=3300"
  traefik:
    image: traefik:v2.9
    container_name: maya_traefik
    restart: always
    command:
      - "--api.insecure=true"
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=maya-adonisjs_maya_network"
      - "--entrypoints.web.address=:80"
      - "--accesslog=true"
      - "--log.level=DEBUG"
      - "--providers.docker.defaultRule=Host(`{{ normalize .Name }}.localhost`)"
      - "--providers.docker.network=maya_network"
      # DNS settings for internal container resolution
      - "--providers.docker.useBindPortIP=false"
    ports:
      - '${TRAEFIK_PORT:-80}:80'
      - '${TRAEFIK_SECURE_PORT:-443}:443'
      - '${TRAEFIK_DASHBOARD_PORT:-8080}:8080'  # Traefik dashboard
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`traefik.localhost`)"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.entrypoints=web"
    extra_hosts:
      - "logto.localhost:host-gateway"
      - "admin.logto.localhost:host-gateway"
    networks:
      - maya_network

  # MinIO - S3 compatible object storage
  minio:
    image: minio/minio:latest
    container_name: 'maya_minio'
    restart: unless-stopped
    profiles: ["dev"]
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    volumes:
      - minio_data:/data
    networks:
      - maya_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.minio-api.rule=Host(`minio.localhost`)"
      - "traefik.http.services.minio-api.loadbalancer.server.port=9000"
      - "traefik.http.routers.minio-console.rule=Host(`minio-console.localhost`)"
      - "traefik.http.services.minio-console.loadbalancer.server.port=9001"

networks:
  maya_network:
    name: maya-adonisjs_maya_network
    driver: bridge



volumes:
  pgsql_data:
  redis_data:
  clickhouse_data:
  logto_postgres_data:
  logto_data:
  ollama_data:
  main_uploads:
  main_tmp:
  minio_data:
